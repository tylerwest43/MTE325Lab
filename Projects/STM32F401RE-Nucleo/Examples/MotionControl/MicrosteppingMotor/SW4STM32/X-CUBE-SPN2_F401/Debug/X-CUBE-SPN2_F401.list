
X-CUBE-SPN2_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009cc  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000368  20000000  08004b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000270  20000368  08004ea0  00020368  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005d8  08004ea0  000205d8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015468  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002cb7  00000000  00000000  00035800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00008e25  00000000  00000000  000384b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ba0  00000000  00000000  000412e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b40  00000000  00000000  00041e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00010d8c  00000000  00000000  000429c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012d7f  00000000  00000000  0005374c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00060844  00000000  00000000  000664cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000c6d0f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002088  00000000  00000000  000c6d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000368 	.word	0x20000368
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800414c 	.word	0x0800414c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000036c 	.word	0x2000036c
 80001d0:	0800414c 	.word	0x0800414c

080001d4 <L6470_ResetAppCmdPkg>:
{
  uint8_t id;
  
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
  {
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	7003      	strb	r3, [r0, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 80001d8:	6043      	str	r3, [r0, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80001da:	6083      	str	r3, [r0, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80001dc:	60c3      	str	r3, [r0, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80001de:	7403      	strb	r3, [r0, #16]
    (pL6470_AppCmdPkg+id)->p1=0;
 80001e0:	6143      	str	r3, [r0, #20]
    (pL6470_AppCmdPkg+id)->p2=0;
 80001e2:	6183      	str	r3, [r0, #24]
    (pL6470_AppCmdPkg+id)->p3=0;
 80001e4:	61c3      	str	r3, [r0, #28]
  }
}
 80001e6:	4770      	bx	lr

080001e8 <L6470_PrepareAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_PrepareAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 80001e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001ea:	4604      	mov	r4, r0
 80001ec:	460d      	mov	r5, r1
 80001ee:	4617      	mov	r7, r2
 80001f0:	461e      	mov	r6, r3
  if(!L6470_DaisyChain_HalfPrepared)
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <L6470_PrepareAppCmdPkg+0x34>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	b14b      	cbz	r3, 800020c <L6470_PrepareAppCmdPkg+0x24>
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80001f8:	0123      	lsls	r3, r4, #4
 80001fa:	eb05 1004 	add.w	r0, r5, r4, lsl #4
 80001fe:	54ef      	strb	r7, [r5, r3]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8000200:	6046      	str	r6, [r0, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8000202:	9b06      	ldr	r3, [sp, #24]
 8000204:	6083      	str	r3, [r0, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8000206:	9b07      	ldr	r3, [sp, #28]
 8000208:	60c3      	str	r3, [r0, #12]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
  }
  
  L6470_FillAppCmdPkg(L6470_Id, pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
}
 800020a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800020c:	4b03      	ldr	r3, [pc, #12]	; (800021c <L6470_PrepareAppCmdPkg+0x34>)
 800020e:	2201      	movs	r2, #1
 8000210:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8000212:	4608      	mov	r0, r1
 8000214:	f7ff ffde 	bl	80001d4 <L6470_ResetAppCmdPkg>
 8000218:	e7ee      	b.n	80001f8 <L6470_PrepareAppCmdPkg+0x10>
 800021a:	bf00      	nop
 800021c:	20000384 	.word	0x20000384

08000220 <L6470_PrepareSetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8000220:	b500      	push	{lr}
 8000222:	b083      	sub	sp, #12
 8000224:	460b      	mov	r3, r1
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8000226:	2100      	movs	r1, #0
 8000228:	9101      	str	r1, [sp, #4]
 800022a:	9200      	str	r2, [sp, #0]
 800022c:	2201      	movs	r2, #1
 800022e:	4903      	ldr	r1, [pc, #12]	; (800023c <L6470_PrepareSetParam+0x1c>)
 8000230:	f7ff ffda 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000234:	b003      	add	sp, #12
 8000236:	f85d fb04 	ldr.w	pc, [sp], #4
 800023a:	bf00      	nop
 800023c:	20000388 	.word	0x20000388

08000240 <L6470_PrepareGetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8000240:	b500      	push	{lr}
 8000242:	b083      	sub	sp, #12
 8000244:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	9201      	str	r2, [sp, #4]
 800024a:	9200      	str	r2, [sp, #0]
 800024c:	2202      	movs	r2, #2
 800024e:	4903      	ldr	r1, [pc, #12]	; (800025c <L6470_PrepareGetParam+0x1c>)
 8000250:	f7ff ffca 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000254:	b003      	add	sp, #12
 8000256:	f85d fb04 	ldr.w	pc, [sp], #4
 800025a:	bf00      	nop
 800025c:	20000388 	.word	0x20000388

08000260 <L6470_PrepareRun>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareRun(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8000260:	b500      	push	{lr}
 8000262:	b083      	sub	sp, #12
 8000264:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8000266:	2100      	movs	r1, #0
 8000268:	9101      	str	r1, [sp, #4]
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	2203      	movs	r2, #3
 800026e:	4903      	ldr	r1, [pc, #12]	; (800027c <L6470_PrepareRun+0x1c>)
 8000270:	f7ff ffba 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000274:	b003      	add	sp, #12
 8000276:	f85d fb04 	ldr.w	pc, [sp], #4
 800027a:	bf00      	nop
 800027c:	20000388 	.word	0x20000388

08000280 <L6470_PrepareStepClock>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareStepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 8000280:	b500      	push	{lr}
 8000282:	b083      	sub	sp, #12
 8000284:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8000286:	2200      	movs	r2, #0
 8000288:	9201      	str	r2, [sp, #4]
 800028a:	9200      	str	r2, [sp, #0]
 800028c:	2204      	movs	r2, #4
 800028e:	4903      	ldr	r1, [pc, #12]	; (800029c <L6470_PrepareStepClock+0x1c>)
 8000290:	f7ff ffaa 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000294:	b003      	add	sp, #12
 8000296:	f85d fb04 	ldr.w	pc, [sp], #4
 800029a:	bf00      	nop
 800029c:	20000388 	.word	0x20000388

080002a0 <L6470_PrepareMove>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareMove(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 80002a0:	b500      	push	{lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80002a6:	2100      	movs	r1, #0
 80002a8:	9101      	str	r1, [sp, #4]
 80002aa:	9200      	str	r2, [sp, #0]
 80002ac:	2205      	movs	r2, #5
 80002ae:	4903      	ldr	r1, [pc, #12]	; (80002bc <L6470_PrepareMove+0x1c>)
 80002b0:	f7ff ff9a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80002b4:	b003      	add	sp, #12
 80002b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002ba:	bf00      	nop
 80002bc:	20000388 	.word	0x20000388

080002c0 <L6470_PrepareGoTo>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 80002c0:	b500      	push	{lr}
 80002c2:	b083      	sub	sp, #12
 80002c4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80002c6:	2200      	movs	r2, #0
 80002c8:	9201      	str	r2, [sp, #4]
 80002ca:	9200      	str	r2, [sp, #0]
 80002cc:	2206      	movs	r2, #6
 80002ce:	4903      	ldr	r1, [pc, #12]	; (80002dc <L6470_PrepareGoTo+0x1c>)
 80002d0:	f7ff ff8a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80002d4:	b003      	add	sp, #12
 80002d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002da:	bf00      	nop
 80002dc:	20000388 	.word	0x20000388

080002e0 <L6470_PrepareGoToDir>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 80002e0:	b500      	push	{lr}
 80002e2:	b083      	sub	sp, #12
 80002e4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80002e6:	2100      	movs	r1, #0
 80002e8:	9101      	str	r1, [sp, #4]
 80002ea:	9200      	str	r2, [sp, #0]
 80002ec:	2207      	movs	r2, #7
 80002ee:	4903      	ldr	r1, [pc, #12]	; (80002fc <L6470_PrepareGoToDir+0x1c>)
 80002f0:	f7ff ff7a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80002f4:	b003      	add	sp, #12
 80002f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002fa:	bf00      	nop
 80002fc:	20000388 	.word	0x20000388

08000300 <L6470_PrepareGoUntil>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8000300:	b500      	push	{lr}
 8000302:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	460b      	mov	r3, r1
 800030a:	2208      	movs	r2, #8
 800030c:	4902      	ldr	r1, [pc, #8]	; (8000318 <L6470_PrepareGoUntil+0x18>)
 800030e:	f7ff ff6b 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000312:	b003      	add	sp, #12
 8000314:	f85d fb04 	ldr.w	pc, [sp], #4
 8000318:	20000388 	.word	0x20000388

0800031c <L6470_PrepareReleaseSW>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 800031c:	b500      	push	{lr}
 800031e:	b083      	sub	sp, #12
 8000320:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8000322:	2100      	movs	r1, #0
 8000324:	9101      	str	r1, [sp, #4]
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	2209      	movs	r2, #9
 800032a:	4903      	ldr	r1, [pc, #12]	; (8000338 <L6470_PrepareReleaseSW+0x1c>)
 800032c:	f7ff ff5c 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000330:	b003      	add	sp, #12
 8000332:	f85d fb04 	ldr.w	pc, [sp], #4
 8000336:	bf00      	nop
 8000338:	20000388 	.word	0x20000388

0800033c <L6470_PrepareGoHome>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoHome(uint8_t L6470_Id)
{
 800033c:	b500      	push	{lr}
 800033e:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8000340:	2300      	movs	r3, #0
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	220a      	movs	r2, #10
 8000348:	4902      	ldr	r1, [pc, #8]	; (8000354 <L6470_PrepareGoHome+0x18>)
 800034a:	f7ff ff4d 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 800034e:	b003      	add	sp, #12
 8000350:	f85d fb04 	ldr.w	pc, [sp], #4
 8000354:	20000388 	.word	0x20000388

08000358 <L6470_PrepareGoMark>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoMark(uint8_t L6470_Id)
{
 8000358:	b500      	push	{lr}
 800035a:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800035c:	2300      	movs	r3, #0
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	220b      	movs	r2, #11
 8000364:	4902      	ldr	r1, [pc, #8]	; (8000370 <L6470_PrepareGoMark+0x18>)
 8000366:	f7ff ff3f 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 800036a:	b003      	add	sp, #12
 800036c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000370:	20000388 	.word	0x20000388

08000374 <L6470_PrepareResetPos>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetPos(uint8_t L6470_Id)
{
 8000374:	b500      	push	{lr}
 8000376:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8000378:	2300      	movs	r3, #0
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	220c      	movs	r2, #12
 8000380:	4902      	ldr	r1, [pc, #8]	; (800038c <L6470_PrepareResetPos+0x18>)
 8000382:	f7ff ff31 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000386:	b003      	add	sp, #12
 8000388:	f85d fb04 	ldr.w	pc, [sp], #4
 800038c:	20000388 	.word	0x20000388

08000390 <L6470_PrepareResetDevice>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetDevice(uint8_t L6470_Id)
{
 8000390:	b500      	push	{lr}
 8000392:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8000394:	2300      	movs	r3, #0
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	220d      	movs	r2, #13
 800039c:	4902      	ldr	r1, [pc, #8]	; (80003a8 <L6470_PrepareResetDevice+0x18>)
 800039e:	f7ff ff23 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003a2:	b003      	add	sp, #12
 80003a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80003a8:	20000388 	.word	0x20000388

080003ac <L6470_PrepareSoftStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftStop(uint8_t L6470_Id)
{
 80003ac:	b500      	push	{lr}
 80003ae:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80003b0:	2300      	movs	r3, #0
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	220e      	movs	r2, #14
 80003b8:	4902      	ldr	r1, [pc, #8]	; (80003c4 <L6470_PrepareSoftStop+0x18>)
 80003ba:	f7ff ff15 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003be:	b003      	add	sp, #12
 80003c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80003c4:	20000388 	.word	0x20000388

080003c8 <L6470_PrepareHardStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardStop(uint8_t L6470_Id)
{
 80003c8:	b500      	push	{lr}
 80003ca:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80003cc:	2300      	movs	r3, #0
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	220f      	movs	r2, #15
 80003d4:	4902      	ldr	r1, [pc, #8]	; (80003e0 <L6470_PrepareHardStop+0x18>)
 80003d6:	f7ff ff07 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003da:	b003      	add	sp, #12
 80003dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80003e0:	20000388 	.word	0x20000388

080003e4 <L6470_PrepareSoftHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftHiZ(uint8_t L6470_Id)
{
 80003e4:	b500      	push	{lr}
 80003e6:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80003e8:	2300      	movs	r3, #0
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2210      	movs	r2, #16
 80003f0:	4902      	ldr	r1, [pc, #8]	; (80003fc <L6470_PrepareSoftHiZ+0x18>)
 80003f2:	f7ff fef9 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003f6:	b003      	add	sp, #12
 80003f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80003fc:	20000388 	.word	0x20000388

08000400 <L6470_PrepareHardHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardHiZ(uint8_t L6470_Id)
{
 8000400:	b500      	push	{lr}
 8000402:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8000404:	2300      	movs	r3, #0
 8000406:	9301      	str	r3, [sp, #4]
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	2211      	movs	r2, #17
 800040c:	4902      	ldr	r1, [pc, #8]	; (8000418 <L6470_PrepareHardHiZ+0x18>)
 800040e:	f7ff feeb 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000412:	b003      	add	sp, #12
 8000414:	f85d fb04 	ldr.w	pc, [sp], #4
 8000418:	20000388 	.word	0x20000388

0800041c <L6470_PrepareGetStatus>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetStatus(uint8_t L6470_Id)
{
 800041c:	b500      	push	{lr}
 800041e:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8000420:	2300      	movs	r3, #0
 8000422:	9301      	str	r3, [sp, #4]
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	2212      	movs	r2, #18
 8000428:	4902      	ldr	r1, [pc, #8]	; (8000434 <L6470_PrepareGetStatus+0x18>)
 800042a:	f7ff fedd 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 800042e:	b003      	add	sp, #12
 8000430:	f85d fb04 	ldr.w	pc, [sp], #4
 8000434:	20000388 	.word	0x20000388

08000438 <L6470_PrepareDaisyChainCommand>:
{
 8000438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800043c:	2300      	movs	r3, #0
 800043e:	700b      	strb	r3, [r1, #0]
 8000440:	704b      	strb	r3, [r1, #1]
 8000442:	708b      	strb	r3, [r1, #2]
 8000444:	70cb      	strb	r3, [r1, #3]
 8000446:	710b      	strb	r3, [r1, #4]
 8000448:	714b      	strb	r3, [r1, #5]
 800044a:	718b      	strb	r3, [r1, #6]
 800044c:	71cb      	strb	r3, [r1, #7]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800044e:	f101 3cff 	add.w	ip, r1, #4294967295
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8000452:	461a      	mov	r2, r3
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8000454:	4c73      	ldr	r4, [pc, #460]	; (8000624 <L6470_PrepareDaisyChainCommand+0x1ec>)
 8000456:	e032      	b.n	80004be <L6470_PrepareDaisyChainCommand+0x86>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8000458:	6846      	ldr	r6, [r0, #4]
 800045a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800045e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8000462:	f896 610c 	ldrb.w	r6, [r6, #268]	; 0x10c
 8000466:	ea4e 0e06 	orr.w	lr, lr, r6
 800046a:	f88c e000 	strb.w	lr, [ip]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800046e:	6846      	ldr	r6, [r0, #4]
 8000470:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8000474:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8000478:	f896 611a 	ldrb.w	r6, [r6, #282]	; 0x11a
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800047c:	b1d6      	cbz	r6, 80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800047e:	eb01 0843 	add.w	r8, r1, r3, lsl #1
 8000482:	eba6 0e03 	sub.w	lr, r6, r3
 8000486:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800048a:	68af      	ldr	r7, [r5, #8]
 800048c:	fa27 fe0e 	lsr.w	lr, r7, lr
 8000490:	f808 e002 	strb.w	lr, [r8, r2]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8000494:	3301      	adds	r3, #1
 8000496:	b2db      	uxtb	r3, r3
 8000498:	429e      	cmp	r6, r3
 800049a:	d2f0      	bcs.n	800047e <L6470_PrepareDaisyChainCommand+0x46>
 800049c:	e00a      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800049e:	6843      	ldr	r3, [r0, #4]
 80004a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80004a8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80004ac:	ea4e 0e03 	orr.w	lr, lr, r3
 80004b0:	f88c e000 	strb.w	lr, [ip]
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80004b4:	3201      	adds	r2, #1
 80004b6:	3010      	adds	r0, #16
 80004b8:	2a02      	cmp	r2, #2
 80004ba:	f000 80b0 	beq.w	800061e <L6470_PrepareDaisyChainCommand+0x1e6>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80004be:	4605      	mov	r5, r0
 80004c0:	7803      	ldrb	r3, [r0, #0]
 80004c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80004c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80004ca:	f893 e00c 	ldrb.w	lr, [r3, #12]
 80004ce:	f80c ef01 	strb.w	lr, [ip, #1]!
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80004d2:	7803      	ldrb	r3, [r0, #0]
 80004d4:	1e5e      	subs	r6, r3, #1
 80004d6:	2e08      	cmp	r6, #8
 80004d8:	d8ec      	bhi.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
 80004da:	a701      	add	r7, pc, #4	; (adr r7, 80004e0 <L6470_PrepareDaisyChainCommand+0xa8>)
 80004dc:	f857 f026 	ldr.w	pc, [r7, r6, lsl #2]
 80004e0:	08000459 	.word	0x08000459
 80004e4:	0800049f 	.word	0x0800049f
 80004e8:	08000505 	.word	0x08000505
 80004ec:	0800052f 	.word	0x0800052f
 80004f0:	08000545 	.word	0x08000545
 80004f4:	0800056f 	.word	0x0800056f
 80004f8:	08000585 	.word	0x08000585
 80004fc:	080005af 	.word	0x080005af
 8000500:	080005f1 	.word	0x080005f1
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000504:	6843      	ldr	r3, [r0, #4]
 8000506:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800050a:	4423      	add	r3, r4
 800050c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000518:	8943      	ldrh	r3, [r0, #10]
 800051a:	f88c 3002 	strb.w	r3, [ip, #2]
 800051e:	6883      	ldr	r3, [r0, #8]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	f88c 3004 	strb.w	r3, [ip, #4]
 8000526:	6883      	ldr	r3, [r0, #8]
 8000528:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800052c:	e7c2      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800052e:	6843      	ldr	r3, [r0, #4]
 8000530:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000534:	4423      	add	r3, r4
 8000536:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 800053a:	ea4e 0e03 	orr.w	lr, lr, r3
 800053e:	f88c e000 	strb.w	lr, [ip]
      break;
 8000542:	e7b7      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000544:	6843      	ldr	r3, [r0, #4]
 8000546:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800054a:	4423      	add	r3, r4
 800054c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000550:	ea4e 0e03 	orr.w	lr, lr, r3
 8000554:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000558:	8943      	ldrh	r3, [r0, #10]
 800055a:	f88c 3002 	strb.w	r3, [ip, #2]
 800055e:	6883      	ldr	r3, [r0, #8]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	f88c 3004 	strb.w	r3, [ip, #4]
 8000566:	6883      	ldr	r3, [r0, #8]
 8000568:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800056c:	e7a2      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800056e:	88c3      	ldrh	r3, [r0, #6]
 8000570:	f88c 3002 	strb.w	r3, [ip, #2]
 8000574:	6843      	ldr	r3, [r0, #4]
 8000576:	0a1b      	lsrs	r3, r3, #8
 8000578:	f88c 3004 	strb.w	r3, [ip, #4]
 800057c:	6843      	ldr	r3, [r0, #4]
 800057e:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8000582:	e797      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000584:	6843      	ldr	r3, [r0, #4]
 8000586:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800058a:	4423      	add	r3, r4
 800058c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000590:	ea4e 0e03 	orr.w	lr, lr, r3
 8000594:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000598:	8943      	ldrh	r3, [r0, #10]
 800059a:	f88c 3002 	strb.w	r3, [ip, #2]
 800059e:	6883      	ldr	r3, [r0, #8]
 80005a0:	0a1b      	lsrs	r3, r3, #8
 80005a2:	f88c 3004 	strb.w	r3, [ip, #4]
 80005a6:	6883      	ldr	r3, [r0, #8]
 80005a8:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80005ac:	e782      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80005ae:	6843      	ldr	r3, [r0, #4]
 80005b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005b4:	4423      	add	r3, r4
 80005b6:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 80005ba:	ea4e 0ec3 	orr.w	lr, lr, r3, lsl #3
 80005be:	fa5f fe8e 	uxtb.w	lr, lr
 80005c2:	f88c e000 	strb.w	lr, [ip]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80005c6:	6883      	ldr	r3, [r0, #8]
 80005c8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80005cc:	4423      	add	r3, r4
 80005ce:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 80005d2:	ea4e 0e03 	orr.w	lr, lr, r3
 80005d6:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 80005da:	89c3      	ldrh	r3, [r0, #14]
 80005dc:	f88c 3002 	strb.w	r3, [ip, #2]
 80005e0:	68c3      	ldr	r3, [r0, #12]
 80005e2:	0a1b      	lsrs	r3, r3, #8
 80005e4:	f88c 3004 	strb.w	r3, [ip, #4]
 80005e8:	68c3      	ldr	r3, [r0, #12]
 80005ea:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80005ee:	e761      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80005f0:	6843      	ldr	r3, [r0, #4]
 80005f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005f6:	4423      	add	r3, r4
 80005f8:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 80005fc:	ea4e 0ec3 	orr.w	lr, lr, r3, lsl #3
 8000600:	fa5f fe8e 	uxtb.w	lr, lr
 8000604:	f88c e000 	strb.w	lr, [ip]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8000608:	6883      	ldr	r3, [r0, #8]
 800060a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800060e:	4423      	add	r3, r4
 8000610:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000614:	ea4e 0e03 	orr.w	lr, lr, r3
 8000618:	f88c e000 	strb.w	lr, [ip]
      break;
 800061c:	e74a      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
}
 800061e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000622:	bf00      	nop
 8000624:	08004164 	.word	0x08004164

08000628 <Step_s2_2_Acc>:
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8000628:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000650 <Step_s2_2_Acc+0x28>
 800062c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000634:	d809      	bhi.n	800064a <Step_s2_2_Acc+0x22>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8000636:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000654 <Step_s2_2_Acc+0x2c>
 800063a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800063e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000642:	ee17 3a90 	vmov	r3, s15
 8000646:	b298      	uxth	r0, r3
 8000648:	4770      	bx	lr
    return 0;   // Warning
 800064a:	2000      	movs	r0, #0
}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	4768c671 	.word	0x4768c671
 8000654:	4168d4fe 	.word	0x4168d4fe

08000658 <Step_s2_2_Dec>:
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8000658:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000680 <Step_s2_2_Dec+0x28>
 800065c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000664:	d809      	bhi.n	800067a <Step_s2_2_Dec+0x22>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8000666:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000684 <Step_s2_2_Dec+0x2c>
 800066a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800066e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000672:	ee17 3a90 	vmov	r3, s15
 8000676:	b298      	uxth	r0, r3
 8000678:	4770      	bx	lr
    return 0;   // Warning
 800067a:	2000      	movs	r0, #0
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	4768c671 	.word	0x4768c671
 8000684:	4168d4fe 	.word	0x4168d4fe

08000688 <Step_s_2_MaxSpeed>:
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8000688:	eddf 7a09 	vldr	s15, [pc, #36]	; 80006b0 <Step_s_2_MaxSpeed+0x28>
 800068c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000694:	d809      	bhi.n	80006aa <Step_s_2_MaxSpeed+0x22>
    return (uint16_t)(Step_s / ((float)15.2588));
 8000696:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80006b4 <Step_s_2_MaxSpeed+0x2c>
 800069a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800069e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006a2:	ee17 3a90 	vmov	r3, s15
 80006a6:	b298      	uxth	r0, r3
 80006a8:	4770      	bx	lr
    return 0;   // Warning
 80006aa:	2000      	movs	r0, #0
}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	4673e702 	.word	0x4673e702
 80006b4:	4174240b 	.word	0x4174240b

080006b8 <Step_s_2_MinSpeed>:
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80006b8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80006e0 <Step_s_2_MinSpeed+0x28>
 80006bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80006c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c4:	d809      	bhi.n	80006da <Step_s_2_MinSpeed+0x22>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80006c6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80006e4 <Step_s_2_MinSpeed+0x2c>
 80006ca:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80006ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d2:	ee17 3a90 	vmov	r3, s15
 80006d6:	b298      	uxth	r0, r3
 80006d8:	4770      	bx	lr
    return 0;   // Warning
 80006da:	2000      	movs	r0, #0
}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	447414bf 	.word	0x447414bf
 80006e4:	3e742401 	.word	0x3e742401

080006e8 <Step_s_2_FsSpd>:
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80006e8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8000718 <Step_s_2_FsSpd+0x30>
 80006ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80006f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f4:	d80d      	bhi.n	8000712 <Step_s_2_FsSpd+0x2a>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80006f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800071c <Step_s_2_FsSpd+0x34>
 80006fa:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80006fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000702:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800070a:	ee17 3a90 	vmov	r3, s15
 800070e:	b298      	uxth	r0, r3
 8000710:	4770      	bx	lr
    return 0;   // Warning
 8000712:	2000      	movs	r0, #0
}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	4673e180 	.word	0x4673e180
 800071c:	41740000 	.word	0x41740000

08000720 <Step_s_2_IntSpeed>:
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8000720:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000748 <Step_s_2_IntSpeed+0x28>
 8000724:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072c:	d809      	bhi.n	8000742 <Step_s_2_IntSpeed+0x22>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800072e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800074c <Step_s_2_IntSpeed+0x2c>
 8000732:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8000736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800073a:	ee17 3a90 	vmov	r3, s15
 800073e:	b298      	uxth	r0, r3
 8000740:	4770      	bx	lr
    return 0;   // Warning
 8000742:	2000      	movs	r0, #0
}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	44742023 	.word	0x44742023
 800074c:	3d7423f4 	.word	0x3d7423f4

08000750 <s_Step_2_StSlp>:
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8000750:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800077c <s_Step_2_StSlp+0x2c>
 8000754:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075c:	d80c      	bhi.n	8000778 <s_Step_2_StSlp+0x28>
{
 800075e:	b082      	sub	sp, #8
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000760:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000780 <s_Step_2_StSlp+0x30>
 8000764:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8000768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800076c:	edcd 7a01 	vstr	s15, [sp, #4]
 8000770:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 8000774:	b002      	add	sp, #8
 8000776:	4770      	bx	lr
    return 0;   // Warning
 8000778:	2000      	movs	r0, #0
}
 800077a:	4770      	bx	lr
 800077c:	3b8311d9 	.word	0x3b8311d9
 8000780:	3783956e 	.word	0x3783956e

08000784 <s_Step_2_FnSlpAcc>:
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8000784:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80007b0 <s_Step_2_FnSlpAcc+0x2c>
 8000788:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800078c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000790:	d80c      	bhi.n	80007ac <s_Step_2_FnSlpAcc+0x28>
{
 8000792:	b082      	sub	sp, #8
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000794:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80007b4 <s_Step_2_FnSlpAcc+0x30>
 8000798:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800079c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007a0:	edcd 7a01 	vstr	s15, [sp, #4]
 80007a4:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 80007a8:	b002      	add	sp, #8
 80007aa:	4770      	bx	lr
    return 0;   // Warning
 80007ac:	2000      	movs	r0, #0
}
 80007ae:	4770      	bx	lr
 80007b0:	3b8311d9 	.word	0x3b8311d9
 80007b4:	3783956e 	.word	0x3783956e

080007b8 <s_Step_2_FnSlpDec>:
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80007b8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80007e4 <s_Step_2_FnSlpDec+0x2c>
 80007bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80007c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c4:	d80c      	bhi.n	80007e0 <s_Step_2_FnSlpDec+0x28>
{
 80007c6:	b082      	sub	sp, #8
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80007c8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80007e8 <s_Step_2_FnSlpDec+0x30>
 80007cc:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80007d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007d4:	edcd 7a01 	vstr	s15, [sp, #4]
 80007d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 80007dc:	b002      	add	sp, #8
 80007de:	4770      	bx	lr
    return 0;   // Warning
 80007e0:	2000      	movs	r0, #0
}
 80007e2:	4770      	bx	lr
 80007e4:	3b8311d9 	.word	0x3b8311d9
 80007e8:	3783956e 	.word	0x3783956e

080007ec <mA_2_OcdTh>:
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 80007ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8000838 <mA_2_OcdTh+0x4c>
 80007f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80007f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f8:	d81b      	bhi.n	8000832 <mA_2_OcdTh+0x46>
{
 80007fa:	b082      	sub	sp, #8
    result = (mA / ((float)375));
 80007fc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800083c <mA_2_OcdTh+0x50>
 8000800:	eec0 7a07 	vdiv.f32	s15, s0, s14
    decimal = result - (uint8_t)result;
 8000804:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8000808:	ed8d 7a01 	vstr	s14, [sp, #4]
 800080c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000810:	ee07 0a10 	vmov	s14, r0
 8000814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000818:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (decimal < (float)0.5)
 800081c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000828:	d501      	bpl.n	800082e <mA_2_OcdTh+0x42>
      return ((uint8_t)result - 1);
 800082a:	3801      	subs	r0, #1
 800082c:	b2c0      	uxtb	r0, r0
}
 800082e:	b002      	add	sp, #8
 8000830:	4770      	bx	lr
    return 0;   // Warning
 8000832:	2000      	movs	r0, #0
}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	45bb8000 	.word	0x45bb8000
 800083c:	43bb8000 	.word	0x43bb8000

08000840 <mA_2_StallTh>:
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8000840:	eddf 7a12 	vldr	s15, [pc, #72]	; 800088c <mA_2_StallTh+0x4c>
 8000844:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084c:	d81b      	bhi.n	8000886 <mA_2_StallTh+0x46>
{
 800084e:	b082      	sub	sp, #8
    result = (mA / ((float)31.25));
 8000850:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000890 <mA_2_StallTh+0x50>
 8000854:	eec0 7a07 	vdiv.f32	s15, s0, s14
    decimal = result - (uint8_t)result;
 8000858:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800085c:	ed8d 7a01 	vstr	s14, [sp, #4]
 8000860:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000864:	ee07 0a10 	vmov	s14, r0
 8000868:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800086c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (decimal < (float)0.5)
 8000870:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800087c:	d501      	bpl.n	8000882 <mA_2_StallTh+0x42>
      return ((uint8_t)result - 1);
 800087e:	3801      	subs	r0, #1
 8000880:	b2c0      	uxtb	r0, r0
}
 8000882:	b002      	add	sp, #8
 8000884:	4770      	bx	lr
    return 0;   // Warning
 8000886:	2000      	movs	r0, #0
}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	457a0000 	.word	0x457a0000
 8000890:	41fa0000 	.word	0x41fa0000

08000894 <L6470_ID>:
  {
    return (position);
  }
  else
  {
    return 0xFF;
 8000894:	2802      	cmp	r0, #2
  }
}
 8000896:	bf28      	it	cs
 8000898:	20ff      	movcs	r0, #255	; 0xff
 800089a:	4770      	bx	lr

0800089c <L6470_DaisyChainCommand>:
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
{
 800089c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008a0:	b083      	sub	sp, #12
 80008a2:	4681      	mov	r9, r0
 80008a4:	4688      	mov	r8, r1
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80008a6:	2500      	movs	r5, #0
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <L6470_DaisyChainCommand+0x60>)
 80008aa:	701d      	strb	r5, [r3, #0]
  
  /* Send all command bytes via SPI */
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
  {
    /* Enable SPI communication for L6470 */
    L6470_nCS_LOW();
 80008ac:	4e14      	ldr	r6, [pc, #80]	; (8000900 <L6470_DaisyChainCommand+0x64>)
 80008ae:	462f      	mov	r7, r5
    L6470_SPI_Communication(&HSPI, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
    
    /* Allow the device to decode the received command */
    L6470_nCS_HIGH();
    
    _DELAY(TDISCS);
 80008b0:	461c      	mov	r4, r3
    L6470_nCS_LOW();
 80008b2:	463a      	mov	r2, r7
 80008b4:	8931      	ldrh	r1, [r6, #8]
 80008b6:	6870      	ldr	r0, [r6, #4]
 80008b8:	f001 f978 	bl	8001bac <HAL_GPIO_WritePin>
    L6470_SPI_Communication(&HSPI, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80008bc:	230a      	movs	r3, #10
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2302      	movs	r3, #2
 80008c2:	eb08 0205 	add.w	r2, r8, r5
 80008c6:	eb09 0105 	add.w	r1, r9, r5
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <L6470_DaisyChainCommand+0x68>)
 80008cc:	f001 ff28 	bl	8002720 <HAL_SPI_TransmitReceive>
    L6470_nCS_HIGH();
 80008d0:	2201      	movs	r2, #1
 80008d2:	8931      	ldrh	r1, [r6, #8]
 80008d4:	6870      	ldr	r0, [r6, #4]
 80008d6:	f001 f969 	bl	8001bac <HAL_GPIO_WritePin>
    _DELAY(TDISCS);
 80008da:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80008de:	bf00      	nop
 80008e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80008ec:	2b13      	cmp	r3, #19
 80008ee:	d9f6      	bls.n	80008de <L6470_DaisyChainCommand+0x42>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80008f0:	3502      	adds	r5, #2
 80008f2:	2d08      	cmp	r5, #8
 80008f4:	d1dd      	bne.n	80008b2 <L6470_DaisyChainCommand+0x16>
  }
}
 80008f6:	b003      	add	sp, #12
 80008f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008fc:	20000384 	.word	0x20000384
 8000900:	200003c0 	.word	0x200003c0
 8000904:	200003d0 	.word	0x200003d0

08000908 <L6470_SetParam>:
{
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800090e:	4c0b      	ldr	r4, [pc, #44]	; (800093c <L6470_SetParam+0x34>)
 8000910:	1d26      	adds	r6, r4, #4
 8000912:	2100      	movs	r1, #0
 8000914:	9101      	str	r1, [sp, #4]
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	2201      	movs	r2, #1
 800091a:	4631      	mov	r1, r6
 800091c:	f7ff fc64 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000920:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000924:	4629      	mov	r1, r5
 8000926:	4630      	mov	r0, r6
 8000928:	f7ff fd86 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800092c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000930:	4628      	mov	r0, r5
 8000932:	f7ff ffb3 	bl	800089c <L6470_DaisyChainCommand>
}
 8000936:	b002      	add	sp, #8
 8000938:	bd70      	pop	{r4, r5, r6, pc}
 800093a:	bf00      	nop
 800093c:	20000384 	.word	0x20000384

08000940 <L6470_Run>:
{
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8000946:	4c0b      	ldr	r4, [pc, #44]	; (8000974 <L6470_Run+0x34>)
 8000948:	1d26      	adds	r6, r4, #4
 800094a:	2100      	movs	r1, #0
 800094c:	9101      	str	r1, [sp, #4]
 800094e:	9200      	str	r2, [sp, #0]
 8000950:	2203      	movs	r2, #3
 8000952:	4631      	mov	r1, r6
 8000954:	f7ff fc48 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000958:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800095c:	4629      	mov	r1, r5
 800095e:	4630      	mov	r0, r6
 8000960:	f7ff fd6a 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000964:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000968:	4628      	mov	r0, r5
 800096a:	f7ff ff97 	bl	800089c <L6470_DaisyChainCommand>
}
 800096e:	b002      	add	sp, #8
 8000970:	bd70      	pop	{r4, r5, r6, pc}
 8000972:	bf00      	nop
 8000974:	20000384 	.word	0x20000384

08000978 <L6470_StepClock>:
{
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800097e:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <L6470_StepClock+0x34>)
 8000980:	1d26      	adds	r6, r4, #4
 8000982:	2200      	movs	r2, #0
 8000984:	9201      	str	r2, [sp, #4]
 8000986:	9200      	str	r2, [sp, #0]
 8000988:	2204      	movs	r2, #4
 800098a:	4631      	mov	r1, r6
 800098c:	f7ff fc2c 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000990:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000994:	4629      	mov	r1, r5
 8000996:	4630      	mov	r0, r6
 8000998:	f7ff fd4e 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800099c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80009a0:	4628      	mov	r0, r5
 80009a2:	f7ff ff7b 	bl	800089c <L6470_DaisyChainCommand>
}
 80009a6:	b002      	add	sp, #8
 80009a8:	bd70      	pop	{r4, r5, r6, pc}
 80009aa:	bf00      	nop
 80009ac:	20000384 	.word	0x20000384

080009b0 <L6470_Move>:
{
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80009b6:	4c0b      	ldr	r4, [pc, #44]	; (80009e4 <L6470_Move+0x34>)
 80009b8:	1d26      	adds	r6, r4, #4
 80009ba:	2100      	movs	r1, #0
 80009bc:	9101      	str	r1, [sp, #4]
 80009be:	9200      	str	r2, [sp, #0]
 80009c0:	2205      	movs	r2, #5
 80009c2:	4631      	mov	r1, r6
 80009c4:	f7ff fc10 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80009c8:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80009cc:	4629      	mov	r1, r5
 80009ce:	4630      	mov	r0, r6
 80009d0:	f7ff fd32 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80009d4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80009d8:	4628      	mov	r0, r5
 80009da:	f7ff ff5f 	bl	800089c <L6470_DaisyChainCommand>
}
 80009de:	b002      	add	sp, #8
 80009e0:	bd70      	pop	{r4, r5, r6, pc}
 80009e2:	bf00      	nop
 80009e4:	20000384 	.word	0x20000384

080009e8 <L6470_GoTo>:
  if (AbsPos <= L6470_POSITION_RANGE)
 80009e8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80009ec:	d300      	bcc.n	80009f0 <L6470_GoTo+0x8>
 80009ee:	4770      	bx	lr
{
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	b082      	sub	sp, #8
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80009f4:	4c0b      	ldr	r4, [pc, #44]	; (8000a24 <L6470_GoTo+0x3c>)
 80009f6:	1d26      	adds	r6, r4, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	9200      	str	r2, [sp, #0]
 80009fe:	460b      	mov	r3, r1
 8000a00:	2206      	movs	r2, #6
 8000a02:	4631      	mov	r1, r6
 8000a04:	f7ff fbf0 	bl	80001e8 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000a08:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000a0c:	4629      	mov	r1, r5
 8000a0e:	4630      	mov	r0, r6
 8000a10:	f7ff fd12 	bl	8000438 <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000a14:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a18:	4628      	mov	r0, r5
 8000a1a:	f7ff ff3f 	bl	800089c <L6470_DaisyChainCommand>
}
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd70      	pop	{r4, r5, r6, pc}
 8000a22:	bf00      	nop
 8000a24:	20000384 	.word	0x20000384

08000a28 <L6470_GoToDir>:
  if (AbsPos <= L6470_POSITION_RANGE)
 8000a28:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8000a2c:	d300      	bcc.n	8000a30 <L6470_GoToDir+0x8>
 8000a2e:	4770      	bx	lr
{
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	b082      	sub	sp, #8
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8000a34:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <L6470_GoToDir+0x3c>)
 8000a36:	1d26      	adds	r6, r4, #4
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	9200      	str	r2, [sp, #0]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	2207      	movs	r2, #7
 8000a42:	4631      	mov	r1, r6
 8000a44:	f7ff fbd0 	bl	80001e8 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000a48:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000a4c:	4629      	mov	r1, r5
 8000a4e:	4630      	mov	r0, r6
 8000a50:	f7ff fcf2 	bl	8000438 <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000a54:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a58:	4628      	mov	r0, r5
 8000a5a:	f7ff ff1f 	bl	800089c <L6470_DaisyChainCommand>
}
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	bf00      	nop
 8000a64:	20000384 	.word	0x20000384

08000a68 <L6470_GoUntil>:
{
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	; (8000a98 <L6470_GoUntil+0x30>)
 8000a6e:	1d26      	adds	r6, r4, #4
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	9200      	str	r2, [sp, #0]
 8000a74:	460b      	mov	r3, r1
 8000a76:	2208      	movs	r2, #8
 8000a78:	4631      	mov	r1, r6
 8000a7a:	f7ff fbb5 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000a7e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000a82:	4629      	mov	r1, r5
 8000a84:	4630      	mov	r0, r6
 8000a86:	f7ff fcd7 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000a8a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a8e:	4628      	mov	r0, r5
 8000a90:	f7ff ff04 	bl	800089c <L6470_DaisyChainCommand>
}
 8000a94:	b002      	add	sp, #8
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	20000384 	.word	0x20000384

08000a9c <L6470_ReleaseSW>:
{
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8000aa2:	4c0b      	ldr	r4, [pc, #44]	; (8000ad0 <L6470_ReleaseSW+0x34>)
 8000aa4:	1d26      	adds	r6, r4, #4
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	9101      	str	r1, [sp, #4]
 8000aaa:	9200      	str	r2, [sp, #0]
 8000aac:	2209      	movs	r2, #9
 8000aae:	4631      	mov	r1, r6
 8000ab0:	f7ff fb9a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000ab4:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000ab8:	4629      	mov	r1, r5
 8000aba:	4630      	mov	r0, r6
 8000abc:	f7ff fcbc 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000ac0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000ac4:	4628      	mov	r0, r5
 8000ac6:	f7ff fee9 	bl	800089c <L6470_DaisyChainCommand>
}
 8000aca:	b002      	add	sp, #8
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000384 	.word	0x20000384

08000ad4 <L6470_GoHome>:
{
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <L6470_GoHome+0x30>)
 8000ada:	1d26      	adds	r6, r4, #4
 8000adc:	2300      	movs	r3, #0
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	f7ff fb7f 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000aea:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000aee:	4629      	mov	r1, r5
 8000af0:	4630      	mov	r0, r6
 8000af2:	f7ff fca1 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000af6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000afa:	4628      	mov	r0, r5
 8000afc:	f7ff fece 	bl	800089c <L6470_DaisyChainCommand>
}
 8000b00:	b002      	add	sp, #8
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
 8000b04:	20000384 	.word	0x20000384

08000b08 <L6470_GoMark>:
{
 8000b08:	b570      	push	{r4, r5, r6, lr}
 8000b0a:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	; (8000b38 <L6470_GoMark+0x30>)
 8000b0e:	1d26      	adds	r6, r4, #4
 8000b10:	2300      	movs	r3, #0
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	220b      	movs	r2, #11
 8000b18:	4631      	mov	r1, r6
 8000b1a:	f7ff fb65 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000b1e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b22:	4629      	mov	r1, r5
 8000b24:	4630      	mov	r0, r6
 8000b26:	f7ff fc87 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000b2a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f7ff feb4 	bl	800089c <L6470_DaisyChainCommand>
}
 8000b34:	b002      	add	sp, #8
 8000b36:	bd70      	pop	{r4, r5, r6, pc}
 8000b38:	20000384 	.word	0x20000384

08000b3c <L6470_ResetPos>:
{
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8000b40:	4c0a      	ldr	r4, [pc, #40]	; (8000b6c <L6470_ResetPos+0x30>)
 8000b42:	1d26      	adds	r6, r4, #4
 8000b44:	2300      	movs	r3, #0
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	f7ff fb4b 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000b52:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b56:	4629      	mov	r1, r5
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f7ff fc6d 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000b5e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000b62:	4628      	mov	r0, r5
 8000b64:	f7ff fe9a 	bl	800089c <L6470_DaisyChainCommand>
}
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}
 8000b6c:	20000384 	.word	0x20000384

08000b70 <L6470_ResetDevice>:
{
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8000b74:	4c0a      	ldr	r4, [pc, #40]	; (8000ba0 <L6470_ResetDevice+0x30>)
 8000b76:	1d26      	adds	r6, r4, #4
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	220d      	movs	r2, #13
 8000b80:	4631      	mov	r1, r6
 8000b82:	f7ff fb31 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000b86:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b8a:	4629      	mov	r1, r5
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	f7ff fc53 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000b92:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000b96:	4628      	mov	r0, r5
 8000b98:	f7ff fe80 	bl	800089c <L6470_DaisyChainCommand>
}
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	20000384 	.word	0x20000384

08000ba4 <L6470_SoftStop>:
{
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <L6470_SoftStop+0x30>)
 8000baa:	1d26      	adds	r6, r4, #4
 8000bac:	2300      	movs	r3, #0
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	220e      	movs	r2, #14
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	f7ff fb17 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000bba:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000bbe:	4629      	mov	r1, r5
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	f7ff fc39 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000bc6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f7ff fe66 	bl	800089c <L6470_DaisyChainCommand>
}
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd70      	pop	{r4, r5, r6, pc}
 8000bd4:	20000384 	.word	0x20000384

08000bd8 <L6470_HardStop>:
{
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	; (8000c08 <L6470_HardStop+0x30>)
 8000bde:	1d26      	adds	r6, r4, #4
 8000be0:	2300      	movs	r3, #0
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	220f      	movs	r2, #15
 8000be8:	4631      	mov	r1, r6
 8000bea:	f7ff fafd 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000bee:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000bf2:	4629      	mov	r1, r5
 8000bf4:	4630      	mov	r0, r6
 8000bf6:	f7ff fc1f 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000bfa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f7ff fe4c 	bl	800089c <L6470_DaisyChainCommand>
}
 8000c04:	b002      	add	sp, #8
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
 8000c08:	20000384 	.word	0x20000384

08000c0c <L6470_SoftHiZ>:
{
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8000c10:	4c0a      	ldr	r4, [pc, #40]	; (8000c3c <L6470_SoftHiZ+0x30>)
 8000c12:	1d26      	adds	r6, r4, #4
 8000c14:	2300      	movs	r3, #0
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2210      	movs	r2, #16
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	f7ff fae3 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c22:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000c26:	4629      	mov	r1, r5
 8000c28:	4630      	mov	r0, r6
 8000c2a:	f7ff fc05 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c2e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000c32:	4628      	mov	r0, r5
 8000c34:	f7ff fe32 	bl	800089c <L6470_DaisyChainCommand>
}
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
 8000c3c:	20000384 	.word	0x20000384

08000c40 <L6470_HardHiZ>:
{
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8000c44:	4c0a      	ldr	r4, [pc, #40]	; (8000c70 <L6470_HardHiZ+0x30>)
 8000c46:	1d26      	adds	r6, r4, #4
 8000c48:	2300      	movs	r3, #0
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2211      	movs	r2, #17
 8000c50:	4631      	mov	r1, r6
 8000c52:	f7ff fac9 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c56:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	f7ff fbeb 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c62:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000c66:	4628      	mov	r0, r5
 8000c68:	f7ff fe18 	bl	800089c <L6470_DaisyChainCommand>
}
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	20000384 	.word	0x20000384

08000c74 <L6470_PerformPreparedApplicationCommand>:
{
 8000c74:	b538      	push	{r3, r4, r5, lr}
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c76:	4c07      	ldr	r4, [pc, #28]	; (8000c94 <L6470_PerformPreparedApplicationCommand+0x20>)
 8000c78:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000c7c:	4629      	mov	r1, r5
 8000c7e:	1d20      	adds	r0, r4, #4
 8000c80:	f7ff fbda 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c84:	3430      	adds	r4, #48	; 0x30
 8000c86:	4621      	mov	r1, r4
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f7ff fe07 	bl	800089c <L6470_DaisyChainCommand>
}
 8000c8e:	4620      	mov	r0, r4
 8000c90:	bd38      	pop	{r3, r4, r5, pc}
 8000c92:	bf00      	nop
 8000c94:	20000384 	.word	0x20000384

08000c98 <L6470_ExtractReturnedData>:
{
  uint32_t value;
  uint8_t i;
  
  value = 0x000000;
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8000c98:	4401      	add	r1, r0
 8000c9a:	1e53      	subs	r3, r2, #1
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8000ca2:	3a04      	subs	r2, #4
 8000ca4:	00d2      	lsls	r2, r2, #3
  value = 0x000000;
 8000ca6:	2000      	movs	r0, #0
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8000ca8:	f811 cf02 	ldrb.w	ip, [r1, #2]!
 8000cac:	fa0c fc03 	lsl.w	ip, ip, r3
 8000cb0:	ea40 000c 	orr.w	r0, r0, ip
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8000cb4:	3b08      	subs	r3, #8
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d1f6      	bne.n	8000ca8 <L6470_ExtractReturnedData+0x10>
  }
  
  return value;
}
 8000cba:	4770      	bx	lr

08000cbc <L6470_GetParam>:
{
 8000cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460c      	mov	r4, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8000cc6:	4d12      	ldr	r5, [pc, #72]	; (8000d10 <L6470_GetParam+0x54>)
 8000cc8:	f105 0804 	add.w	r8, r5, #4
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	4641      	mov	r1, r8
 8000cd8:	f7ff fa86 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000cdc:	f105 0728 	add.w	r7, r5, #40	; 0x28
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	4640      	mov	r0, r8
 8000ce4:	f7ff fba8 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000ce8:	3530      	adds	r5, #48	; 0x30
 8000cea:	4629      	mov	r1, r5
 8000cec:	4638      	mov	r0, r7
 8000cee:	f7ff fdd5 	bl	800089c <L6470_DaisyChainCommand>
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8000cf2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000cf6:	4907      	ldr	r1, [pc, #28]	; (8000d14 <L6470_GetParam+0x58>)
 8000cf8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
  ReceivedValue = L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8000cfc:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
 8000d00:	4629      	mov	r1, r5
 8000d02:	4630      	mov	r0, r6
 8000d04:	f7ff ffc8 	bl	8000c98 <L6470_ExtractReturnedData>
}
 8000d08:	b002      	add	sp, #8
 8000d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000384 	.word	0x20000384
 8000d14:	08004164 	.word	0x08004164

08000d18 <L6470_CheckStatusRegisterFlag>:
  *
  * @retval state The flag state.
  */

uint8_t L6470_CheckStatusRegisterFlag(uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 8000d18:	b510      	push	{r4, lr}
 8000d1a:	460c      	mov	r4, r1
  uint8_t state = 0;
  
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_Id, L6470_STATUS_ID);
 8000d1c:	2118      	movs	r1, #24
 8000d1e:	f7ff ffcd 	bl	8000cbc <L6470_GetParam>
 8000d22:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	8018      	strh	r0, [r3, #0]
  
  switch(L6470_StatusRegisterFlagId)
 8000d28:	2c0e      	cmp	r4, #14
 8000d2a:	d861      	bhi.n	8000df0 <L6470_CheckStatusRegisterFlag+0xd8>
 8000d2c:	e8df f004 	tbb	[pc, r4]
 8000d30:	1a140e08 	.word	0x1a140e08
 8000d34:	312c2620 	.word	0x312c2620
 8000d38:	49433d37 	.word	0x49433d37
 8000d3c:	554f      	.short	0x554f
 8000d3e:	5b          	.byte	0x5b
 8000d3f:	00          	.byte	0x00
  {
  case HiZ_ID:
    state = pL6470_StatusRegister->HiZ;
 8000d40:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	7818      	ldrb	r0, [r3, #0]
 8000d46:	f000 0001 	and.w	r0, r0, #1
    state = pL6470_StatusRegister->SCK_MOD;
    break;
  }
  
  return state;
}
 8000d4a:	bd10      	pop	{r4, pc}
    state = pL6470_StatusRegister->BUSY;
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	7818      	ldrb	r0, [r3, #0]
 8000d52:	f3c0 0040 	ubfx	r0, r0, #1, #1
    break;
 8000d56:	e7f8      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->SW_F;
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	7818      	ldrb	r0, [r3, #0]
 8000d5e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    break;
 8000d62:	e7f2      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->SW_EVN;
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	7818      	ldrb	r0, [r3, #0]
 8000d6a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    break;
 8000d6e:	e7ec      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->DIR;
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	7818      	ldrb	r0, [r3, #0]
 8000d76:	f3c0 1000 	ubfx	r0, r0, #4, #1
    break;
 8000d7a:	e7e6      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->MOT_STATUS;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	7818      	ldrb	r0, [r3, #0]
 8000d82:	f3c0 1041 	ubfx	r0, r0, #5, #2
    break;
 8000d86:	e7e0      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->NOTPERF_CMD;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	7818      	ldrb	r0, [r3, #0]
 8000d8e:	09c0      	lsrs	r0, r0, #7
    break;
 8000d90:	e7db      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->WRONG_CMD;
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	7858      	ldrb	r0, [r3, #1]
 8000d98:	f000 0001 	and.w	r0, r0, #1
    break;
 8000d9c:	e7d5      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->UVLO;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	7858      	ldrb	r0, [r3, #1]
 8000da4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    break;
 8000da8:	e7cf      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->TH_WRN;
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	7858      	ldrb	r0, [r3, #1]
 8000db0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    break;
 8000db4:	e7c9      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->TH_SD;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	7858      	ldrb	r0, [r3, #1]
 8000dbc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    break;
 8000dc0:	e7c3      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->OCD;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	7858      	ldrb	r0, [r3, #1]
 8000dc8:	f3c0 1000 	ubfx	r0, r0, #4, #1
    break;
 8000dcc:	e7bd      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->STEP_LOSS_A;
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	7858      	ldrb	r0, [r3, #1]
 8000dd4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    break;
 8000dd8:	e7b7      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->STEP_LOSS_B;
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	7858      	ldrb	r0, [r3, #1]
 8000de0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    break;
 8000de4:	e7b1      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->SCK_MOD;
 8000de6:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	7858      	ldrb	r0, [r3, #1]
 8000dec:	09c0      	lsrs	r0, r0, #7
    break;
 8000dee:	e7ac      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
  switch(L6470_StatusRegisterFlagId)
 8000df0:	2000      	movs	r0, #0
 8000df2:	e7aa      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
 8000df4:	20000000 	.word	0x20000000

08000df8 <L6470_GetStatus>:
{
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	4605      	mov	r5, r0
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8000dfe:	4c0e      	ldr	r4, [pc, #56]	; (8000e38 <L6470_GetStatus+0x40>)
 8000e00:	1d27      	adds	r7, r4, #4
 8000e02:	2300      	movs	r3, #0
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2212      	movs	r2, #18
 8000e0a:	4639      	mov	r1, r7
 8000e0c:	f7ff f9ec 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000e10:	f104 0628 	add.w	r6, r4, #40	; 0x28
 8000e14:	4631      	mov	r1, r6
 8000e16:	4638      	mov	r0, r7
 8000e18:	f7ff fb0e 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000e1c:	3430      	adds	r4, #48	; 0x30
 8000e1e:	4621      	mov	r1, r4
 8000e20:	4630      	mov	r0, r6
 8000e22:	f7ff fd3b 	bl	800089c <L6470_DaisyChainCommand>
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8000e26:	2202      	movs	r2, #2
 8000e28:	4621      	mov	r1, r4
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	f7ff ff34 	bl	8000c98 <L6470_ExtractReturnedData>
}
 8000e30:	b280      	uxth	r0, r0
 8000e32:	b003      	add	sp, #12
 8000e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000384 	.word	0x20000384

08000e3c <L6470_Config>:
  * @brief  Configures the L6470 registers.
  * @param  StepperMotorDriverHandle_t* The pointer to the stepper motor driver handle structure.
  * @param  MotorParameterData_t* The pointer to the related parameter data structure.
  */
void L6470_Config(StepperMotorDriverHandle_t *StepperMotorDriverHandle, MotorParameterData_t *MotorParameterData)
{
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	4604      	mov	r4, r0
 8000e40:	460d      	mov	r5, r1
  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  StepperMotorDriverHandle->Register.ACC = Step_s2_2_Acc(MotorParameterData->acc);
 8000e42:	ed91 0a05 	vldr	s0, [r1, #20]
 8000e46:	f7ff fbef 	bl	8000628 <Step_s2_2_Acc>
 8000e4a:	4606      	mov	r6, r0
 8000e4c:	83a0      	strh	r0, [r4, #28]
  StepperMotorDriverHandle->Register.DEC = Step_s2_2_Dec(MotorParameterData->dec);
 8000e4e:	ed95 0a06 	vldr	s0, [r5, #24]
 8000e52:	f7ff fc01 	bl	8000658 <Step_s2_2_Dec>
 8000e56:	83e0      	strh	r0, [r4, #30]
  StepperMotorDriverHandle->Register.MAX_SPEED = Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8000e58:	ed95 0a07 	vldr	s0, [r5, #28]
 8000e5c:	f7ff fc14 	bl	8000688 <Step_s_2_MaxSpeed>
 8000e60:	8420      	strh	r0, [r4, #32]
  StepperMotorDriverHandle->Register.MIN_SPEED = Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8000e62:	ed95 0a08 	vldr	s0, [r5, #32]
 8000e66:	f7ff fc27 	bl	80006b8 <Step_s_2_MinSpeed>
 8000e6a:	8460      	strh	r0, [r4, #34]	; 0x22
  StepperMotorDriverHandle->Register.FS_SPD = Step_s_2_FsSpd(MotorParameterData->fsspd);
 8000e6c:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
 8000e70:	f7ff fc3a 	bl	80006e8 <Step_s_2_FsSpd>
 8000e74:	84a0      	strh	r0, [r4, #36]	; 0x24
  StepperMotorDriverHandle->Register.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8000e76:	edd5 6a0a 	vldr	s13, [r5, #40]	; 0x28
 8000e7a:	eddf 7a74 	vldr	s15, [pc, #464]	; 800104c <L6470_Config+0x210>
 8000e7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e82:	ed95 6a00 	vldr	s12, [r5]
 8000e86:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000e8a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000e8e:	ee17 3a10 	vmov	r3, s14
 8000e92:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  StepperMotorDriverHandle->Register.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8000e96:	edd5 6a0b 	vldr	s13, [r5, #44]	; 0x2c
 8000e9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e9e:	ed95 6a00 	vldr	s12, [r5]
 8000ea2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000ea6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000eaa:	ee17 3a10 	vmov	r3, s14
 8000eae:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  StepperMotorDriverHandle->Register.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8000eb2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8000eb6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000eba:	ed95 6a00 	vldr	s12, [r5]
 8000ebe:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000ec2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000ec6:	ee17 3a10 	vmov	r3, s14
 8000eca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  StepperMotorDriverHandle->Register.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8000ece:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	edd5 6a00 	vldr	s13, [r5]
 8000eda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ede:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000ee2:	ee17 3a90 	vmov	r3, s15
 8000ee6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  StepperMotorDriverHandle->Register.INT_SPEED = Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8000eea:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
 8000eee:	f7ff fc17 	bl	8000720 <Step_s_2_IntSpeed>
 8000ef2:	8560      	strh	r0, [r4, #42]	; 0x2a
  StepperMotorDriverHandle->Register.ST_SLP = s_Step_2_StSlp(MotorParameterData->stslp);
 8000ef4:	ed95 0a0f 	vldr	s0, [r5, #60]	; 0x3c
 8000ef8:	f7ff fc2a 	bl	8000750 <s_Step_2_StSlp>
 8000efc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  StepperMotorDriverHandle->Register.FN_SLP_ACC = s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8000f00:	ed95 0a10 	vldr	s0, [r5, #64]	; 0x40
 8000f04:	f7ff fc3e 	bl	8000784 <s_Step_2_FnSlpAcc>
 8000f08:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
  StepperMotorDriverHandle->Register.FN_SLP_DEC = s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8000f0c:	ed95 0a11 	vldr	s0, [r5, #68]	; 0x44
 8000f10:	f7ff fc52 	bl	80007b8 <s_Step_2_FnSlpDec>
 8000f14:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  StepperMotorDriverHandle->Register.K_THERM = MotorParameterData->kterm;
 8000f18:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8000f1c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  StepperMotorDriverHandle->Register.OCD_TH = mA_2_OcdTh(MotorParameterData->ocdth);
 8000f20:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
 8000f24:	f7ff fc62 	bl	80007ec <mA_2_OcdTh>
 8000f28:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  StepperMotorDriverHandle->Register.STALL_TH = mA_2_StallTh(MotorParameterData->stallth);
 8000f2c:	ed95 0a14 	vldr	s0, [r5, #80]	; 0x50
 8000f30:	f7ff fc86 	bl	8000840 <mA_2_StallTh>
 8000f34:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  StepperMotorDriverHandle->Register.STEP_MODE = MotorParameterData->step_sel;
 8000f38:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8000f3c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  StepperMotorDriverHandle->Register.ALARM_EN = MotorParameterData->alarmen;
 8000f40:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8000f44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  StepperMotorDriverHandle->Register.CONFIG = MotorParameterData->config;
 8000f48:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8000f4c:	86e3      	strh	r3, [r4, #54]	; 0x36
  
  /* Write the L6470 registers with the prepared data */
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ACC_ID, StepperMotorDriverHandle->Register.ACC);
 8000f4e:	68a3      	ldr	r3, [r4, #8]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4632      	mov	r2, r6
 8000f54:	2104      	movs	r1, #4
 8000f56:	7820      	ldrb	r0, [r4, #0]
 8000f58:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_DEC_ID, StepperMotorDriverHandle->Register.DEC);
 8000f5a:	68a3      	ldr	r3, [r4, #8]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	8be2      	ldrh	r2, [r4, #30]
 8000f60:	2105      	movs	r1, #5
 8000f62:	7820      	ldrb	r0, [r4, #0]
 8000f64:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MAX_SPEED_ID, StepperMotorDriverHandle->Register.MAX_SPEED);
 8000f66:	68a3      	ldr	r3, [r4, #8]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	8c22      	ldrh	r2, [r4, #32]
 8000f6c:	2106      	movs	r1, #6
 8000f6e:	7820      	ldrb	r0, [r4, #0]
 8000f70:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MIN_SPEED_ID, StepperMotorDriverHandle->Register.MIN_SPEED);
 8000f72:	68a3      	ldr	r3, [r4, #8]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8000f78:	2107      	movs	r1, #7
 8000f7a:	7820      	ldrb	r0, [r4, #0]
 8000f7c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FS_SPD_ID, StepperMotorDriverHandle->Register.FS_SPD);
 8000f7e:	68a3      	ldr	r3, [r4, #8]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8000f84:	2108      	movs	r1, #8
 8000f86:	7820      	ldrb	r0, [r4, #0]
 8000f88:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_HOLD_ID, StepperMotorDriverHandle->Register.KVAL_HOLD);
 8000f8a:	68a3      	ldr	r3, [r4, #8]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8000f92:	2109      	movs	r1, #9
 8000f94:	7820      	ldrb	r0, [r4, #0]
 8000f96:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_RUN_ID, StepperMotorDriverHandle->Register.KVAL_RUN);
 8000f98:	68a3      	ldr	r3, [r4, #8]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8000fa0:	210a      	movs	r1, #10
 8000fa2:	7820      	ldrb	r0, [r4, #0]
 8000fa4:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_ACC_ID, StepperMotorDriverHandle->Register.KVAL_ACC);
 8000fa6:	68a3      	ldr	r3, [r4, #8]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000fae:	210b      	movs	r1, #11
 8000fb0:	7820      	ldrb	r0, [r4, #0]
 8000fb2:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_DEC_ID, StepperMotorDriverHandle->Register.KVAL_DEC);
 8000fb4:	68a3      	ldr	r3, [r4, #8]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8000fbc:	210c      	movs	r1, #12
 8000fbe:	7820      	ldrb	r0, [r4, #0]
 8000fc0:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_INT_SPEED_ID, StepperMotorDriverHandle->Register.INT_SPEED);
 8000fc2:	68a3      	ldr	r3, [r4, #8]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000fc8:	210d      	movs	r1, #13
 8000fca:	7820      	ldrb	r0, [r4, #0]
 8000fcc:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ST_SLP_ID, StepperMotorDriverHandle->Register.ST_SLP);
 8000fce:	68a3      	ldr	r3, [r4, #8]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8000fd6:	210e      	movs	r1, #14
 8000fd8:	7820      	ldrb	r0, [r4, #0]
 8000fda:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_ACC_ID, StepperMotorDriverHandle->Register.FN_SLP_ACC);
 8000fdc:	68a3      	ldr	r3, [r4, #8]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8000fe4:	210f      	movs	r1, #15
 8000fe6:	7820      	ldrb	r0, [r4, #0]
 8000fe8:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_DEC_ID, StepperMotorDriverHandle->Register.FN_SLP_DEC);
 8000fea:	68a3      	ldr	r3, [r4, #8]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	7820      	ldrb	r0, [r4, #0]
 8000ff6:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_K_THERM_ID, StepperMotorDriverHandle->Register.K_THERM);
 8000ff8:	68a3      	ldr	r3, [r4, #8]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8001000:	2111      	movs	r1, #17
 8001002:	7820      	ldrb	r0, [r4, #0]
 8001004:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_OCD_TH_ID, StepperMotorDriverHandle->Register.OCD_TH);
 8001006:	68a3      	ldr	r3, [r4, #8]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800100e:	2113      	movs	r1, #19
 8001010:	7820      	ldrb	r0, [r4, #0]
 8001012:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STALL_TH_ID, StepperMotorDriverHandle->Register.STALL_TH);
 8001014:	68a3      	ldr	r3, [r4, #8]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800101c:	2114      	movs	r1, #20
 800101e:	7820      	ldrb	r0, [r4, #0]
 8001020:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STEP_MODE_ID, StepperMotorDriverHandle->Register.STEP_MODE);
 8001022:	68a3      	ldr	r3, [r4, #8]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 800102a:	2115      	movs	r1, #21
 800102c:	7820      	ldrb	r0, [r4, #0]
 800102e:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ALARM_EN_ID, StepperMotorDriverHandle->Register.ALARM_EN);
 8001030:	68a3      	ldr	r3, [r4, #8]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001038:	2116      	movs	r1, #22
 800103a:	7820      	ldrb	r0, [r4, #0]
 800103c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_CONFIG_ID, StepperMotorDriverHandle->Register.CONFIG);
 800103e:	68a3      	ldr	r3, [r4, #8]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001044:	2117      	movs	r1, #23
 8001046:	7820      	ldrb	r0, [r4, #0]
 8001048:	4798      	blx	r3
}
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	43800000 	.word	0x43800000

08001050 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001050:	b530      	push	{r4, r5, lr}
 8001052:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001054:	4602      	mov	r2, r0
 8001056:	b948      	cbnz	r0, 800106c <BSP_LED_Init+0x1c>
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <BSP_LED_Init+0x48>)
 800105a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800105c:	f041 0101 	orr.w	r1, r1, #1
 8001060:	6319      	str	r1, [r3, #48]	; 0x30
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800106c:	2520      	movs	r5, #32
 800106e:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001074:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001076:	2302      	movs	r3, #2
 8001078:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800107a:	4c08      	ldr	r4, [pc, #32]	; (800109c <BSP_LED_Init+0x4c>)
 800107c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001080:	a901      	add	r1, sp, #4
 8001082:	6860      	ldr	r0, [r4, #4]
 8001084:	f000 fc64 	bl	8001950 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001088:	2200      	movs	r2, #0
 800108a:	4629      	mov	r1, r5
 800108c:	6860      	ldr	r0, [r4, #4]
 800108e:	f000 fd8d 	bl	8001bac <HAL_GPIO_WritePin>
}
 8001092:	b007      	add	sp, #28
 8001094:	bd30      	pop	{r4, r5, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	20000098 	.word	0x20000098

080010a0 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80010a0:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <BSP_LED_On+0x14>)
 80010a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80010a8:	2201      	movs	r2, #1
 80010aa:	2120      	movs	r1, #32
 80010ac:	6840      	ldr	r0, [r0, #4]
 80010ae:	f000 fd7d 	bl	8001bac <HAL_GPIO_WritePin>
}
 80010b2:	bd08      	pop	{r3, pc}
 80010b4:	20000098 	.word	0x20000098

080010b8 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80010b8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <BSP_LED_Off+0x14>)
 80010bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80010c0:	2200      	movs	r2, #0
 80010c2:	2120      	movs	r1, #32
 80010c4:	6840      	ldr	r0, [r0, #4]
 80010c6:	f000 fd71 	bl	8001bac <HAL_GPIO_WritePin>
}
 80010ca:	bd08      	pop	{r3, pc}
 80010cc:	20000098 	.word	0x20000098

080010d0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010d0:	b510      	push	{r4, lr}
 80010d2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80010d4:	4684      	mov	ip, r0
 80010d6:	b948      	cbnz	r0, 80010ec <BSP_PB_Init+0x1c>
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <BSP_PB_Init+0x78>)
 80010da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010dc:	f042 0204 	orr.w	r2, r2, #4
 80010e0:	631a      	str	r2, [r3, #48]	; 0x30
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80010ec:	b119      	cbz	r1, 80010f6 <BSP_PB_Init+0x26>
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80010ee:	2901      	cmp	r1, #1
 80010f0:	d012      	beq.n	8001118 <BSP_PB_Init+0x48>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 80010f2:	b006      	add	sp, #24
 80010f4:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80010f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001100:	2302      	movs	r3, #2
 8001102:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001104:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <BSP_PB_Init+0x7c>)
 8001108:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800110c:	a901      	add	r1, sp, #4
 800110e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001112:	f000 fc1d 	bl	8001950 <HAL_GPIO_Init>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001116:	e7ec      	b.n	80010f2 <BSP_PB_Init+0x22>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2400      	movs	r4, #0
 8001120:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <BSP_PB_Init+0x80>)
 8001124:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <BSP_PB_Init+0x7c>)
 8001128:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800112c:	a901      	add	r1, sp, #4
 800112e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001132:	f000 fc0d 	bl	8001950 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001136:	4622      	mov	r2, r4
 8001138:	210f      	movs	r1, #15
 800113a:	2028      	movs	r0, #40	; 0x28
 800113c:	f000 fb7c 	bl	8001838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001140:	2028      	movs	r0, #40	; 0x28
 8001142:	f000 fbbd 	bl	80018c0 <HAL_NVIC_EnableIRQ>
}
 8001146:	e7d4      	b.n	80010f2 <BSP_PB_Init+0x22>
 8001148:	40023800 	.word	0x40023800
 800114c:	20000098 	.word	0x20000098
 8001150:	10210000 	.word	0x10210000

08001154 <BSP_Select>:
  * @param  ExpBrd_Id   The identifier of the Expansion Board to be addressed.
  * @retval FlagStatus  SET or RESET related to the result.
  */
uint8_t BSP_Select(uint8_t ExpBrd_Id)
{
  if (ExpBrd_Id < EXPBRD_MOUNTED_NR)
 8001154:	b948      	cbnz	r0, 800116a <BSP_Select+0x16>
  {
    L6470_nCS_GPIO.gpio_clk_enable = L6470_nCS_GPIO_Array[ExpBrd_Id].gpio_clk_enable;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <BSP_Select+0x1c>)
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <BSP_Select+0x20>)
 800115a:	6811      	ldr	r1, [r2, #0]
 800115c:	6019      	str	r1, [r3, #0]
    L6470_nCS_GPIO.port = L6470_nCS_GPIO_Array[ExpBrd_Id].port;
 800115e:	6851      	ldr	r1, [r2, #4]
 8001160:	6059      	str	r1, [r3, #4]
    L6470_nCS_GPIO.pin = L6470_nCS_GPIO_Array[ExpBrd_Id].pin;
 8001162:	8912      	ldrh	r2, [r2, #8]
 8001164:	811a      	strh	r2, [r3, #8]
    return SET;
 8001166:	2001      	movs	r0, #1
 8001168:	4770      	bx	lr
  }
  else
    return RESET;
 800116a:	2000      	movs	r0, #0
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200003c0 	.word	0x200003c0
 8001174:	200000a4 	.word	0x200000a4

08001178 <BSP_L6470_ResetDevice>:
{
 8001178:	b510      	push	{r4, lr}
 800117a:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 800117c:	f7ff ffea 	bl	8001154 <BSP_Select>
 8001180:	b900      	cbnz	r0, 8001184 <BSP_L6470_ResetDevice+0xc>
}
 8001182:	bd10      	pop	{r4, pc}
    L6470_ResetDevice(L6470_Id);
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff fcf3 	bl	8000b70 <L6470_ResetDevice>
}
 800118a:	e7fa      	b.n	8001182 <BSP_L6470_ResetDevice+0xa>

0800118c <BSP_L6470_GetStatus>:
{
 800118c:	b510      	push	{r4, lr}
 800118e:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 8001190:	f7ff ffe0 	bl	8001154 <BSP_Select>
 8001194:	b908      	cbnz	r0, 800119a <BSP_L6470_GetStatus+0xe>
    return 0;
 8001196:	2000      	movs	r0, #0
}
 8001198:	bd10      	pop	{r4, pc}
    return L6470_GetStatus(L6470_Id);
 800119a:	4620      	mov	r0, r4
 800119c:	f7ff fe2c 	bl	8000df8 <L6470_GetStatus>
 80011a0:	e7fa      	b.n	8001198 <BSP_L6470_GetStatus+0xc>

080011a2 <BSP_L6470_SetParam>:
{
 80011a2:	b570      	push	{r4, r5, r6, lr}
 80011a4:	460c      	mov	r4, r1
 80011a6:	4615      	mov	r5, r2
 80011a8:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 80011aa:	f7ff ffd3 	bl	8001154 <BSP_Select>
 80011ae:	b900      	cbnz	r0, 80011b2 <BSP_L6470_SetParam+0x10>
}
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
    L6470_SetParam(L6470_Id, L6470_RegId, Value);
 80011b2:	4632      	mov	r2, r6
 80011b4:	4629      	mov	r1, r5
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff fba6 	bl	8000908 <L6470_SetParam>
}
 80011bc:	e7f8      	b.n	80011b0 <BSP_L6470_SetParam+0xe>

080011be <BSP_L6470_GetParam>:
{
 80011be:	b538      	push	{r3, r4, r5, lr}
 80011c0:	460c      	mov	r4, r1
 80011c2:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 80011c4:	f7ff ffc6 	bl	8001154 <BSP_Select>
 80011c8:	b908      	cbnz	r0, 80011ce <BSP_L6470_GetParam+0x10>
    return 0xFF;
 80011ca:	20ff      	movs	r0, #255	; 0xff
}
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
    return L6470_GetParam(L6470_Id, L6470_RegId);
 80011ce:	4629      	mov	r1, r5
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff fd73 	bl	8000cbc <L6470_GetParam>
 80011d6:	e7f9      	b.n	80011cc <BSP_L6470_GetParam+0xe>

080011d8 <BSP_L6470_Run>:
{
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	460c      	mov	r4, r1
 80011dc:	4615      	mov	r5, r2
 80011de:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 80011e0:	f7ff ffb8 	bl	8001154 <BSP_Select>
 80011e4:	b900      	cbnz	r0, 80011e8 <BSP_L6470_Run+0x10>
}
 80011e6:	bd70      	pop	{r4, r5, r6, pc}
    L6470_Run(L6470_Id, L6470_DirId, Speed);
 80011e8:	4632      	mov	r2, r6
 80011ea:	4629      	mov	r1, r5
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff fba7 	bl	8000940 <L6470_Run>
}
 80011f2:	e7f8      	b.n	80011e6 <BSP_L6470_Run+0xe>

080011f4 <BSP_L6470_StepClock>:
{
 80011f4:	b538      	push	{r3, r4, r5, lr}
 80011f6:	460c      	mov	r4, r1
 80011f8:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 80011fa:	f7ff ffab 	bl	8001154 <BSP_Select>
 80011fe:	b900      	cbnz	r0, 8001202 <BSP_L6470_StepClock+0xe>
}
 8001200:	bd38      	pop	{r3, r4, r5, pc}
    L6470_StepClock(L6470_Id, L6470_DirId);
 8001202:	4629      	mov	r1, r5
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff fbb7 	bl	8000978 <L6470_StepClock>
}
 800120a:	e7f9      	b.n	8001200 <BSP_L6470_StepClock+0xc>

0800120c <BSP_L6470_Move>:
{
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	460c      	mov	r4, r1
 8001210:	4615      	mov	r5, r2
 8001212:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001214:	f7ff ff9e 	bl	8001154 <BSP_Select>
 8001218:	b900      	cbnz	r0, 800121c <BSP_L6470_Move+0x10>
}
 800121a:	bd70      	pop	{r4, r5, r6, pc}
    L6470_Move(L6470_Id, L6470_DirId, N_Step);
 800121c:	4632      	mov	r2, r6
 800121e:	4629      	mov	r1, r5
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fbc5 	bl	80009b0 <L6470_Move>
}
 8001226:	e7f8      	b.n	800121a <BSP_L6470_Move+0xe>

08001228 <BSP_L6470_GoTo>:
{
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	460c      	mov	r4, r1
 800122c:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 800122e:	f7ff ff91 	bl	8001154 <BSP_Select>
 8001232:	b900      	cbnz	r0, 8001236 <BSP_L6470_GoTo+0xe>
}
 8001234:	bd38      	pop	{r3, r4, r5, pc}
    L6470_GoTo(L6470_Id, AbsPos);
 8001236:	4629      	mov	r1, r5
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff fbd5 	bl	80009e8 <L6470_GoTo>
}
 800123e:	e7f9      	b.n	8001234 <BSP_L6470_GoTo+0xc>

08001240 <BSP_L6470_GoToDir>:
{
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	460c      	mov	r4, r1
 8001244:	4615      	mov	r5, r2
 8001246:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001248:	f7ff ff84 	bl	8001154 <BSP_Select>
 800124c:	b900      	cbnz	r0, 8001250 <BSP_L6470_GoToDir+0x10>
}
 800124e:	bd70      	pop	{r4, r5, r6, pc}
    L6470_GoToDir(L6470_Id, L6470_DirId, AbsPos);
 8001250:	4632      	mov	r2, r6
 8001252:	4629      	mov	r1, r5
 8001254:	4620      	mov	r0, r4
 8001256:	f7ff fbe7 	bl	8000a28 <L6470_GoToDir>
}
 800125a:	e7f8      	b.n	800124e <BSP_L6470_GoToDir+0xe>

0800125c <BSP_L6470_GoUntil>:
{
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	460c      	mov	r4, r1
 8001260:	4615      	mov	r5, r2
 8001262:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001264:	f7ff ff76 	bl	8001154 <BSP_Select>
 8001268:	b900      	cbnz	r0, 800126c <BSP_L6470_GoUntil+0x10>
}
 800126a:	bd70      	pop	{r4, r5, r6, pc}
    L6470_GoUntil(L6470_Id, L6470_ActId, L6470_DirId, Speed);
 800126c:	9b04      	ldr	r3, [sp, #16]
 800126e:	4632      	mov	r2, r6
 8001270:	4629      	mov	r1, r5
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff fbf8 	bl	8000a68 <L6470_GoUntil>
}
 8001278:	e7f7      	b.n	800126a <BSP_L6470_GoUntil+0xe>

0800127a <BSP_L6470_ReleaseSW>:
{
 800127a:	b570      	push	{r4, r5, r6, lr}
 800127c:	460c      	mov	r4, r1
 800127e:	4615      	mov	r5, r2
 8001280:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001282:	f7ff ff67 	bl	8001154 <BSP_Select>
 8001286:	b900      	cbnz	r0, 800128a <BSP_L6470_ReleaseSW+0x10>
}
 8001288:	bd70      	pop	{r4, r5, r6, pc}
    L6470_ReleaseSW(L6470_Id, L6470_ActId, L6470_DirId);
 800128a:	4632      	mov	r2, r6
 800128c:	4629      	mov	r1, r5
 800128e:	4620      	mov	r0, r4
 8001290:	f7ff fc04 	bl	8000a9c <L6470_ReleaseSW>
}
 8001294:	e7f8      	b.n	8001288 <BSP_L6470_ReleaseSW+0xe>

08001296 <BSP_L6470_GoHome>:
{
 8001296:	b510      	push	{r4, lr}
 8001298:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 800129a:	f7ff ff5b 	bl	8001154 <BSP_Select>
 800129e:	b900      	cbnz	r0, 80012a2 <BSP_L6470_GoHome+0xc>
}
 80012a0:	bd10      	pop	{r4, pc}
    L6470_GoHome(L6470_Id);
 80012a2:	4620      	mov	r0, r4
 80012a4:	f7ff fc16 	bl	8000ad4 <L6470_GoHome>
}
 80012a8:	e7fa      	b.n	80012a0 <BSP_L6470_GoHome+0xa>

080012aa <BSP_L6470_GoMark>:
{
 80012aa:	b510      	push	{r4, lr}
 80012ac:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012ae:	f7ff ff51 	bl	8001154 <BSP_Select>
 80012b2:	b900      	cbnz	r0, 80012b6 <BSP_L6470_GoMark+0xc>
}
 80012b4:	bd10      	pop	{r4, pc}
    L6470_GoMark(L6470_Id);
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff fc26 	bl	8000b08 <L6470_GoMark>
}
 80012bc:	e7fa      	b.n	80012b4 <BSP_L6470_GoMark+0xa>

080012be <BSP_L6470_ResetPos>:
{
 80012be:	b510      	push	{r4, lr}
 80012c0:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012c2:	f7ff ff47 	bl	8001154 <BSP_Select>
 80012c6:	b900      	cbnz	r0, 80012ca <BSP_L6470_ResetPos+0xc>
}
 80012c8:	bd10      	pop	{r4, pc}
    L6470_ResetPos(L6470_Id);
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff fc36 	bl	8000b3c <L6470_ResetPos>
}
 80012d0:	e7fa      	b.n	80012c8 <BSP_L6470_ResetPos+0xa>

080012d2 <BSP_L6470_SoftStop>:
{
 80012d2:	b510      	push	{r4, lr}
 80012d4:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012d6:	f7ff ff3d 	bl	8001154 <BSP_Select>
 80012da:	b900      	cbnz	r0, 80012de <BSP_L6470_SoftStop+0xc>
}
 80012dc:	bd10      	pop	{r4, pc}
    L6470_SoftStop(L6470_Id);
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff fc60 	bl	8000ba4 <L6470_SoftStop>
}
 80012e4:	e7fa      	b.n	80012dc <BSP_L6470_SoftStop+0xa>

080012e6 <BSP_L6470_HardStop>:
{
 80012e6:	b510      	push	{r4, lr}
 80012e8:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012ea:	f7ff ff33 	bl	8001154 <BSP_Select>
 80012ee:	b900      	cbnz	r0, 80012f2 <BSP_L6470_HardStop+0xc>
}
 80012f0:	bd10      	pop	{r4, pc}
    L6470_HardStop(L6470_Id);
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff fc70 	bl	8000bd8 <L6470_HardStop>
}
 80012f8:	e7fa      	b.n	80012f0 <BSP_L6470_HardStop+0xa>

080012fa <BSP_L6470_SoftHiZ>:
{
 80012fa:	b510      	push	{r4, lr}
 80012fc:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012fe:	f7ff ff29 	bl	8001154 <BSP_Select>
 8001302:	b900      	cbnz	r0, 8001306 <BSP_L6470_SoftHiZ+0xc>
}
 8001304:	bd10      	pop	{r4, pc}
    L6470_SoftHiZ(L6470_Id);
 8001306:	4620      	mov	r0, r4
 8001308:	f7ff fc80 	bl	8000c0c <L6470_SoftHiZ>
}
 800130c:	e7fa      	b.n	8001304 <BSP_L6470_SoftHiZ+0xa>

0800130e <BSP_L6470_HardHiZ>:
{
 800130e:	b510      	push	{r4, lr}
 8001310:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 8001312:	f7ff ff1f 	bl	8001154 <BSP_Select>
 8001316:	b900      	cbnz	r0, 800131a <BSP_L6470_HardHiZ+0xc>
}
 8001318:	bd10      	pop	{r4, pc}
    L6470_HardHiZ(L6470_Id);
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff fc90 	bl	8000c40 <L6470_HardHiZ>
}
 8001320:	e7fa      	b.n	8001318 <BSP_L6470_HardHiZ+0xa>

08001322 <BSP_L6470_CheckStatusRegisterFlag>:
{
 8001322:	b538      	push	{r3, r4, r5, lr}
 8001324:	460c      	mov	r4, r1
 8001326:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 8001328:	f7ff ff14 	bl	8001154 <BSP_Select>
 800132c:	b908      	cbnz	r0, 8001332 <BSP_L6470_CheckStatusRegisterFlag+0x10>
    return 0xFF;
 800132e:	20ff      	movs	r0, #255	; 0xff
}
 8001330:	bd38      	pop	{r3, r4, r5, pc}
    return L6470_CheckStatusRegisterFlag(L6470_Id, L6470_StatusRegisterFlagId);
 8001332:	4629      	mov	r1, r5
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff fcef 	bl	8000d18 <L6470_CheckStatusRegisterFlag>
 800133a:	e7f9      	b.n	8001330 <BSP_L6470_CheckStatusRegisterFlag+0xe>

0800133c <BSP_L6470_0_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
*/
void BSP_L6470_0_0_Config(MotorParameterData_t *MotorParameterData)
{
 800133c:	b508      	push	{r3, lr}
 800133e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001340:	4801      	ldr	r0, [pc, #4]	; (8001348 <BSP_L6470_0_0_Config+0xc>)
 8001342:	f7ff fd7b 	bl	8000e3c <L6470_Config>
}
 8001346:	bd08      	pop	{r3, pc}
 8001348:	200000b0 	.word	0x200000b0

0800134c <BSP_L6470_0_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_0_1_Config(MotorParameterData_t *MotorParameterData)
{
 800134c:	b508      	push	{r3, lr}
 800134e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001350:	4801      	ldr	r0, [pc, #4]	; (8001358 <BSP_L6470_0_1_Config+0xc>)
 8001352:	f7ff fd73 	bl	8000e3c <L6470_Config>
}
 8001356:	bd08      	pop	{r3, pc}
 8001358:	200000ec 	.word	0x200000ec

0800135c <BSP_L6470_1_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_0_Config(MotorParameterData_t *MotorParameterData)
{
 800135c:	b508      	push	{r3, lr}
 800135e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001360:	4801      	ldr	r0, [pc, #4]	; (8001368 <BSP_L6470_1_0_Config+0xc>)
 8001362:	f7ff fd6b 	bl	8000e3c <L6470_Config>
}
 8001366:	bd08      	pop	{r3, pc}
 8001368:	20000128 	.word	0x20000128

0800136c <BSP_L6470_1_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_1_Config(MotorParameterData_t *MotorParameterData)
{
 800136c:	b508      	push	{r3, lr}
 800136e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001370:	4801      	ldr	r0, [pc, #4]	; (8001378 <BSP_L6470_1_1_Config+0xc>)
 8001372:	f7ff fd63 	bl	8000e3c <L6470_Config>
}
 8001376:	bd08      	pop	{r3, pc}
 8001378:	20000164 	.word	0x20000164

0800137c <BSP_L6470_2_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_0_Config(MotorParameterData_t *MotorParameterData)
{
 800137c:	b508      	push	{r3, lr}
 800137e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001380:	4801      	ldr	r0, [pc, #4]	; (8001388 <BSP_L6470_2_0_Config+0xc>)
 8001382:	f7ff fd5b 	bl	8000e3c <L6470_Config>
}
 8001386:	bd08      	pop	{r3, pc}
 8001388:	200001a0 	.word	0x200001a0

0800138c <BSP_L6470_2_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_1_Config(MotorParameterData_t *MotorParameterData)
{
 800138c:	b508      	push	{r3, lr}
 800138e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001390:	4801      	ldr	r0, [pc, #4]	; (8001398 <BSP_L6470_2_1_Config+0xc>)
 8001392:	f7ff fd53 	bl	8000e3c <L6470_Config>
}
 8001396:	bd08      	pop	{r3, pc}
 8001398:	200001dc 	.word	0x200001dc

0800139c <BSP_L6470_3_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_0_Config(MotorParameterData_t *MotorParameterData)
{
 800139c:	b508      	push	{r3, lr}
 800139e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80013a0:	4801      	ldr	r0, [pc, #4]	; (80013a8 <BSP_L6470_3_0_Config+0xc>)
 80013a2:	f7ff fd4b 	bl	8000e3c <L6470_Config>
}
 80013a6:	bd08      	pop	{r3, pc}
 80013a8:	20000218 	.word	0x20000218

080013ac <BSP_L6470_3_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_1_Config(MotorParameterData_t *MotorParameterData)
{
 80013ac:	b508      	push	{r3, lr}
 80013ae:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80013b0:	4801      	ldr	r0, [pc, #4]	; (80013b8 <BSP_L6470_3_1_Config+0xc>)
 80013b2:	f7ff fd43 	bl	8000e3c <L6470_Config>
}
 80013b6:	bd08      	pop	{r3, pc}
 80013b8:	20000254 	.word	0x20000254

080013bc <BSP_NUCLEO_GPIO_Init>:
{
 80013bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c0:	b086      	sub	sp, #24
  GPIO_CLK_ENABLE(L6470_nSTBY_nRST_GPIO.gpio_clk_enable);
 80013c2:	4e29      	ldr	r6, [pc, #164]	; (8001468 <BSP_NUCLEO_GPIO_Init+0xac>)
 80013c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80013c6:	4c29      	ldr	r4, [pc, #164]	; (800146c <BSP_NUCLEO_GPIO_Init+0xb0>)
 80013c8:	f8d4 21ec 	ldr.w	r2, [r4, #492]	; 0x1ec
 80013cc:	4313      	orrs	r3, r2
 80013ce:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nSTBY_nRST_GPIO.pin;
 80013d0:	f8b4 31f4 	ldrh.w	r3, [r4, #500]	; 0x1f4
 80013d4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013d6:	2311      	movs	r3, #17
 80013d8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2500      	movs	r5, #0
 80013dc:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80013de:	2703      	movs	r7, #3
 80013e0:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(L6470_nSTBY_nRST_GPIO.port, &GPIO_InitStruct);
 80013e2:	a901      	add	r1, sp, #4
 80013e4:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
 80013e8:	f000 fab2 	bl	8001950 <HAL_GPIO_Init>
  GPIO_CLK_ENABLE(L6470_nBUSY_SYNC_GPIO.gpio_clk_enable);
 80013ec:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80013ee:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
 80013f2:	4313      	orrs	r3, r2
 80013f4:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nBUSY_SYNC_GPIO.pin;
 80013f6:	f8b4 3200 	ldrh.w	r3, [r4, #512]	; 0x200
 80013fa:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8001470 <BSP_NUCLEO_GPIO_Init+0xb4>
 8001400:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(L6470_nBUSY_SYNC_GPIO.port, &GPIO_InitStruct);
 8001406:	a901      	add	r1, sp, #4
 8001408:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
 800140c:	f000 faa0 	bl	8001950 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(L6470_nBUSY_SYNC_IRQn, 0, 0);
 8001410:	462a      	mov	r2, r5
 8001412:	4629      	mov	r1, r5
 8001414:	2006      	movs	r0, #6
 8001416:	f000 fa0f 	bl	8001838 <HAL_NVIC_SetPriority>
  GPIO_CLK_ENABLE(L6470_nFLAG_GPIO.gpio_clk_enable);
 800141a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800141c:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8001420:	4313      	orrs	r3, r2
 8001422:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nFLAG_GPIO.pin;
 8001424:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8001428:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142a:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(L6470_nFLAG_GPIO.port, &GPIO_InitStruct);
 8001430:	a901      	add	r1, sp, #4
 8001432:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8001436:	f000 fa8b 	bl	8001950 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(L6470_nFLAG_IRQn, 0, 0);
 800143a:	462a      	mov	r2, r5
 800143c:	4629      	mov	r1, r5
 800143e:	2007      	movs	r0, #7
 8001440:	f000 f9fa 	bl	8001838 <HAL_NVIC_SetPriority>
    GPIO_CLK_ENABLE(L6470_nCS_GPIO_Array[ExpBrd].gpio_clk_enable);
 8001444:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001446:	6822      	ldr	r2, [r4, #0]
 8001448:	4313      	orrs	r3, r2
 800144a:	6333      	str	r3, [r6, #48]	; 0x30
    GPIO_InitStruct.Pin = L6470_nCS_GPIO_Array[ExpBrd].pin;
 800144c:	8923      	ldrh	r3, [r4, #8]
 800144e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001456:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(L6470_nCS_GPIO_Array[ExpBrd].port, &GPIO_InitStruct);
 8001458:	a901      	add	r1, sp, #4
 800145a:	6860      	ldr	r0, [r4, #4]
 800145c:	f000 fa78 	bl	8001950 <HAL_GPIO_Init>
}
 8001460:	b006      	add	sp, #24
 8001462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	200000a4 	.word	0x200000a4
 8001470:	10210000 	.word	0x10210000

08001474 <BSP_L6470_Init>:
{
 8001474:	b538      	push	{r3, r4, r5, lr}
  L6470_DISABLE();
 8001476:	4c17      	ldr	r4, [pc, #92]	; (80014d4 <BSP_L6470_Init+0x60>)
 8001478:	2200      	movs	r2, #0
 800147a:	f8b4 11f4 	ldrh.w	r1, [r4, #500]	; 0x1f4
 800147e:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
 8001482:	f000 fb93 	bl	8001bac <HAL_GPIO_WritePin>
  L6470_ENABLE();
 8001486:	2201      	movs	r2, #1
 8001488:	f8b4 11f4 	ldrh.w	r1, [r4, #500]	; 0x1f4
 800148c:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
 8001490:	f000 fb8c 	bl	8001bac <HAL_GPIO_WritePin>
    BSP_Select(ExpBrd);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff fe5d 	bl	8001154 <BSP_Select>
    L6470_nCS_HIGH();
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <BSP_L6470_Init+0x64>)
 800149c:	2201      	movs	r2, #1
 800149e:	8919      	ldrh	r1, [r3, #8]
 80014a0:	6858      	ldr	r0, [r3, #4]
 80014a2:	f000 fb83 	bl	8001bac <HAL_GPIO_WritePin>
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff f9f4 	bl	8000894 <L6470_ID>
 80014ac:	4604      	mov	r4, r0
 80014ae:	2501      	movs	r5, #1
 80014b0:	e007      	b.n	80014c2 <BSP_L6470_Init+0x4e>
      L6470_ResetDevice(L6470_Id);
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7ff fb5c 	bl	8000b70 <L6470_ResetDevice>
      L6470_GetStatus(L6470_Id);
 80014b8:	4620      	mov	r0, r4
 80014ba:	f7ff fc9d 	bl	8000df8 <L6470_GetStatus>
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 80014be:	3401      	adds	r4, #1
 80014c0:	b2e4      	uxtb	r4, r4
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff f9e6 	bl	8000894 <L6470_ID>
 80014c8:	42a0      	cmp	r0, r4
 80014ca:	d2f2      	bcs.n	80014b2 <BSP_L6470_Init+0x3e>
  BSP_Select(EXPBRD_ID(0));
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff fe41 	bl	8001154 <BSP_Select>
}
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
 80014d4:	200000a4 	.word	0x200000a4
 80014d8:	200003c0 	.word	0x200003c0

080014dc <BSP_IRQ>:
{
 80014dc:	b508      	push	{r3, lr}
  if(fs == ENABLE)
 80014de:	2801      	cmp	r0, #1
 80014e0:	d006      	beq.n	80014f0 <BSP_IRQ+0x14>
    HAL_NVIC_DisableIRQ(L6470_nBUSY_SYNC_IRQn);
 80014e2:	2006      	movs	r0, #6
 80014e4:	f000 fa02 	bl	80018ec <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(L6470_nFLAG_IRQn);
 80014e8:	2007      	movs	r0, #7
 80014ea:	f000 f9ff 	bl	80018ec <HAL_NVIC_DisableIRQ>
}
 80014ee:	bd08      	pop	{r3, pc}
    HAL_NVIC_EnableIRQ(L6470_nBUSY_SYNC_IRQn);
 80014f0:	2006      	movs	r0, #6
 80014f2:	f000 f9e5 	bl	80018c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(L6470_nFLAG_IRQn);
 80014f6:	2007      	movs	r0, #7
 80014f8:	f000 f9e2 	bl	80018c0 <HAL_NVIC_EnableIRQ>
 80014fc:	e7f7      	b.n	80014ee <BSP_IRQ+0x12>

080014fe <BSP_Init>:
{
 80014fe:	b508      	push	{r3, lr}
  BSP_Select(EXPBRD_ID(0));
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff fe27 	bl	8001154 <BSP_Select>
  BSP_NUCLEO_GPIO_Init();
 8001506:	f7ff ff59 	bl	80013bc <BSP_NUCLEO_GPIO_Init>
  BSP_L6470_Init();
 800150a:	f7ff ffb3 	bl	8001474 <BSP_L6470_Init>
  BSP_IRQ(ENABLE);
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff ffe4 	bl	80014dc <BSP_IRQ>
}
 8001514:	bd08      	pop	{r3, pc}

08001516 <BSP_L6470_BusySynchEventManager>:
 8001516:	bf00      	nop
}
 8001518:	4770      	bx	lr

0800151a <BSP_L6470_FlagEventManager>:
 800151a:	bf00      	nop
}
 800151c:	4770      	bx	lr

0800151e <BSP_Config>:
  * @brief  Configures each L6470 mounted on the X-NUCLEO-IHM02A1.
  * @param  StepperMotorBoardHandle_t* The pointer to the stepper motor board handle structure.
  * @param  MotorParameterData_t* The pointer to the parameter data structure.
  */
void BSP_Config(StepperMotorBoardHandle_t *StepperMotorBoardHandle, MotorParameterData_t *MotorParameterData)
{
 800151e:	b538      	push	{r3, r4, r5, lr}
 8001520:	4604      	mov	r4, r0
 8001522:	460d      	mov	r5, r1
  StepperMotorBoardHandle->Select(StepperMotorBoardHandle->StackedPosition);
 8001524:	6943      	ldr	r3, [r0, #20]
 8001526:	7800      	ldrb	r0, [r0, #0]
 8001528:	4798      	blx	r3
  
  StepperMotorBoardHandle->StepperMotorDriverHandle[0]->Config(MotorParameterData+0);
 800152a:	68e3      	ldr	r3, [r4, #12]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4628      	mov	r0, r5
 8001530:	4798      	blx	r3
  StepperMotorBoardHandle->StepperMotorDriverHandle[1]->Config(MotorParameterData+1);
 8001532:	6923      	ldr	r3, [r4, #16]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f105 0058 	add.w	r0, r5, #88	; 0x58
 800153a:	4798      	blx	r3
}
 800153c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001540 <BSP_0_Config>:
{
 8001540:	b508      	push	{r3, lr}
 8001542:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 8001544:	4801      	ldr	r0, [pc, #4]	; (800154c <BSP_0_Config+0xc>)
 8001546:	f7ff ffea 	bl	800151e <BSP_Config>
}
 800154a:	bd08      	pop	{r3, pc}
 800154c:	200002b4 	.word	0x200002b4

08001550 <BSP_1_Config>:
{
 8001550:	b508      	push	{r3, lr}
 8001552:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 8001554:	4801      	ldr	r0, [pc, #4]	; (800155c <BSP_1_Config+0xc>)
 8001556:	f7ff ffe2 	bl	800151e <BSP_Config>
}
 800155a:	bd08      	pop	{r3, pc}
 800155c:	200002cc 	.word	0x200002cc

08001560 <BSP_2_Config>:
{
 8001560:	b508      	push	{r3, lr}
 8001562:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 8001564:	4801      	ldr	r0, [pc, #4]	; (800156c <BSP_2_Config+0xc>)
 8001566:	f7ff ffda 	bl	800151e <BSP_Config>
}
 800156a:	bd08      	pop	{r3, pc}
 800156c:	200002e4 	.word	0x200002e4

08001570 <BSP_3_Config>:
{
 8001570:	b508      	push	{r3, lr}
 8001572:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 8001574:	4801      	ldr	r0, [pc, #4]	; (800157c <BSP_3_Config+0xc>)
 8001576:	f7ff ffd2 	bl	800151e <BSP_Config>
}
 800157a:	bd08      	pop	{r3, pc}
 800157c:	200002fc 	.word	0x200002fc

08001580 <SystemClock_Config>:
  *         - APB1 Timer Clocks: 84 MHz
  *         - APB2 Peripheral Clocks: 84 MHz
  *         - APB2 Timer Clocks: 84 MHz
  */
void SystemClock_Config(void)
{
 8001580:	b530      	push	{r4, r5, lr}
 8001582:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <SystemClock_Config+0x74>)
 8001586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001588:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <SystemClock_Config+0x78>)
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	6813      	ldr	r3, [r2, #0]
 80015a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b0:	2402      	movs	r4, #2
 80015b2:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b4:	2301      	movs	r3, #1
 80015b6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80015b8:	2310      	movs	r3, #16
 80015ba:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015bc:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015be:	2500      	movs	r5, #0
 80015c0:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015c2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015c8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015ca:	2304      	movs	r3, #4
 80015cc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015ce:	2307      	movs	r3, #7
 80015d0:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80015d2:	a808      	add	r0, sp, #32
 80015d4:	f000 fb12 	bl	8001bfc <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 80015d8:	2305      	movs	r3, #5
 80015da:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015dc:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015de:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e6:	9507      	str	r5, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80015e8:	4621      	mov	r1, r4
 80015ea:	a803      	add	r0, sp, #12
 80015ec:	f000 fd4c 	bl	8002088 <HAL_RCC_ClockConfig>

}
 80015f0:	b015      	add	sp, #84	; 0x54
 80015f2:	bd30      	pop	{r4, r5, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000

080015fc <MX_GPIO_Init>:

/**
  * @brief  This function initializes the GPIO MX.
  */
void MX_GPIO_Init(void)
{
 80015fc:	b508      	push	{r3, lr}
#ifdef NUCLEO_USE_USER_BUTTON
  /* Configures Button GPIO and EXTI Line */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80015fe:	2101      	movs	r1, #1
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff fd65 	bl	80010d0 <BSP_PB_Init>
#endif

#ifdef NUCLEO_USE_USER_LED
  /* Configures LED GPIO */
  BSP_LED_Init(LED2);
 8001606:	2000      	movs	r0, #0
 8001608:	f7ff fd22 	bl	8001050 <BSP_LED_Init>
#endif
}
 800160c:	bd08      	pop	{r3, pc}
	...

08001610 <MX_SPI1_Init>:
  *         - CPOL High
  *         - CPHA 2nd Edge
  *         - Baud Rate lower than 5 MBits/s
  */
void MX_SPI1_Init(void)
{
 8001610:	b508      	push	{r3, lr}
  #define MAX_BAUDRATE  5000000
  uint32_t freq;
  uint16_t freq_div;
  uint32_t spi_baudrateprescaler;
  
  hspi1.Instance = SPI1;
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_SPI1_Init+0x80>)
 8001614:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <MX_SPI1_Init+0x84>)
 8001616:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001618:	f44f 7282 	mov.w	r2, #260	; 0x104
 800161c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001622:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001624:	2102      	movs	r1, #2
 8001626:	6119      	str	r1, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001628:	2101      	movs	r1, #1
 800162a:	6159      	str	r1, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800162c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001630:	6199      	str	r1, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001632:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
  
  freq = HAL_RCC_GetPCLK2Freq();
 8001638:	f000 ff3a 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
  freq_div = (freq / MAX_BAUDRATE);
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_SPI1_Init+0x88>)
 800163e:	fba3 3000 	umull	r3, r0, r3, r0
  
  if (freq_div < 2)
 8001642:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8001646:	d30f      	bcc.n	8001668 <MX_SPI1_Init+0x58>
 8001648:	0d43      	lsrs	r3, r0, #21
  {
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
  }
  else
  {
    if (freq_div < 4)
 800164a:	2b03      	cmp	r3, #3
 800164c:	d90e      	bls.n	800166c <MX_SPI1_Init+0x5c>
    {
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
    }
    else
    {
      if (freq_div < 8)
 800164e:	2b07      	cmp	r3, #7
 8001650:	d912      	bls.n	8001678 <MX_SPI1_Init+0x68>
      {
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
      }
      else
      {
        if (freq_div < 16)
 8001652:	2b0f      	cmp	r3, #15
 8001654:	d912      	bls.n	800167c <MX_SPI1_Init+0x6c>
        {
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
        }
        else
        {
          if (freq_div < 32)
 8001656:	2b1f      	cmp	r3, #31
 8001658:	d912      	bls.n	8001680 <MX_SPI1_Init+0x70>
          {
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
          }
          else
          {
            if (freq_div < 64)
 800165a:	2b3f      	cmp	r3, #63	; 0x3f
 800165c:	d912      	bls.n	8001684 <MX_SPI1_Init+0x74>
            {
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
            }
            else
            {
              if (freq_div < 128)
 800165e:	2b7f      	cmp	r3, #127	; 0x7f
 8001660:	d912      	bls.n	8001688 <MX_SPI1_Init+0x78>
              {
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
              }
              else
              {
                if (freq_div < 256)
 8001662:	2bff      	cmp	r3, #255	; 0xff
 8001664:	d912      	bls.n	800168c <MX_SPI1_Init+0x7c>
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
                }
                else
                {
                  /* the condition is not possible, you should reduce the CPU frequency */
                  while(1);
 8001666:	e7fe      	b.n	8001666 <MX_SPI1_Init+0x56>
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
 8001668:	2300      	movs	r3, #0
 800166a:	e000      	b.n	800166e <MX_SPI1_Init+0x5e>
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
 800166c:	2308      	movs	r3, #8
        }
      }
    }
  }
  
  hspi1.Init.BaudRatePrescaler = spi_baudrateprescaler;  // the baudrate will be lower than MAX_BAUDRATE (5 MBits/s)
 800166e:	4808      	ldr	r0, [pc, #32]	; (8001690 <MX_SPI1_Init+0x80>)
 8001670:	61c3      	str	r3, [r0, #28]
  HAL_SPI_Init(&hspi1);
 8001672:	f000 ffa3 	bl	80025bc <HAL_SPI_Init>
}
 8001676:	bd08      	pop	{r3, pc}
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
 8001678:	2310      	movs	r3, #16
 800167a:	e7f8      	b.n	800166e <MX_SPI1_Init+0x5e>
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
 800167c:	2318      	movs	r3, #24
 800167e:	e7f6      	b.n	800166e <MX_SPI1_Init+0x5e>
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
 8001680:	2320      	movs	r3, #32
 8001682:	e7f4      	b.n	800166e <MX_SPI1_Init+0x5e>
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
 8001684:	2328      	movs	r3, #40	; 0x28
 8001686:	e7f2      	b.n	800166e <MX_SPI1_Init+0x5e>
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
 8001688:	2330      	movs	r3, #48	; 0x30
 800168a:	e7f0      	b.n	800166e <MX_SPI1_Init+0x5e>
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
 800168c:	2338      	movs	r3, #56	; 0x38
 800168e:	e7ee      	b.n	800166e <MX_SPI1_Init+0x5e>
 8001690:	200003d0 	.word	0x200003d0
 8001694:	40013000 	.word	0x40013000
 8001698:	6b5fca6b 	.word	0x6b5fca6b

0800169c <MX_USART2_Init>:
  *         - Stop Bit:   1
  *         - Parity:     None
  *         - Mode:       TX/RX
  */
void MX_USART2_Init(void)
{
 800169c:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800169e:	4808      	ldr	r0, [pc, #32]	; (80016c0 <MX_USART2_Init+0x24>)
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART2_Init+0x28>)
 80016a2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80016a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016a8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	2300      	movs	r3, #0
 80016ac:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ae:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b2:	220c      	movs	r2, #12
 80016b4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	61c3      	str	r3, [r0, #28]
  HAL_UART_Init(&huart2);
 80016ba:	f001 fb89 	bl	8002dd0 <HAL_UART_Init>
}
 80016be:	bd08      	pop	{r3, pc}
 80016c0:	200004c8 	.word	0x200004c8
 80016c4:	40004400 	.word	0x40004400

080016c8 <User_LED_Blinking>:
  uint8_t r;
  uint16_t half_period_ms;
  
  half_period_ms = period_ms >> 1;
  
  for (r=0; r<repetitions; r++)
 80016c8:	b1a8      	cbz	r0, 80016f6 <User_LED_Blinking+0x2e>
{
 80016ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016cc:	084d      	lsrs	r5, r1, #1
 80016ce:	4607      	mov	r7, r0
  for (r=0; r<repetitions; r++)
 80016d0:	2400      	movs	r4, #0
  {
    /* Switch on the user LED */
    BSP_LED_On(LED2);
 80016d2:	4626      	mov	r6, r4
 80016d4:	4630      	mov	r0, r6
 80016d6:	f7ff fce3 	bl	80010a0 <BSP_LED_On>
    /* ms delay */
    HAL_Delay(half_period_ms);
 80016da:	4628      	mov	r0, r5
 80016dc:	f000 f880 	bl	80017e0 <HAL_Delay>
    /* Switch off the user LED */
    BSP_LED_Off(LED2);
 80016e0:	4630      	mov	r0, r6
 80016e2:	f7ff fce9 	bl	80010b8 <BSP_LED_Off>
    /* ms delay */
    HAL_Delay(half_period_ms);
 80016e6:	4628      	mov	r0, r5
 80016e8:	f000 f87a 	bl	80017e0 <HAL_Delay>
  for (r=0; r<repetitions; r++)
 80016ec:	3401      	adds	r4, #1
 80016ee:	b2e4      	uxtb	r4, r4
 80016f0:	42a7      	cmp	r7, r4
 80016f2:	d1ef      	bne.n	80016d4 <User_LED_Blinking+0xc>
  }
}
 80016f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016f6:	4770      	bx	lr

080016f8 <NUCLEO_Board_Init>:
{
 80016f8:	b508      	push	{r3, lr}
  HAL_Init();
 80016fa:	f000 f849 	bl	8001790 <HAL_Init>
  SystemClock_Config();
 80016fe:	f7ff ff3f 	bl	8001580 <SystemClock_Config>
  MX_GPIO_Init();
 8001702:	f7ff ff7b 	bl	80015fc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001706:	f7ff ff83 	bl	8001610 <MX_SPI1_Init>
  MX_USART2_Init();
 800170a:	f7ff ffc7 	bl	800169c <MX_USART2_Init>
  User_LED_Blinking(3, 750);
 800170e:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001712:	2003      	movs	r0, #3
 8001714:	f7ff ffd8 	bl	80016c8 <User_LED_Blinking>
}
 8001718:	bd08      	pop	{r3, pc}
	...

0800171c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800171c:	490f      	ldr	r1, [pc, #60]	; (800175c <SystemInit+0x40>)
 800171e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001722:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <SystemInit+0x44>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001734:	2000      	movs	r0, #0
 8001736:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800173e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001742:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <SystemInit+0x48>)
 8001746:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800174e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001750:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001752:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001756:	608b      	str	r3, [r1, #8]
#endif
}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00
 8001760:	40023800 	.word	0x40023800
 8001764:	24003010 	.word	0x24003010

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b510      	push	{r4, lr}
 800176a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800176c:	f000 fe70 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_InitTick+0x24>)
 8001772:	fba3 3000 	umull	r3, r0, r3, r0
 8001776:	0980      	lsrs	r0, r0, #6
 8001778:	f000 f8d0 	bl	800191c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800177c:	2200      	movs	r2, #0
 800177e:	4621      	mov	r1, r4
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f000 f858 	bl	8001838 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001788:	2000      	movs	r0, #0
 800178a:	bd10      	pop	{r4, pc}
 800178c:	10624dd3 	.word	0x10624dd3

08001790 <HAL_Init>:
{
 8001790:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_Init+0x30>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800179a:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017a2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017aa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f825 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff ffd8 	bl	8001768 <HAL_InitTick>
  HAL_MspInit();
 80017b8:	f002 fbb5 	bl	8003f26 <HAL_MspInit>
}
 80017bc:	2000      	movs	r0, #0
 80017be:	bd08      	pop	{r3, pc}
 80017c0:	40023c00 	.word	0x40023c00

080017c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80017c4:	4a02      	ldr	r2, [pc, #8]	; (80017d0 <HAL_IncTick+0xc>)
 80017c6:	6813      	ldr	r3, [r2, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200004c4 	.word	0x200004c4

080017d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017d4:	4b01      	ldr	r3, [pc, #4]	; (80017dc <HAL_GetTick+0x8>)
 80017d6:	6818      	ldr	r0, [r3, #0]
}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200004c4 	.word	0x200004c4

080017e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80017e0:	b510      	push	{r4, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80017e6:	f7ff fff5 	bl	80017d4 <HAL_GetTick>
 80017ea:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80017ec:	f7ff fff2 	bl	80017d4 <HAL_GetTick>
 80017f0:	9b01      	ldr	r3, [sp, #4]
 80017f2:	1b00      	subs	r0, r0, r4
 80017f4:	4298      	cmp	r0, r3
 80017f6:	d3f9      	bcc.n	80017ec <HAL_Delay+0xc>
  {
  }
}
 80017f8:	b002      	add	sp, #8
 80017fa:	bd10      	pop	{r4, pc}

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b510      	push	{r4, lr}
 80017fe:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001800:	1ec3      	subs	r3, r0, #3
 8001802:	2b04      	cmp	r3, #4
 8001804:	d80e      	bhi.n	8001824 <HAL_NVIC_SetPriorityGrouping+0x28>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001806:	490a      	ldr	r1, [pc, #40]	; (8001830 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8001808:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 800180a:	0223      	lsls	r3, r4, #8
 800180c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8001810:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001814:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001816:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001820:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001822:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001824:	21a4      	movs	r1, #164	; 0xa4
 8001826:	4803      	ldr	r0, [pc, #12]	; (8001834 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8001828:	f002 fb7c 	bl	8003f24 <assert_failed>
 800182c:	e7eb      	b.n	8001806 <HAL_NVIC_SetPriorityGrouping+0xa>
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	08004494 	.word	0x08004494

08001838 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001838:	b570      	push	{r4, r5, r6, lr}
 800183a:	4605      	mov	r5, r0
 800183c:	460c      	mov	r4, r1
 800183e:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001840:	2a0f      	cmp	r2, #15
 8001842:	d826      	bhi.n	8001892 <HAL_NVIC_SetPriority+0x5a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001844:	2c0f      	cmp	r4, #15
 8001846:	d829      	bhi.n	800189c <HAL_NVIC_SetPriority+0x64>

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <HAL_NVIC_SetPriority+0x7c>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	f1c3 0207 	rsb	r2, r3, #7
 8001854:	2a04      	cmp	r2, #4
 8001856:	bf28      	it	cs
 8001858:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	1d19      	adds	r1, r3, #4
 800185c:	2906      	cmp	r1, #6
 800185e:	bf8c      	ite	hi
 8001860:	3b03      	subhi	r3, #3
 8001862:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	ea24 0402 	bic.w	r4, r4, r2
 8001870:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187a:	4334      	orrs	r4, r6
  if((int32_t)IRQn < 0) {
 800187c:	2d00      	cmp	r5, #0
 800187e:	db12      	blt.n	80018a6 <HAL_NVIC_SetPriority+0x6e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	0124      	lsls	r4, r4, #4
 8001882:	b2e4      	uxtb	r4, r4
 8001884:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8001888:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 800188c:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001890:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001892:	21bc      	movs	r1, #188	; 0xbc
 8001894:	4808      	ldr	r0, [pc, #32]	; (80018b8 <HAL_NVIC_SetPriority+0x80>)
 8001896:	f002 fb45 	bl	8003f24 <assert_failed>
 800189a:	e7d3      	b.n	8001844 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800189c:	21bd      	movs	r1, #189	; 0xbd
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <HAL_NVIC_SetPriority+0x80>)
 80018a0:	f002 fb40 	bl	8003f24 <assert_failed>
 80018a4:	e7d0      	b.n	8001848 <HAL_NVIC_SetPriority+0x10>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	f005 050f 	and.w	r5, r5, #15
 80018aa:	0124      	lsls	r4, r4, #4
 80018ac:	b2e4      	uxtb	r4, r4
 80018ae:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_NVIC_SetPriority+0x84>)
 80018b0:	555c      	strb	r4, [r3, r5]
 80018b2:	e7ed      	b.n	8001890 <HAL_NVIC_SetPriority+0x58>
 80018b4:	e000ed00 	.word	0xe000ed00
 80018b8:	08004494 	.word	0x08004494
 80018bc:	e000ed14 	.word	0xe000ed14

080018c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80018c2:	1e04      	subs	r4, r0, #0
 80018c4:	db09      	blt.n	80018da <HAL_NVIC_EnableIRQ+0x1a>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80018c6:	0962      	lsrs	r2, r4, #5
 80018c8:	f004 041f 	and.w	r4, r4, #31
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f404 	lsl.w	r4, r0, r4
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HAL_NVIC_EnableIRQ+0x24>)
 80018d4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80018d8:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80018da:	21d0      	movs	r1, #208	; 0xd0
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <HAL_NVIC_EnableIRQ+0x28>)
 80018de:	f002 fb21 	bl	8003f24 <assert_failed>
 80018e2:	e7f0      	b.n	80018c6 <HAL_NVIC_EnableIRQ+0x6>
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	08004494 	.word	0x08004494

080018ec <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018ec:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80018ee:	1e04      	subs	r4, r0, #0
 80018f0:	db0a      	blt.n	8001908 <HAL_NVIC_DisableIRQ+0x1c>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80018f2:	0963      	lsrs	r3, r4, #5
 80018f4:	f004 041f 	and.w	r4, r4, #31
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f404 	lsl.w	r4, r0, r4
 80018fe:	3320      	adds	r3, #32
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_NVIC_DisableIRQ+0x28>)
 8001902:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001906:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001908:	21e0      	movs	r1, #224	; 0xe0
 800190a:	4803      	ldr	r0, [pc, #12]	; (8001918 <HAL_NVIC_DisableIRQ+0x2c>)
 800190c:	f002 fb0a 	bl	8003f24 <assert_failed>
 8001910:	e7ef      	b.n	80018f2 <HAL_NVIC_DisableIRQ+0x6>
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100
 8001918:	08004494 	.word	0x08004494

0800191c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800191c:	3801      	subs	r0, #1
 800191e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001922:	d20b      	bcs.n	800193c <HAL_SYSTICK_Config+0x20>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001924:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001928:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <HAL_SYSTICK_Config+0x24>)
 800192c:	21f0      	movs	r1, #240	; 0xf0
 800192e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001932:	2000      	movs	r0, #0
 8001934:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	2207      	movs	r2, #7
 8001938:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193a:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800193c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001944:	4770      	bx	lr

08001946 <HAL_SYSTICK_IRQHandler>:
{
 8001946:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001948:	f7ff fffc 	bl	8001944 <HAL_SYSTICK_Callback>
}
 800194c:	bd08      	pop	{r3, pc}
	...

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001954:	b083      	sub	sp, #12
 8001956:	4607      	mov	r7, r0
 8001958:	460e      	mov	r6, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800195a:	4b8d      	ldr	r3, [pc, #564]	; (8001b90 <HAL_GPIO_Init+0x240>)
 800195c:	4298      	cmp	r0, r3
 800195e:	d017      	beq.n	8001990 <HAL_GPIO_Init+0x40>
 8001960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001964:	4298      	cmp	r0, r3
 8001966:	d013      	beq.n	8001990 <HAL_GPIO_Init+0x40>
 8001968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800196c:	4298      	cmp	r0, r3
 800196e:	d00f      	beq.n	8001990 <HAL_GPIO_Init+0x40>
 8001970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001974:	4298      	cmp	r0, r3
 8001976:	d00b      	beq.n	8001990 <HAL_GPIO_Init+0x40>
 8001978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800197c:	4298      	cmp	r0, r3
 800197e:	d007      	beq.n	8001990 <HAL_GPIO_Init+0x40>
 8001980:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001984:	4298      	cmp	r0, r3
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x40>
 8001988:	21c5      	movs	r1, #197	; 0xc5
 800198a:	4882      	ldr	r0, [pc, #520]	; (8001b94 <HAL_GPIO_Init+0x244>)
 800198c:	f002 faca 	bl	8003f24 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001990:	8833      	ldrh	r3, [r6, #0]
 8001992:	b30b      	cbz	r3, 80019d8 <HAL_GPIO_Init+0x88>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001994:	6873      	ldr	r3, [r6, #4]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d917      	bls.n	80019ca <HAL_GPIO_Init+0x7a>
 800199a:	f1a3 0211 	sub.w	r2, r3, #17
 800199e:	2a01      	cmp	r2, #1
 80019a0:	d913      	bls.n	80019ca <HAL_GPIO_Init+0x7a>
 80019a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80019a6:	497c      	ldr	r1, [pc, #496]	; (8001b98 <HAL_GPIO_Init+0x248>)
 80019a8:	428a      	cmp	r2, r1
 80019aa:	d00e      	beq.n	80019ca <HAL_GPIO_Init+0x7a>
 80019ac:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80019b0:	428b      	cmp	r3, r1
 80019b2:	d00a      	beq.n	80019ca <HAL_GPIO_Init+0x7a>
 80019b4:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 80019b8:	428a      	cmp	r2, r1
 80019ba:	d006      	beq.n	80019ca <HAL_GPIO_Init+0x7a>
 80019bc:	4a77      	ldr	r2, [pc, #476]	; (8001b9c <HAL_GPIO_Init+0x24c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x7a>
 80019c2:	21c7      	movs	r1, #199	; 0xc7
 80019c4:	4873      	ldr	r0, [pc, #460]	; (8001b94 <HAL_GPIO_Init+0x244>)
 80019c6:	f002 faad 	bl	8003f24 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80019ca:	68b3      	ldr	r3, [r6, #8]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d808      	bhi.n	80019e2 <HAL_GPIO_Init+0x92>
{
 80019d0:	2400      	movs	r4, #0
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019d2:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8001ba8 <HAL_GPIO_Init+0x258>
 80019d6:	e05f      	b.n	8001a98 <HAL_GPIO_Init+0x148>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80019d8:	21c6      	movs	r1, #198	; 0xc6
 80019da:	486e      	ldr	r0, [pc, #440]	; (8001b94 <HAL_GPIO_Init+0x244>)
 80019dc:	f002 faa2 	bl	8003f24 <assert_failed>
 80019e0:	e7d8      	b.n	8001994 <HAL_GPIO_Init+0x44>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80019e2:	21c8      	movs	r1, #200	; 0xc8
 80019e4:	486b      	ldr	r0, [pc, #428]	; (8001b94 <HAL_GPIO_Init+0x244>)
 80019e6:	f002 fa9d 	bl	8003f24 <assert_failed>
 80019ea:	e7f1      	b.n	80019d0 <HAL_GPIO_Init+0x80>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80019ec:	6933      	ldr	r3, [r6, #16]
 80019ee:	2b0f      	cmp	r3, #15
 80019f0:	d816      	bhi.n	8001a20 <HAL_GPIO_Init+0xd0>
 80019f2:	f249 72f7 	movw	r2, #38903	; 0x97f7
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	f013 0f01 	tst.w	r3, #1
 80019fe:	d00f      	beq.n	8001a20 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3];
 8001a00:	08e2      	lsrs	r2, r4, #3
 8001a02:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001a06:	6a10      	ldr	r0, [r2, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a08:	f004 0307 	and.w	r3, r4, #7
 8001a0c:	0099      	lsls	r1, r3, #2
 8001a0e:	230f      	movs	r3, #15
 8001a10:	408b      	lsls	r3, r1
 8001a12:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a16:	6933      	ldr	r3, [r6, #16]
 8001a18:	408b      	lsls	r3, r1
 8001a1a:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	e048      	b.n	8001ab2 <HAL_GPIO_Init+0x162>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001a20:	21d9      	movs	r1, #217	; 0xd9
 8001a22:	485c      	ldr	r0, [pc, #368]	; (8001b94 <HAL_GPIO_Init+0x244>)
 8001a24:	f002 fa7e 	bl	8003f24 <assert_failed>
 8001a28:	e7ea      	b.n	8001a00 <HAL_GPIO_Init+0xb0>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001a2a:	21ec      	movs	r1, #236	; 0xec
 8001a2c:	4859      	ldr	r0, [pc, #356]	; (8001b94 <HAL_GPIO_Init+0x244>)
 8001a2e:	f002 fa79 	bl	8003f24 <assert_failed>
 8001a32:	e058      	b.n	8001ae6 <HAL_GPIO_Init+0x196>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a34:	2200      	movs	r2, #0
 8001a36:	408a      	lsls	r2, r1
 8001a38:	4302      	orrs	r2, r0
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a3a:	609a      	str	r2, [r3, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3c:	4b58      	ldr	r3, [pc, #352]	; (8001ba0 <HAL_GPIO_Init+0x250>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001a40:	ea6f 010a 	mvn.w	r1, sl
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a44:	6873      	ldr	r3, [r6, #4]
 8001a46:	f413 3f80 	tst.w	r3, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	bf0c      	ite	eq
 8001a4c:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8001a4e:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8001a52:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_GPIO_Init+0x250>)
 8001a54:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a56:	685a      	ldr	r2, [r3, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a58:	6873      	ldr	r3, [r6, #4]
 8001a5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	bf0c      	ite	eq
 8001a60:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8001a62:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->EMR = temp;
 8001a66:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <HAL_GPIO_Init+0x250>)
 8001a68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a6a:	689a      	ldr	r2, [r3, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a6c:	6873      	ldr	r3, [r6, #4]
 8001a6e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001a72:	bf0c      	ite	eq
 8001a74:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8001a76:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->RTSR = temp;
 8001a7a:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_GPIO_Init+0x250>)
 8001a7c:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a7e:	68db      	ldr	r3, [r3, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a80:	6872      	ldr	r2, [r6, #4]
 8001a82:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001a86:	bf0c      	ite	eq
 8001a88:	400b      	andeq	r3, r1
        {
          temp |= iocurrent;
 8001a8a:	ea4a 0303 	orrne.w	r3, sl, r3
        }
        EXTI->FTSR = temp;
 8001a8e:	4a44      	ldr	r2, [pc, #272]	; (8001ba0 <HAL_GPIO_Init+0x250>)
 8001a90:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a92:	3401      	adds	r4, #1
 8001a94:	2c10      	cmp	r4, #16
 8001a96:	d077      	beq.n	8001b88 <HAL_GPIO_Init+0x238>
    ioposition = ((uint32_t)0x01) << position;
 8001a98:	2501      	movs	r5, #1
 8001a9a:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9c:	6833      	ldr	r3, [r6, #0]
 8001a9e:	ea05 0a03 	and.w	sl, r5, r3
    if(iocurrent == ioposition)
 8001aa2:	ea35 0303 	bics.w	r3, r5, r3
 8001aa6:	d1f4      	bne.n	8001a92 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa8:	6873      	ldr	r3, [r6, #4]
 8001aaa:	f023 0310 	bic.w	r3, r3, #16
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d09c      	beq.n	80019ec <HAL_GPIO_Init+0x9c>
      temp = GPIOx->MODER;
 8001ab2:	683a      	ldr	r2, [r7, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ab4:	ea4f 0944 	mov.w	r9, r4, lsl #1
 8001ab8:	2303      	movs	r3, #3
 8001aba:	fa03 f309 	lsl.w	r3, r3, r9
 8001abe:	ea6f 0803 	mvn.w	r8, r3
 8001ac2:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ac6:	6873      	ldr	r3, [r6, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	fa03 f309 	lsl.w	r3, r3, r9
 8001ad0:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8001ad2:	603b      	str	r3, [r7, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad4:	6873      	ldr	r3, [r6, #4]
 8001ad6:	f023 0310 	bic.w	r3, r3, #16
 8001ada:	3b01      	subs	r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d813      	bhi.n	8001b08 <HAL_GPIO_Init+0x1b8>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001ae0:	68f3      	ldr	r3, [r6, #12]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d8a1      	bhi.n	8001a2a <HAL_GPIO_Init+0xda>
        temp = GPIOx->OSPEEDR; 
 8001ae6:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ae8:	ea08 0202 	and.w	r2, r8, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8001aec:	68f3      	ldr	r3, [r6, #12]
 8001aee:	fa03 f309 	lsl.w	r3, r3, r9
 8001af2:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8001af4:	60bb      	str	r3, [r7, #8]
        temp = GPIOx->OTYPER;
 8001af6:	687a      	ldr	r2, [r7, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af8:	ea22 0205 	bic.w	r2, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001afc:	6873      	ldr	r3, [r6, #4]
 8001afe:	f3c3 1500 	ubfx	r5, r3, #4, #1
 8001b02:	40a5      	lsls	r5, r4
 8001b04:	4315      	orrs	r5, r2
        GPIOx->OTYPER = temp;
 8001b06:	607d      	str	r5, [r7, #4]
      temp = GPIOx->PUPDR;
 8001b08:	68fb      	ldr	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b0a:	ea08 0803 	and.w	r8, r8, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b0e:	68b3      	ldr	r3, [r6, #8]
 8001b10:	fa03 f309 	lsl.w	r3, r3, r9
 8001b14:	ea43 0308 	orr.w	r3, r3, r8
      GPIOx->PUPDR = temp;
 8001b18:	60fb      	str	r3, [r7, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1a:	6873      	ldr	r3, [r6, #4]
 8001b1c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001b20:	d0b7      	beq.n	8001a92 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <HAL_GPIO_Init+0x254>)
 8001b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b2a:	645a      	str	r2, [r3, #68]	; 0x44
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001b36:	f024 0303 	bic.w	r3, r4, #3
 8001b3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b3e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001b42:	6898      	ldr	r0, [r3, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b44:	f004 0203 	and.w	r2, r4, #3
 8001b48:	0091      	lsls	r1, r2, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	408a      	lsls	r2, r1
 8001b4e:	ea20 0002 	bic.w	r0, r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b52:	4a0f      	ldr	r2, [pc, #60]	; (8001b90 <HAL_GPIO_Init+0x240>)
 8001b54:	4297      	cmp	r7, r2
 8001b56:	f43f af6d 	beq.w	8001a34 <HAL_GPIO_Init+0xe4>
 8001b5a:	455f      	cmp	r7, fp
 8001b5c:	d00e      	beq.n	8001b7c <HAL_GPIO_Init+0x22c>
 8001b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b62:	4297      	cmp	r7, r2
 8001b64:	d00c      	beq.n	8001b80 <HAL_GPIO_Init+0x230>
 8001b66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b6a:	4297      	cmp	r7, r2
 8001b6c:	d00a      	beq.n	8001b84 <HAL_GPIO_Init+0x234>
 8001b6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b72:	4297      	cmp	r7, r2
 8001b74:	bf0c      	ite	eq
 8001b76:	2204      	moveq	r2, #4
 8001b78:	2205      	movne	r2, #5
 8001b7a:	e75c      	b.n	8001a36 <HAL_GPIO_Init+0xe6>
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	e75a      	b.n	8001a36 <HAL_GPIO_Init+0xe6>
 8001b80:	2202      	movs	r2, #2
 8001b82:	e758      	b.n	8001a36 <HAL_GPIO_Init+0xe6>
 8001b84:	2203      	movs	r2, #3
 8001b86:	e756      	b.n	8001a36 <HAL_GPIO_Init+0xe6>
      }
    }
  }
}
 8001b88:	b003      	add	sp, #12
 8001b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b8e:	bf00      	nop
 8001b90:	40020000 	.word	0x40020000
 8001b94:	08004510 	.word	0x08004510
 8001b98:	10110000 	.word	0x10110000
 8001b9c:	10220000 	.word	0x10220000
 8001ba0:	40013c00 	.word	0x40013c00
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020400 	.word	0x40020400

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b570      	push	{r4, r5, r6, lr}
 8001bae:	4605      	mov	r5, r0
 8001bb0:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001bb2:	460e      	mov	r6, r1
 8001bb4:	b129      	cbz	r1, 8001bc2 <HAL_GPIO_WritePin+0x16>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001bb6:	2c01      	cmp	r4, #1
 8001bb8:	d809      	bhi.n	8001bce <HAL_GPIO_WritePin+0x22>

  if(PinState != GPIO_PIN_RESET)
 8001bba:	b96c      	cbnz	r4, 8001bd8 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bbc:	0436      	lsls	r6, r6, #16
 8001bbe:	61ae      	str	r6, [r5, #24]
  }
}
 8001bc0:	e00b      	b.n	8001bda <HAL_GPIO_WritePin+0x2e>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001bc2:	f240 11b1 	movw	r1, #433	; 0x1b1
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <HAL_GPIO_WritePin+0x30>)
 8001bc8:	f002 f9ac 	bl	8003f24 <assert_failed>
 8001bcc:	e7f3      	b.n	8001bb6 <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001bce:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8001bd2:	4802      	ldr	r0, [pc, #8]	; (8001bdc <HAL_GPIO_WritePin+0x30>)
 8001bd4:	f002 f9a6 	bl	8003f24 <assert_failed>
    GPIOx->BSRR = GPIO_Pin;
 8001bd8:	61ae      	str	r6, [r5, #24]
}
 8001bda:	bd70      	pop	{r4, r5, r6, pc}
 8001bdc:	08004510 	.word	0x08004510

08001be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	4203      	tst	r3, r0
 8001be8:	d100      	bne.n	8001bec <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8001bea:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bec:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001bee:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf0:	f001 fb56 	bl	80032a0 <HAL_GPIO_EXTI_Callback>
}
 8001bf4:	e7f9      	b.n	8001bea <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001bf6:	bf00      	nop
 8001bf8:	40013c00 	.word	0x40013c00

08001bfc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	4604      	mov	r4, r0
 uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001c02:	6803      	ldr	r3, [r0, #0]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d84f      	bhi.n	8001ca8 <HAL_RCC_OscConfig+0xac>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	f013 0f01 	tst.w	r3, #1
 8001c0e:	d01e      	beq.n	8001c4e <HAL_RCC_OscConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001c10:	6863      	ldr	r3, [r4, #4]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1e>
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d14c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xb8>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c1a:	4ba6      	ldr	r3, [pc, #664]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d00a      	beq.n	8001c3c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c26:	4ba3      	ldr	r3, [pc, #652]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d146      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c32:	4ba0      	ldr	r3, [pc, #640]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c3a:	d041      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xc4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	4b9d      	ldr	r3, [pc, #628]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_OscConfig+0x52>
 8001c46:	6863      	ldr	r3, [r4, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 820d 	beq.w	8002068 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	f013 0f02 	tst.w	r3, #2
 8001c54:	f000 8096 	beq.w	8001d84 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001c58:	68e3      	ldr	r3, [r4, #12]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d86b      	bhi.n	8001d36 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001c5e:	6923      	ldr	r3, [r4, #16]
 8001c60:	2b1f      	cmp	r3, #31
 8001c62:	d86e      	bhi.n	8001d42 <HAL_RCC_OscConfig+0x146>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c64:	4b93      	ldr	r3, [pc, #588]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f013 0f0c 	tst.w	r3, #12
 8001c6c:	d074      	beq.n	8001d58 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6e:	4b91      	ldr	r3, [pc, #580]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d069      	beq.n	8001d4e <HAL_RCC_OscConfig+0x152>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c7a:	68e3      	ldr	r3, [r4, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80ac 	beq.w	8001dda <HAL_RCC_OscConfig+0x1de>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c82:	4b8d      	ldr	r3, [pc, #564]	; (8001eb8 <HAL_RCC_OscConfig+0x2bc>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff fda4 	bl	80017d4 <HAL_GetTick>
 8001c8c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	4e89      	ldr	r6, [pc, #548]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001c90:	6833      	ldr	r3, [r6, #0]
 8001c92:	f013 0f02 	tst.w	r3, #2
 8001c96:	f040 8092 	bne.w	8001dbe <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff fd9b 	bl	80017d4 <HAL_GetTick>
 8001c9e:	1b40      	subs	r0, r0, r5
 8001ca0:	2864      	cmp	r0, #100	; 0x64
 8001ca2:	d9f5      	bls.n	8001c90 <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	e1e4      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cac:	4883      	ldr	r0, [pc, #524]	; (8001ebc <HAL_RCC_OscConfig+0x2c0>)
 8001cae:	f002 f939 	bl	8003f24 <assert_failed>
 8001cb2:	e7a9      	b.n	8001c08 <HAL_RCC_OscConfig+0xc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001cb4:	f240 1105 	movw	r1, #261	; 0x105
 8001cb8:	4880      	ldr	r0, [pc, #512]	; (8001ebc <HAL_RCC_OscConfig+0x2c0>)
 8001cba:	f002 f933 	bl	8003f24 <assert_failed>
 8001cbe:	e7ac      	b.n	8001c1a <HAL_RCC_OscConfig+0x1e>
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8001cc0:	4b7c      	ldr	r3, [pc, #496]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	709a      	strb	r2, [r3, #2]
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fd85 	bl	80017d4 <HAL_GetTick>
 8001cca:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ccc:	4e79      	ldr	r6, [pc, #484]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cce:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	6833      	ldr	r3, [r6, #0]
 8001cd4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001cd8:	d006      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xec>
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cda:	f7ff fd7b 	bl	80017d4 <HAL_GetTick>
 8001cde:	1b40      	subs	r0, r0, r5
 8001ce0:	42b8      	cmp	r0, r7
 8001ce2:	d9f6      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xd6>
          return HAL_TIMEOUT;
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	e1c4      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	7922      	ldrb	r2, [r4, #4]
 8001cea:	4b72      	ldr	r3, [pc, #456]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001cec:	709a      	strb	r2, [r3, #2]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cee:	6863      	ldr	r3, [r4, #4]
 8001cf0:	b183      	cbz	r3, 8001d14 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fd6f 	bl	80017d4 <HAL_GetTick>
 8001cf6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf8:	4e6e      	ldr	r6, [pc, #440]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfa:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	6833      	ldr	r3, [r6, #0]
 8001d00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d04:	d1a3      	bne.n	8001c4e <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d06:	f7ff fd65 	bl	80017d4 <HAL_GetTick>
 8001d0a:	1b40      	subs	r0, r0, r5
 8001d0c:	42b8      	cmp	r0, r7
 8001d0e:	d9f6      	bls.n	8001cfe <HAL_RCC_OscConfig+0x102>
            return HAL_TIMEOUT;
 8001d10:	2003      	movs	r0, #3
 8001d12:	e1ae      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
        tickstart = HAL_GetTick();
 8001d14:	f7ff fd5e 	bl	80017d4 <HAL_GetTick>
 8001d18:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	4e66      	ldr	r6, [pc, #408]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1c:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d20:	6833      	ldr	r3, [r6, #0]
 8001d22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d26:	d092      	beq.n	8001c4e <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fd54 	bl	80017d4 <HAL_GetTick>
 8001d2c:	1b40      	subs	r0, r0, r5
 8001d2e:	42b8      	cmp	r0, r7
 8001d30:	d9f6      	bls.n	8001d20 <HAL_RCC_OscConfig+0x124>
            return HAL_TIMEOUT;
 8001d32:	2003      	movs	r0, #3
 8001d34:	e19d      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001d36:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001d3a:	4860      	ldr	r0, [pc, #384]	; (8001ebc <HAL_RCC_OscConfig+0x2c0>)
 8001d3c:	f002 f8f2 	bl	8003f24 <assert_failed>
 8001d40:	e78d      	b.n	8001c5e <HAL_RCC_OscConfig+0x62>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001d42:	f240 1147 	movw	r1, #327	; 0x147
 8001d46:	485d      	ldr	r0, [pc, #372]	; (8001ebc <HAL_RCC_OscConfig+0x2c0>)
 8001d48:	f002 f8ec 	bl	8003f24 <assert_failed>
 8001d4c:	e78a      	b.n	8001c64 <HAL_RCC_OscConfig+0x68>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d4e:	4b59      	ldr	r3, [pc, #356]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001d56:	d190      	bne.n	8001c7a <HAL_RCC_OscConfig+0x7e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d58:	4b56      	ldr	r3, [pc, #344]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f013 0f02 	tst.w	r3, #2
 8001d60:	d003      	beq.n	8001d6a <HAL_RCC_OscConfig+0x16e>
 8001d62:	68e3      	ldr	r3, [r4, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	f040 8181 	bne.w	800206c <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4852      	ldr	r0, [pc, #328]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001d6c:	6801      	ldr	r1, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	23f8      	movs	r3, #248	; 0xf8
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	fab3 f283 	clz	r2, r3
 8001d78:	6923      	ldr	r3, [r4, #16]
 8001d7a:	4093      	lsls	r3, r2
 8001d7c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001d80:	4313      	orrs	r3, r2
 8001d82:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	f013 0f08 	tst.w	r3, #8
 8001d8a:	d051      	beq.n	8001e30 <HAL_RCC_OscConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001d8c:	6963      	ldr	r3, [r4, #20]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d835      	bhi.n	8001dfe <HAL_RCC_OscConfig+0x202>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d92:	6963      	ldr	r3, [r4, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d038      	beq.n	8001e0a <HAL_RCC_OscConfig+0x20e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d98:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_RCC_OscConfig+0x2bc>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7ff fd18 	bl	80017d4 <HAL_GetTick>
 8001da4:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da6:	4e43      	ldr	r6, [pc, #268]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001da8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001daa:	f013 0f02 	tst.w	r3, #2
 8001dae:	d13f      	bne.n	8001e30 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff fd10 	bl	80017d4 <HAL_GetTick>
 8001db4:	1b40      	subs	r0, r0, r5
 8001db6:	2864      	cmp	r0, #100	; 0x64
 8001db8:	d9f6      	bls.n	8001da8 <HAL_RCC_OscConfig+0x1ac>
        {
          return HAL_TIMEOUT;
 8001dba:	2003      	movs	r0, #3
 8001dbc:	e159      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	483d      	ldr	r0, [pc, #244]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001dc0:	6801      	ldr	r1, [r0, #0]
 8001dc2:	23f8      	movs	r3, #248	; 0xf8
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	fab3 f283 	clz	r2, r3
 8001dcc:	6923      	ldr	r3, [r4, #16]
 8001dce:	4093      	lsls	r3, r2
 8001dd0:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	6003      	str	r3, [r0, #0]
 8001dd8:	e7d4      	b.n	8001d84 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_DISABLE();
 8001dda:	4b37      	ldr	r3, [pc, #220]	; (8001eb8 <HAL_RCC_OscConfig+0x2bc>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001de0:	f7ff fcf8 	bl	80017d4 <HAL_GetTick>
 8001de4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	4e33      	ldr	r6, [pc, #204]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001de8:	6833      	ldr	r3, [r6, #0]
 8001dea:	f013 0f02 	tst.w	r3, #2
 8001dee:	d0c9      	beq.n	8001d84 <HAL_RCC_OscConfig+0x188>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df0:	f7ff fcf0 	bl	80017d4 <HAL_GetTick>
 8001df4:	1b40      	subs	r0, r0, r5
 8001df6:	2864      	cmp	r0, #100	; 0x64
 8001df8:	d9f6      	bls.n	8001de8 <HAL_RCC_OscConfig+0x1ec>
            return HAL_TIMEOUT;
 8001dfa:	2003      	movs	r0, #3
 8001dfc:	e139      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001dfe:	f240 1187 	movw	r1, #391	; 0x187
 8001e02:	482e      	ldr	r0, [pc, #184]	; (8001ebc <HAL_RCC_OscConfig+0x2c0>)
 8001e04:	f002 f88e 	bl	8003f24 <assert_failed>
 8001e08:	e7c3      	b.n	8001d92 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0a:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <HAL_RCC_OscConfig+0x2bc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7ff fcdf 	bl	80017d4 <HAL_GetTick>
 8001e16:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e18:	4e26      	ldr	r6, [pc, #152]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001e1a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001e1c:	f013 0f02 	tst.w	r3, #2
 8001e20:	d006      	beq.n	8001e30 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e22:	f7ff fcd7 	bl	80017d4 <HAL_GetTick>
 8001e26:	1b40      	subs	r0, r0, r5
 8001e28:	2864      	cmp	r0, #100	; 0x64
 8001e2a:	d9f6      	bls.n	8001e1a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	e120      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	f013 0f04 	tst.w	r3, #4
 8001e36:	d06d      	beq.n	8001f14 <HAL_RCC_OscConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001e38:	68a3      	ldr	r3, [r4, #8]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x246>
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d11d      	bne.n	8001e7e <HAL_RCC_OscConfig+0x282>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e56:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <HAL_RCC_OscConfig+0x2c4>)
 8001e58:	6813      	ldr	r3, [r2, #0]
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5e:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e60:	f7ff fcb8 	bl	80017d4 <HAL_GetTick>
 8001e64:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e66:	4e16      	ldr	r6, [pc, #88]	; (8001ec0 <HAL_RCC_OscConfig+0x2c4>)
 8001e68:	6833      	ldr	r3, [r6, #0]
 8001e6a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e6e:	d10c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x28e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e70:	f7ff fcb0 	bl	80017d4 <HAL_GetTick>
 8001e74:	1b40      	subs	r0, r0, r5
 8001e76:	2864      	cmp	r0, #100	; 0x64
 8001e78:	d9f6      	bls.n	8001e68 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_TIMEOUT;
 8001e7a:	2003      	movs	r0, #3
 8001e7c:	e0f9      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001e7e:	f240 11b1 	movw	r1, #433	; 0x1b1
 8001e82:	480e      	ldr	r0, [pc, #56]	; (8001ebc <HAL_RCC_OscConfig+0x2c0>)
 8001e84:	f002 f84e 	bl	8003f24 <assert_failed>
 8001e88:	e7db      	b.n	8001e42 <HAL_RCC_OscConfig+0x246>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e92:	f7ff fc9f 	bl	80017d4 <HAL_GetTick>
 8001e96:	4605      	mov	r5, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	4e06      	ldr	r6, [pc, #24]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f241 3788 	movw	r7, #5000	; 0x1388
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001ea0:	f013 0f02 	tst.w	r3, #2
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x2c8>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7ff fc95 	bl	80017d4 <HAL_GetTick>
 8001eaa:	1b40      	subs	r0, r0, r5
 8001eac:	42b8      	cmp	r0, r7
 8001eae:	d9f6      	bls.n	8001e9e <HAL_RCC_OscConfig+0x2a2>
      {
        return HAL_TIMEOUT;
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	e0de      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	42470000 	.word	0x42470000
 8001ebc:	0800458c 	.word	0x0800458c
 8001ec0:	40007000 	.word	0x40007000
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec4:	7a22      	ldrb	r2, [r4, #8]
 8001ec6:	4b6d      	ldr	r3, [pc, #436]	; (800207c <HAL_RCC_OscConfig+0x480>)
 8001ec8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ecc:	68a3      	ldr	r3, [r4, #8]
 8001ece:	b183      	cbz	r3, 8001ef2 <HAL_RCC_OscConfig+0x2f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fc80 	bl	80017d4 <HAL_GetTick>
 8001ed4:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed6:	4e69      	ldr	r6, [pc, #420]	; (800207c <HAL_RCC_OscConfig+0x480>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed8:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001edc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001ede:	f013 0f02 	tst.w	r3, #2
 8001ee2:	d117      	bne.n	8001f14 <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fc76 	bl	80017d4 <HAL_GetTick>
 8001ee8:	1b40      	subs	r0, r0, r5
 8001eea:	42b8      	cmp	r0, r7
 8001eec:	d9f6      	bls.n	8001edc <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8001eee:	2003      	movs	r0, #3
 8001ef0:	e0bf      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef2:	f7ff fc6f 	bl	80017d4 <HAL_GetTick>
 8001ef6:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef8:	4e60      	ldr	r6, [pc, #384]	; (800207c <HAL_RCC_OscConfig+0x480>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efe:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001f00:	f013 0f02 	tst.w	r3, #2
 8001f04:	d006      	beq.n	8001f14 <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7ff fc65 	bl	80017d4 <HAL_GetTick>
 8001f0a:	1b40      	subs	r0, r0, r5
 8001f0c:	42b8      	cmp	r0, r7
 8001f0e:	d9f6      	bls.n	8001efe <HAL_RCC_OscConfig+0x302>
        {
          return HAL_TIMEOUT;
 8001f10:	2003      	movs	r0, #3
 8001f12:	e0ae      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001f14:	69a3      	ldr	r3, [r4, #24]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d83d      	bhi.n	8001f96 <HAL_RCC_OscConfig+0x39a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1a:	69a3      	ldr	r3, [r4, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a7 	beq.w	8002070 <HAL_RCC_OscConfig+0x474>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f22:	4a56      	ldr	r2, [pc, #344]	; (800207c <HAL_RCC_OscConfig+0x480>)
 8001f24:	6892      	ldr	r2, [r2, #8]
 8001f26:	f002 020c 	and.w	r2, r2, #12
 8001f2a:	2a08      	cmp	r2, #8
 8001f2c:	f000 80a3 	beq.w	8002076 <HAL_RCC_OscConfig+0x47a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	f040 8085 	bne.w	8002040 <HAL_RCC_OscConfig+0x444>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001f36:	69e3      	ldr	r3, [r4, #28]
 8001f38:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8001f3c:	d004      	beq.n	8001f48 <HAL_RCC_OscConfig+0x34c>
 8001f3e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001f42:	484f      	ldr	r0, [pc, #316]	; (8002080 <HAL_RCC_OscConfig+0x484>)
 8001f44:	f001 ffee 	bl	8003f24 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001f48:	6a23      	ldr	r3, [r4, #32]
 8001f4a:	2b3f      	cmp	r3, #63	; 0x3f
 8001f4c:	d829      	bhi.n	8001fa2 <HAL_RCC_OscConfig+0x3a6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f50:	3bc0      	subs	r3, #192	; 0xc0
 8001f52:	2bf0      	cmp	r3, #240	; 0xf0
 8001f54:	d82b      	bhi.n	8001fae <HAL_RCC_OscConfig+0x3b2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001f56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d82e      	bhi.n	8001fba <HAL_RCC_OscConfig+0x3be>
 8001f5c:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
 8001f64:	f013 0f01 	tst.w	r3, #1
 8001f68:	d027      	beq.n	8001fba <HAL_RCC_OscConfig+0x3be>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001f6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f6c:	3b04      	subs	r3, #4
 8001f6e:	2b0b      	cmp	r3, #11
 8001f70:	d829      	bhi.n	8001fc6 <HAL_RCC_OscConfig+0x3ca>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b44      	ldr	r3, [pc, #272]	; (8002084 <HAL_RCC_OscConfig+0x488>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff fc2c 	bl	80017d4 <HAL_GetTick>
 8001f7c:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	4e3f      	ldr	r6, [pc, #252]	; (800207c <HAL_RCC_OscConfig+0x480>)
 8001f80:	6833      	ldr	r3, [r6, #0]
 8001f82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f86:	d024      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff fc24 	bl	80017d4 <HAL_GetTick>
 8001f8c:	1b40      	subs	r0, r0, r5
 8001f8e:	2864      	cmp	r0, #100	; 0x64
 8001f90:	d9f6      	bls.n	8001f80 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001f92:	2003      	movs	r0, #3
 8001f94:	e06d      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001f96:	f240 11f5 	movw	r1, #501	; 0x1f5
 8001f9a:	4839      	ldr	r0, [pc, #228]	; (8002080 <HAL_RCC_OscConfig+0x484>)
 8001f9c:	f001 ffc2 	bl	8003f24 <assert_failed>
 8001fa0:	e7bb      	b.n	8001f1a <HAL_RCC_OscConfig+0x31e>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001fa2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fa6:	4836      	ldr	r0, [pc, #216]	; (8002080 <HAL_RCC_OscConfig+0x484>)
 8001fa8:	f001 ffbc 	bl	8003f24 <assert_failed>
 8001fac:	e7cf      	b.n	8001f4e <HAL_RCC_OscConfig+0x352>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb2:	4833      	ldr	r0, [pc, #204]	; (8002080 <HAL_RCC_OscConfig+0x484>)
 8001fb4:	f001 ffb6 	bl	8003f24 <assert_failed>
 8001fb8:	e7cd      	b.n	8001f56 <HAL_RCC_OscConfig+0x35a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001fba:	f240 2101 	movw	r1, #513	; 0x201
 8001fbe:	4830      	ldr	r0, [pc, #192]	; (8002080 <HAL_RCC_OscConfig+0x484>)
 8001fc0:	f001 ffb0 	bl	8003f24 <assert_failed>
 8001fc4:	e7d1      	b.n	8001f6a <HAL_RCC_OscConfig+0x36e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001fc6:	f240 2102 	movw	r1, #514	; 0x202
 8001fca:	482d      	ldr	r0, [pc, #180]	; (8002080 <HAL_RCC_OscConfig+0x484>)
 8001fcc:	f001 ffaa 	bl	8003f24 <assert_failed>
 8001fd0:	e7cf      	b.n	8001f72 <HAL_RCC_OscConfig+0x376>
 8001fd2:	f647 75c0 	movw	r5, #32704	; 0x7fc0
 8001fd6:	fa95 f5a5 	rbit	r5, r5
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fda:	fab5 f585 	clz	r5, r5
 8001fde:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001fe2:	fa92 f2a2 	rbit	r2, r2
 8001fe6:	fab2 f082 	clz	r0, r2
 8001fea:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001fee:	fa91 f1a1 	rbit	r1, r1
 8001ff2:	fab1 f181 	clz	r1, r1
 8001ff6:	69e3      	ldr	r3, [r4, #28]
 8001ff8:	6a22      	ldr	r2, [r4, #32]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ffe:	40aa      	lsls	r2, r5
 8002000:	4313      	orrs	r3, r2
 8002002:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002004:	0852      	lsrs	r2, r2, #1
 8002006:	3a01      	subs	r2, #1
 8002008:	4082      	lsls	r2, r0
 800200a:	4313      	orrs	r3, r2
 800200c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800200e:	fa02 f101 	lsl.w	r1, r2, r1
 8002012:	430b      	orrs	r3, r1
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_RCC_OscConfig+0x480>)
 8002016:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002018:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <HAL_RCC_OscConfig+0x488>)
 800201a:	2201      	movs	r2, #1
 800201c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff fbd9 	bl	80017d4 <HAL_GetTick>
 8002022:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002024:	4d15      	ldr	r5, [pc, #84]	; (800207c <HAL_RCC_OscConfig+0x480>)
 8002026:	682b      	ldr	r3, [r5, #0]
 8002028:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800202c:	d106      	bne.n	800203c <HAL_RCC_OscConfig+0x440>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202e:	f7ff fbd1 	bl	80017d4 <HAL_GetTick>
 8002032:	1b00      	subs	r0, r0, r4
 8002034:	2864      	cmp	r0, #100	; 0x64
 8002036:	d9f6      	bls.n	8002026 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002038:	2003      	movs	r0, #3
 800203a:	e01a      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800203c:	2000      	movs	r0, #0
 800203e:	e018      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
        __HAL_RCC_PLL_DISABLE();
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_RCC_OscConfig+0x488>)
 8002042:	2200      	movs	r2, #0
 8002044:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002046:	f7ff fbc5 	bl	80017d4 <HAL_GetTick>
 800204a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204c:	4d0b      	ldr	r5, [pc, #44]	; (800207c <HAL_RCC_OscConfig+0x480>)
 800204e:	682b      	ldr	r3, [r5, #0]
 8002050:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002054:	d006      	beq.n	8002064 <HAL_RCC_OscConfig+0x468>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff fbbd 	bl	80017d4 <HAL_GetTick>
 800205a:	1b00      	subs	r0, r0, r4
 800205c:	2864      	cmp	r0, #100	; 0x64
 800205e:	d9f6      	bls.n	800204e <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 8002060:	2003      	movs	r0, #3
 8002062:	e006      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
  return HAL_OK;
 8002064:	2000      	movs	r0, #0
 8002066:	e004      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
        return HAL_ERROR;
 8002068:	2001      	movs	r0, #1
 800206a:	e002      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
        return HAL_ERROR;
 800206c:	2001      	movs	r0, #1
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
  return HAL_OK;
 8002070:	2000      	movs	r0, #0
}
 8002072:	b003      	add	sp, #12
 8002074:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8002076:	2001      	movs	r0, #1
 8002078:	e7fb      	b.n	8002072 <HAL_RCC_OscConfig+0x476>
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	0800458c 	.word	0x0800458c
 8002084:	42470000 	.word	0x42470000

08002088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800208c:	4604      	mov	r4, r0
 800208e:	460d      	mov	r5, r1
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002090:	6803      	ldr	r3, [r0, #0]
 8002092:	3b01      	subs	r3, #1
 8002094:	2b0e      	cmp	r3, #14
 8002096:	d861      	bhi.n	800215c <HAL_RCC_ClockConfig+0xd4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002098:	2d07      	cmp	r5, #7
 800209a:	d865      	bhi.n	8002168 <HAL_RCC_ClockConfig+0xe0>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800209c:	4ba0      	ldr	r3, [pc, #640]	; (8002320 <HAL_RCC_ClockConfig+0x298>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	42ab      	cmp	r3, r5
 80020a6:	f080 80aa 	bcs.w	80021fe <HAL_RCC_ClockConfig+0x176>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	b2ea      	uxtb	r2, r5
 80020ac:	4b9c      	ldr	r3, [pc, #624]	; (8002320 <HAL_RCC_ClockConfig+0x298>)
 80020ae:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	42ab      	cmp	r3, r5
 80020b8:	f040 817f 	bne.w	80023ba <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	f013 0f02 	tst.w	r3, #2
 80020c2:	d018      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x6e>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80020c4:	68a3      	ldr	r3, [r4, #8]
 80020c6:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80020ca:	d00d      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x60>
 80020cc:	f023 0220 	bic.w	r2, r3, #32
 80020d0:	2a90      	cmp	r2, #144	; 0x90
 80020d2:	d009      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x60>
 80020d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020d8:	2aa0      	cmp	r2, #160	; 0xa0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x60>
 80020dc:	f023 0210 	bic.w	r2, r3, #16
 80020e0:	2ac0      	cmp	r2, #192	; 0xc0
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x60>
 80020e4:	2bf0      	cmp	r3, #240	; 0xf0
 80020e6:	d145      	bne.n	8002174 <HAL_RCC_ClockConfig+0xec>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4a8e      	ldr	r2, [pc, #568]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
 80020ea:	6893      	ldr	r3, [r2, #8]
 80020ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020f0:	68a1      	ldr	r1, [r4, #8]
 80020f2:	430b      	orrs	r3, r1
 80020f4:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	f013 0f01 	tst.w	r3, #1
 80020fc:	f000 811e 	beq.w	800233c <HAL_RCC_ClockConfig+0x2b4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002100:	6863      	ldr	r3, [r4, #4]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d83c      	bhi.n	8002180 <HAL_RCC_ClockConfig+0xf8>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	6862      	ldr	r2, [r4, #4]
 8002108:	2a01      	cmp	r2, #1
 800210a:	d03f      	beq.n	800218c <HAL_RCC_ClockConfig+0x104>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800210c:	1e93      	subs	r3, r2, #2
 800210e:	2b01      	cmp	r3, #1
 8002110:	d943      	bls.n	800219a <HAL_RCC_ClockConfig+0x112>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	4b84      	ldr	r3, [pc, #528]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f013 0f02 	tst.w	r3, #2
 800211a:	f000 8150 	beq.w	80023be <HAL_RCC_ClockConfig+0x336>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4981      	ldr	r1, [pc, #516]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
 8002120:	688b      	ldr	r3, [r1, #8]
 8002122:	f023 0303 	bic.w	r3, r3, #3
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7ff fb53 	bl	80017d4 <HAL_GetTick>
 800212e:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002130:	6863      	ldr	r3, [r4, #4]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d038      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x120>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002136:	2b02      	cmp	r3, #2
 8002138:	d046      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x140>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800213a:	2b03      	cmp	r3, #3
 800213c:	d054      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x160>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800213e:	4e79      	ldr	r6, [pc, #484]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002144:	68b3      	ldr	r3, [r6, #8]
 8002146:	f013 0f0c 	tst.w	r3, #12
 800214a:	f000 80f7 	beq.w	800233c <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214e:	f7ff fb41 	bl	80017d4 <HAL_GetTick>
 8002152:	1b43      	subs	r3, r0, r5
 8002154:	42bb      	cmp	r3, r7
 8002156:	d9f5      	bls.n	8002144 <HAL_RCC_ClockConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002158:	2003      	movs	r0, #3
 800215a:	e12c      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800215c:	f44f 7118 	mov.w	r1, #608	; 0x260
 8002160:	4871      	ldr	r0, [pc, #452]	; (8002328 <HAL_RCC_ClockConfig+0x2a0>)
 8002162:	f001 fedf 	bl	8003f24 <assert_failed>
 8002166:	e797      	b.n	8002098 <HAL_RCC_ClockConfig+0x10>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002168:	f240 2161 	movw	r1, #609	; 0x261
 800216c:	486e      	ldr	r0, [pc, #440]	; (8002328 <HAL_RCC_ClockConfig+0x2a0>)
 800216e:	f001 fed9 	bl	8003f24 <assert_failed>
 8002172:	e793      	b.n	800209c <HAL_RCC_ClockConfig+0x14>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002174:	f240 2177 	movw	r1, #631	; 0x277
 8002178:	486b      	ldr	r0, [pc, #428]	; (8002328 <HAL_RCC_ClockConfig+0x2a0>)
 800217a:	f001 fed3 	bl	8003f24 <assert_failed>
 800217e:	e7b3      	b.n	80020e8 <HAL_RCC_ClockConfig+0x60>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002180:	f240 217e 	movw	r1, #638	; 0x27e
 8002184:	4868      	ldr	r0, [pc, #416]	; (8002328 <HAL_RCC_ClockConfig+0x2a0>)
 8002186:	f001 fecd 	bl	8003f24 <assert_failed>
 800218a:	e7bc      	b.n	8002106 <HAL_RCC_ClockConfig+0x7e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218c:	4b65      	ldr	r3, [pc, #404]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002194:	d1c3      	bne.n	800211e <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 8002196:	2001      	movs	r0, #1
 8002198:	e10d      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219a:	4b62      	ldr	r3, [pc, #392]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021a2:	d1bc      	bne.n	800211e <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 80021a4:	2001      	movs	r0, #1
 80021a6:	e106      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a8:	4e5e      	ldr	r6, [pc, #376]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021aa:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ae:	68b3      	ldr	r3, [r6, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	f000 80c1 	beq.w	800233c <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ba:	f7ff fb0b 	bl	80017d4 <HAL_GetTick>
 80021be:	1b43      	subs	r3, r0, r5
 80021c0:	42bb      	cmp	r3, r7
 80021c2:	d9f4      	bls.n	80021ae <HAL_RCC_ClockConfig+0x126>
            return HAL_TIMEOUT;
 80021c4:	2003      	movs	r0, #3
 80021c6:	e0f6      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c8:	4e56      	ldr	r6, [pc, #344]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ca:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ce:	68b3      	ldr	r3, [r6, #8]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	f000 80b1 	beq.w	800233c <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021da:	f7ff fafb 	bl	80017d4 <HAL_GetTick>
 80021de:	1b40      	subs	r0, r0, r5
 80021e0:	42b8      	cmp	r0, r7
 80021e2:	d9f4      	bls.n	80021ce <HAL_RCC_ClockConfig+0x146>
            return HAL_TIMEOUT;
 80021e4:	2003      	movs	r0, #3
 80021e6:	e0e6      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80021e8:	4e4e      	ldr	r6, [pc, #312]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ea:	f241 3488 	movw	r4, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80021ee:	68b3      	ldr	r3, [r6, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f0:	f7ff faf0 	bl	80017d4 <HAL_GetTick>
 80021f4:	1b40      	subs	r0, r0, r5
 80021f6:	42a0      	cmp	r0, r4
 80021f8:	d9f9      	bls.n	80021ee <HAL_RCC_ClockConfig+0x166>
            return HAL_TIMEOUT;
 80021fa:	2003      	movs	r0, #3
 80021fc:	e0db      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	f013 0f02 	tst.w	r3, #2
 8002204:	d018      	beq.n	8002238 <HAL_RCC_ClockConfig+0x1b0>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002206:	68a3      	ldr	r3, [r4, #8]
 8002208:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 800220c:	d00d      	beq.n	800222a <HAL_RCC_ClockConfig+0x1a2>
 800220e:	f023 0220 	bic.w	r2, r3, #32
 8002212:	2a90      	cmp	r2, #144	; 0x90
 8002214:	d009      	beq.n	800222a <HAL_RCC_ClockConfig+0x1a2>
 8002216:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800221a:	2aa0      	cmp	r2, #160	; 0xa0
 800221c:	d005      	beq.n	800222a <HAL_RCC_ClockConfig+0x1a2>
 800221e:	f023 0210 	bic.w	r2, r3, #16
 8002222:	2ac0      	cmp	r2, #192	; 0xc0
 8002224:	d001      	beq.n	800222a <HAL_RCC_ClockConfig+0x1a2>
 8002226:	2bf0      	cmp	r3, #240	; 0xf0
 8002228:	d137      	bne.n	800229a <HAL_RCC_ClockConfig+0x212>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800222a:	4a3e      	ldr	r2, [pc, #248]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
 800222c:	6893      	ldr	r3, [r2, #8]
 800222e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002232:	68a1      	ldr	r1, [r4, #8]
 8002234:	430b      	orrs	r3, r1
 8002236:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	f013 0f01 	tst.w	r3, #1
 800223e:	d075      	beq.n	800232c <HAL_RCC_ClockConfig+0x2a4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002240:	6863      	ldr	r3, [r4, #4]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d82f      	bhi.n	80022a6 <HAL_RCC_ClockConfig+0x21e>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002246:	6862      	ldr	r2, [r4, #4]
 8002248:	2a01      	cmp	r2, #1
 800224a:	d032      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x22a>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 800224c:	1e93      	subs	r3, r2, #2
 800224e:	2b01      	cmp	r3, #1
 8002250:	d936      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	4b34      	ldr	r3, [pc, #208]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f013 0f02 	tst.w	r3, #2
 800225a:	f000 80b2 	beq.w	80023c2 <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4931      	ldr	r1, [pc, #196]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
 8002260:	688b      	ldr	r3, [r1, #8]
 8002262:	f023 0303 	bic.w	r3, r3, #3
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7ff fab3 	bl	80017d4 <HAL_GetTick>
 800226e:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002270:	6863      	ldr	r3, [r4, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d02b      	beq.n	80022ce <HAL_RCC_ClockConfig+0x246>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002276:	2b02      	cmp	r3, #2
 8002278:	d038      	beq.n	80022ec <HAL_RCC_ClockConfig+0x264>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800227a:	2b03      	cmp	r3, #3
 800227c:	d045      	beq.n	800230a <HAL_RCC_ClockConfig+0x282>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800227e:	4f29      	ldr	r7, [pc, #164]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f013 0f0c 	tst.w	r3, #12
 800228a:	d04f      	beq.n	800232c <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f7ff faa2 	bl	80017d4 <HAL_GetTick>
 8002290:	1b83      	subs	r3, r0, r6
 8002292:	4543      	cmp	r3, r8
 8002294:	d9f6      	bls.n	8002284 <HAL_RCC_ClockConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002296:	2003      	movs	r0, #3
 8002298:	e08d      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800229a:	f240 21d1 	movw	r1, #721	; 0x2d1
 800229e:	4822      	ldr	r0, [pc, #136]	; (8002328 <HAL_RCC_ClockConfig+0x2a0>)
 80022a0:	f001 fe40 	bl	8003f24 <assert_failed>
 80022a4:	e7c1      	b.n	800222a <HAL_RCC_ClockConfig+0x1a2>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80022a6:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 80022aa:	481f      	ldr	r0, [pc, #124]	; (8002328 <HAL_RCC_ClockConfig+0x2a0>)
 80022ac:	f001 fe3a 	bl	8003f24 <assert_failed>
 80022b0:	e7c9      	b.n	8002246 <HAL_RCC_ClockConfig+0x1be>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022ba:	d1d0      	bne.n	800225e <HAL_RCC_ClockConfig+0x1d6>
          return HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
 80022be:	e07a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022c8:	d1c9      	bne.n	800225e <HAL_RCC_ClockConfig+0x1d6>
          return HAL_ERROR;
 80022ca:	2001      	movs	r0, #1
 80022cc:	e073      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ce:	4f15      	ldr	r7, [pc, #84]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d026      	beq.n	800232c <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f7ff fa79 	bl	80017d4 <HAL_GetTick>
 80022e2:	1b83      	subs	r3, r0, r6
 80022e4:	4543      	cmp	r3, r8
 80022e6:	d9f5      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x24c>
            return HAL_TIMEOUT;
 80022e8:	2003      	movs	r0, #3
 80022ea:	e064      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ec:	4f0d      	ldr	r7, [pc, #52]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ee:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d017      	beq.n	800232c <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7ff fa6a 	bl	80017d4 <HAL_GetTick>
 8002300:	1b80      	subs	r0, r0, r6
 8002302:	4540      	cmp	r0, r8
 8002304:	d9f5      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x26a>
            return HAL_TIMEOUT;
 8002306:	2003      	movs	r0, #3
 8002308:	e055      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800230a:	4d06      	ldr	r5, [pc, #24]	; (8002324 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230c:	f241 3488 	movw	r4, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002310:	68ab      	ldr	r3, [r5, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002312:	f7ff fa5f 	bl	80017d4 <HAL_GetTick>
 8002316:	1b80      	subs	r0, r0, r6
 8002318:	42a0      	cmp	r0, r4
 800231a:	d9f9      	bls.n	8002310 <HAL_RCC_ClockConfig+0x288>
            return HAL_TIMEOUT;
 800231c:	2003      	movs	r0, #3
 800231e:	e04a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
 8002320:	40023c00 	.word	0x40023c00
 8002324:	40023800 	.word	0x40023800
 8002328:	0800458c 	.word	0x0800458c
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232c:	b2ea      	uxtb	r2, r5
 800232e:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_RCC_ClockConfig+0x344>)
 8002330:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	42ab      	cmp	r3, r5
 800233a:	d144      	bne.n	80023c6 <HAL_RCC_ClockConfig+0x33e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	f013 0f04 	tst.w	r3, #4
 8002342:	d017      	beq.n	8002374 <HAL_RCC_ClockConfig+0x2ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002344:	68e3      	ldr	r3, [r4, #12]
 8002346:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800234a:	d00c      	beq.n	8002366 <HAL_RCC_ClockConfig+0x2de>
 800234c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002350:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8002354:	d007      	beq.n	8002366 <HAL_RCC_ClockConfig+0x2de>
 8002356:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800235a:	d004      	beq.n	8002366 <HAL_RCC_ClockConfig+0x2de>
 800235c:	f240 3132 	movw	r1, #818	; 0x332
 8002360:	481b      	ldr	r0, [pc, #108]	; (80023d0 <HAL_RCC_ClockConfig+0x348>)
 8002362:	f001 fddf 	bl	8003f24 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002366:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <HAL_RCC_ClockConfig+0x34c>)
 8002368:	6893      	ldr	r3, [r2, #8]
 800236a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800236e:	68e1      	ldr	r1, [r4, #12]
 8002370:	430b      	orrs	r3, r1
 8002372:	6093      	str	r3, [r2, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	f013 0f08 	tst.w	r3, #8
 800237a:	d018      	beq.n	80023ae <HAL_RCC_ClockConfig+0x326>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800237c:	6923      	ldr	r3, [r4, #16]
 800237e:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8002382:	d00c      	beq.n	800239e <HAL_RCC_ClockConfig+0x316>
 8002384:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002388:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 800238c:	d007      	beq.n	800239e <HAL_RCC_ClockConfig+0x316>
 800238e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002392:	d004      	beq.n	800239e <HAL_RCC_ClockConfig+0x316>
 8002394:	f240 3139 	movw	r1, #825	; 0x339
 8002398:	480d      	ldr	r0, [pc, #52]	; (80023d0 <HAL_RCC_ClockConfig+0x348>)
 800239a:	f001 fdc3 	bl	8003f24 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800239e:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <HAL_RCC_ClockConfig+0x34c>)
 80023a0:	6893      	ldr	r3, [r2, #8]
 80023a2:	6921      	ldr	r1, [r4, #16]
 80023a4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80023a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023ac:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7ff f9da 	bl	8001768 <HAL_InitTick>
  
  return HAL_OK;
 80023b4:	2000      	movs	r0, #0
}
 80023b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 80023ba:	2001      	movs	r0, #1
 80023bc:	e7fb      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
          return HAL_ERROR;
 80023be:	2001      	movs	r0, #1
 80023c0:	e7f9      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
          return HAL_ERROR;
 80023c2:	2001      	movs	r0, #1
 80023c4:	e7f7      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
      return HAL_ERROR;
 80023c6:	2001      	movs	r0, #1
 80023c8:	e7f5      	b.n	80023b6 <HAL_RCC_ClockConfig+0x32e>
 80023ca:	bf00      	nop
 80023cc:	40023c00 	.word	0x40023c00
 80023d0:	0800458c 	.word	0x0800458c
 80023d4:	40023800 	.word	0x40023800

080023d8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_RCC_GetSysClockFreq+0x6c>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d02b      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x64>
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d12b      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0x68>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e8:	4b16      	ldr	r3, [pc, #88]	; (8002444 <HAL_RCC_GetSysClockFreq+0x6c>)
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <HAL_RCC_GetSysClockFreq+0x6c>)
 80023f8:	6858      	ldr	r0, [r3, #4]
 80023fa:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80023fe:	fa91 f3a1 	rbit	r3, r1
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	ea00 0001 	and.w	r0, r0, r1
 800240a:	fa20 f003 	lsr.w	r0, r0, r3
 800240e:	bf14      	ite	ne
 8002410:	4b0d      	ldrne	r3, [pc, #52]	; (8002448 <HAL_RCC_GetSysClockFreq+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002412:	4b0e      	ldreq	r3, [pc, #56]	; (800244c <HAL_RCC_GetSysClockFreq+0x74>)
 8002414:	fbb3 f2f2 	udiv	r2, r3, r2
 8002418:	fb02 f000 	mul.w	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_GetSysClockFreq+0x6c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002424:	fa92 f2a2 	rbit	r2, r2
 8002428:	fab2 f282 	clz	r2, r2
 800242c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002430:	40d3      	lsrs	r3, r2
 8002432:	3301      	adds	r3, #1
 8002434:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8002436:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800243a:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <HAL_RCC_GetSysClockFreq+0x70>)
 800243e:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <HAL_RCC_GetSysClockFreq+0x74>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002442:	4770      	bx	lr
 8002444:	40023800 	.word	0x40023800
 8002448:	007a1200 	.word	0x007a1200
 800244c:	00f42400 	.word	0x00f42400

08002450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002450:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002452:	f7ff ffc1 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_RCC_GetHCLKFreq+0x28>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	22f0      	movs	r2, #240	; 0xf0
 800245c:	fa92 f2a2 	rbit	r2, r2
 8002460:	fab2 f282 	clz	r2, r2
 8002464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002468:	40d3      	lsrs	r3, r2
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_RCC_GetHCLKFreq+0x2c>)
 800246c:	5cd3      	ldrb	r3, [r2, r3]
 800246e:	40d8      	lsrs	r0, r3
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_RCC_GetHCLKFreq+0x30>)
 8002472:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8002474:	bd08      	pop	{r3, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	08004484 	.word	0x08004484
 8002480:	20000364 	.word	0x20000364

08002484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8002484:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002486:	f7ff ffe3 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002492:	fa92 f2a2 	rbit	r2, r2
 8002496:	fab2 f282 	clz	r2, r2
 800249a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800249e:	40d3      	lsrs	r3, r2
 80024a0:	4a02      	ldr	r2, [pc, #8]	; (80024ac <HAL_RCC_GetPCLK1Freq+0x28>)
 80024a2:	5cd3      	ldrb	r3, [r2, r3]
}
 80024a4:	40d8      	lsrs	r0, r3
 80024a6:	bd08      	pop	{r3, pc}
 80024a8:	40023800 	.word	0x40023800
 80024ac:	08004484 	.word	0x08004484

080024b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80024b2:	f7ff ffcd 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80024be:	fa92 f2a2 	rbit	r2, r2
 80024c2:	fab2 f282 	clz	r2, r2
 80024c6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80024ca:	40d3      	lsrs	r3, r2
 80024cc:	4a02      	ldr	r2, [pc, #8]	; (80024d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
} 
 80024d0:	40d8      	lsrs	r0, r3
 80024d2:	bd08      	pop	{r3, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	08004484 	.word	0x08004484

080024dc <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 80024dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024e0:	4606      	mov	r6, r0
 80024e2:	460d      	mov	r5, r1
 80024e4:	4690      	mov	r8, r2
 80024e6:	461c      	mov	r4, r3
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80024e8:	f7ff f974 	bl	80017d4 <HAL_GetTick>
 80024ec:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 80024ee:	f1b8 0f00 	cmp.w	r8, #0
 80024f2:	d02e      	beq.n	8002552 <SPI_WaitOnFlagUntilTimeout+0x76>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80024f4:	6832      	ldr	r2, [r6, #0]
 80024f6:	6893      	ldr	r3, [r2, #8]
 80024f8:	ea35 0303 	bics.w	r3, r5, r3
 80024fc:	d15b      	bne.n	80025b6 <SPI_WaitOnFlagUntilTimeout+0xda>
    {
      if(Timeout != HAL_MAX_DELAY)
 80024fe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002502:	d0f8      	beq.n	80024f6 <SPI_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002504:	b124      	cbz	r4, 8002510 <SPI_WaitOnFlagUntilTimeout+0x34>
 8002506:	f7ff f965 	bl	80017d4 <HAL_GetTick>
 800250a:	1bc0      	subs	r0, r0, r7
 800250c:	42a0      	cmp	r0, r4
 800250e:	d9f1      	bls.n	80024f4 <SPI_WaitOnFlagUntilTimeout+0x18>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002510:	6832      	ldr	r2, [r6, #0]
 8002512:	6853      	ldr	r3, [r2, #4]
 8002514:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002518:	6053      	str	r3, [r2, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800251a:	6832      	ldr	r2, [r6, #0]
 800251c:	6813      	ldr	r3, [r2, #0]
 800251e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002522:	6013      	str	r3, [r2, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002524:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252a:	d039      	beq.n	80025a0 <SPI_WaitOnFlagUntilTimeout+0xc4>
          {
            SPI_RESET_CRC(hspi);
          }

          hspi->State= HAL_SPI_STATE_READY;
 800252c:	2301      	movs	r3, #1
 800252e:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8002532:	2300      	movs	r3, #0
 8002534:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50

          return HAL_TIMEOUT;
 8002538:	2003      	movs	r0, #3
 800253a:	e02f      	b.n	800259c <SPI_WaitOnFlagUntilTimeout+0xc0>
            SPI_RESET_CRC(hspi);
 800253c:	6832      	ldr	r2, [r6, #0]
 800253e:	6813      	ldr	r3, [r2, #0]
 8002540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	6832      	ldr	r2, [r6, #0]
 8002548:	6813      	ldr	r3, [r2, #0]
 800254a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e01b      	b.n	800258a <SPI_WaitOnFlagUntilTimeout+0xae>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8002552:	6831      	ldr	r1, [r6, #0]
 8002554:	688b      	ldr	r3, [r1, #8]
 8002556:	ea35 0303 	bics.w	r3, r5, r3
 800255a:	d01e      	beq.n	800259a <SPI_WaitOnFlagUntilTimeout+0xbe>
      if(Timeout != HAL_MAX_DELAY)
 800255c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002560:	d0f8      	beq.n	8002554 <SPI_WaitOnFlagUntilTimeout+0x78>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002562:	b124      	cbz	r4, 800256e <SPI_WaitOnFlagUntilTimeout+0x92>
 8002564:	f7ff f936 	bl	80017d4 <HAL_GetTick>
 8002568:	1bc0      	subs	r0, r0, r7
 800256a:	42a0      	cmp	r0, r4
 800256c:	d9f1      	bls.n	8002552 <SPI_WaitOnFlagUntilTimeout+0x76>
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800256e:	6832      	ldr	r2, [r6, #0]
 8002570:	6853      	ldr	r3, [r2, #4]
 8002572:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002576:	6053      	str	r3, [r2, #4]
          __HAL_SPI_DISABLE(hspi);
 8002578:	6832      	ldr	r2, [r6, #0]
 800257a:	6813      	ldr	r3, [r2, #0]
 800257c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002580:	6013      	str	r3, [r2, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002582:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002588:	d0d8      	beq.n	800253c <SPI_WaitOnFlagUntilTimeout+0x60>
          hspi->State= HAL_SPI_STATE_READY;
 800258a:	2301      	movs	r3, #1
 800258c:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8002590:	2300      	movs	r3, #0
 8002592:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          return HAL_TIMEOUT;
 8002596:	2003      	movs	r0, #3
 8002598:	e000      	b.n	800259c <SPI_WaitOnFlagUntilTimeout+0xc0>
        }
      }
    }
  }
  return HAL_OK;
 800259a:	4640      	mov	r0, r8
}
 800259c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SPI_RESET_CRC(hspi);
 80025a0:	6832      	ldr	r2, [r6, #0]
 80025a2:	6813      	ldr	r3, [r2, #0]
 80025a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	6832      	ldr	r2, [r6, #0]
 80025ac:	6813      	ldr	r3, [r2, #0]
 80025ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e7ba      	b.n	800252c <SPI_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80025b6:	2000      	movs	r0, #0
 80025b8:	e7f0      	b.n	800259c <SPI_WaitOnFlagUntilTimeout+0xc0>
	...

080025bc <HAL_SPI_Init>:
  if(hspi == NULL)
 80025bc:	2800      	cmp	r0, #0
 80025be:	f000 80aa 	beq.w	8002716 <HAL_SPI_Init+0x15a>
{
 80025c2:	b510      	push	{r4, lr}
 80025c4:	4604      	mov	r4, r0
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80025c6:	6843      	ldr	r3, [r0, #4]
 80025c8:	b113      	cbz	r3, 80025d0 <HAL_SPI_Init+0x14>
 80025ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ce:	d17e      	bne.n	80026ce <HAL_SPI_Init+0x112>
  assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
 80025d0:	68a3      	ldr	r3, [r4, #8]
 80025d2:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80025d6:	d002      	beq.n	80025de <HAL_SPI_Init+0x22>
 80025d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025dc:	d17c      	bne.n	80026d8 <HAL_SPI_Init+0x11c>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80025de:	68e3      	ldr	r3, [r4, #12]
 80025e0:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80025e4:	d17d      	bne.n	80026e2 <HAL_SPI_Init+0x126>
  assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80025e6:	6923      	ldr	r3, [r4, #16]
 80025e8:	f033 0302 	bics.w	r3, r3, #2
 80025ec:	d003      	beq.n	80025f6 <HAL_SPI_Init+0x3a>
 80025ee:	21bb      	movs	r1, #187	; 0xbb
 80025f0:	484a      	ldr	r0, [pc, #296]	; (800271c <HAL_SPI_Init+0x160>)
 80025f2:	f001 fc97 	bl	8003f24 <assert_failed>
  assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80025f6:	6963      	ldr	r3, [r4, #20]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d877      	bhi.n	80026ec <HAL_SPI_Init+0x130>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80025fc:	69a3      	ldr	r3, [r4, #24]
 80025fe:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8002602:	d002      	beq.n	800260a <HAL_SPI_Init+0x4e>
 8002604:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002608:	d175      	bne.n	80026f6 <HAL_SPI_Init+0x13a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800260a:	69e3      	ldr	r3, [r4, #28]
 800260c:	f033 0308 	bics.w	r3, r3, #8
 8002610:	d009      	beq.n	8002626 <HAL_SPI_Init+0x6a>
 8002612:	2b10      	cmp	r3, #16
 8002614:	d007      	beq.n	8002626 <HAL_SPI_Init+0x6a>
 8002616:	2b20      	cmp	r3, #32
 8002618:	d005      	beq.n	8002626 <HAL_SPI_Init+0x6a>
 800261a:	2b30      	cmp	r3, #48	; 0x30
 800261c:	d003      	beq.n	8002626 <HAL_SPI_Init+0x6a>
 800261e:	21be      	movs	r1, #190	; 0xbe
 8002620:	483e      	ldr	r0, [pc, #248]	; (800271c <HAL_SPI_Init+0x160>)
 8002622:	f001 fc7f 	bl	8003f24 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8002626:	6a23      	ldr	r3, [r4, #32]
 8002628:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800262c:	d003      	beq.n	8002636 <HAL_SPI_Init+0x7a>
 800262e:	21bf      	movs	r1, #191	; 0xbf
 8002630:	483a      	ldr	r0, [pc, #232]	; (800271c <HAL_SPI_Init+0x160>)
 8002632:	f001 fc77 	bl	8003f24 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8002636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002638:	f033 0310 	bics.w	r3, r3, #16
 800263c:	d003      	beq.n	8002646 <HAL_SPI_Init+0x8a>
 800263e:	21c0      	movs	r1, #192	; 0xc0
 8002640:	4836      	ldr	r0, [pc, #216]	; (800271c <HAL_SPI_Init+0x160>)
 8002642:	f001 fc6f 	bl	8003f24 <assert_failed>
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
 8002646:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002648:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800264c:	d003      	beq.n	8002656 <HAL_SPI_Init+0x9a>
 800264e:	21c1      	movs	r1, #193	; 0xc1
 8002650:	4832      	ldr	r0, [pc, #200]	; (800271c <HAL_SPI_Init+0x160>)
 8002652:	f001 fc67 	bl	8003f24 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 8002656:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002658:	3b01      	subs	r3, #1
 800265a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800265e:	4293      	cmp	r3, r2
 8002660:	d84e      	bhi.n	8002700 <HAL_SPI_Init+0x144>
  if(hspi->State == HAL_SPI_STATE_RESET)
 8002662:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002666:	2b00      	cmp	r3, #0
 8002668:	d04f      	beq.n	800270a <HAL_SPI_Init+0x14e>
  hspi->State = HAL_SPI_STATE_BUSY;
 800266a:	2302      	movs	r3, #2
 800266c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002670:	6822      	ldr	r2, [r4, #0]
 8002672:	6813      	ldr	r3, [r2, #0]
 8002674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002678:	6013      	str	r3, [r2, #0]
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800267a:	6822      	ldr	r2, [r4, #0]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800267c:	6863      	ldr	r3, [r4, #4]
 800267e:	68a1      	ldr	r1, [r4, #8]
 8002680:	430b      	orrs	r3, r1
 8002682:	68e1      	ldr	r1, [r4, #12]
 8002684:	430b      	orrs	r3, r1
 8002686:	6921      	ldr	r1, [r4, #16]
 8002688:	430b      	orrs	r3, r1
 800268a:	6961      	ldr	r1, [r4, #20]
 800268c:	430b      	orrs	r3, r1
 800268e:	69e1      	ldr	r1, [r4, #28]
 8002690:	430b      	orrs	r3, r1
 8002692:	6a21      	ldr	r1, [r4, #32]
 8002694:	430b      	orrs	r3, r1
 8002696:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002698:	430b      	orrs	r3, r1
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800269a:	69a1      	ldr	r1, [r4, #24]
 800269c:	f401 7100 	and.w	r1, r1, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 80026a0:	430b      	orrs	r3, r1
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026a2:	6013      	str	r3, [r2, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 80026a4:	6822      	ldr	r2, [r4, #0]
 80026a6:	8b63      	ldrh	r3, [r4, #26]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6053      	str	r3, [r2, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026b6:	611a      	str	r2, [r3, #16]
  hspi->Instance->I2SCFGR &= (uint32_t)(~SPI_I2SCFGR_I2SMOD);
 80026b8:	6822      	ldr	r2, [r4, #0]
 80026ba:	69d3      	ldr	r3, [r2, #28]
 80026bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026c0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026c2:	2000      	movs	r0, #0
 80026c4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80026cc:	bd10      	pop	{r4, pc}
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80026ce:	21b8      	movs	r1, #184	; 0xb8
 80026d0:	4812      	ldr	r0, [pc, #72]	; (800271c <HAL_SPI_Init+0x160>)
 80026d2:	f001 fc27 	bl	8003f24 <assert_failed>
 80026d6:	e77b      	b.n	80025d0 <HAL_SPI_Init+0x14>
  assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
 80026d8:	21b9      	movs	r1, #185	; 0xb9
 80026da:	4810      	ldr	r0, [pc, #64]	; (800271c <HAL_SPI_Init+0x160>)
 80026dc:	f001 fc22 	bl	8003f24 <assert_failed>
 80026e0:	e77d      	b.n	80025de <HAL_SPI_Init+0x22>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80026e2:	21ba      	movs	r1, #186	; 0xba
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <HAL_SPI_Init+0x160>)
 80026e6:	f001 fc1d 	bl	8003f24 <assert_failed>
 80026ea:	e77c      	b.n	80025e6 <HAL_SPI_Init+0x2a>
  assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80026ec:	21bc      	movs	r1, #188	; 0xbc
 80026ee:	480b      	ldr	r0, [pc, #44]	; (800271c <HAL_SPI_Init+0x160>)
 80026f0:	f001 fc18 	bl	8003f24 <assert_failed>
 80026f4:	e782      	b.n	80025fc <HAL_SPI_Init+0x40>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80026f6:	21bd      	movs	r1, #189	; 0xbd
 80026f8:	4808      	ldr	r0, [pc, #32]	; (800271c <HAL_SPI_Init+0x160>)
 80026fa:	f001 fc13 	bl	8003f24 <assert_failed>
 80026fe:	e784      	b.n	800260a <HAL_SPI_Init+0x4e>
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 8002700:	21c2      	movs	r1, #194	; 0xc2
 8002702:	4806      	ldr	r0, [pc, #24]	; (800271c <HAL_SPI_Init+0x160>)
 8002704:	f001 fc0e 	bl	8003f24 <assert_failed>
 8002708:	e7ab      	b.n	8002662 <HAL_SPI_Init+0xa6>
    hspi->Lock = HAL_UNLOCKED;
 800270a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800270e:	4620      	mov	r0, r4
 8002710:	f001 fc14 	bl	8003f3c <HAL_SPI_MspInit>
 8002714:	e7a9      	b.n	800266a <HAL_SPI_Init+0xae>
    return HAL_ERROR;
 8002716:	2001      	movs	r0, #1
}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	08004604 	.word	0x08004604

08002720 <HAL_SPI_TransmitReceive>:
{
 8002720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	4604      	mov	r4, r0
 8002728:	460f      	mov	r7, r1
 800272a:	4690      	mov	r8, r2
 800272c:	461d      	mov	r5, r3
 800272e:	9e08      	ldr	r6, [sp, #32]
  tmpstate = hspi->State; 
 8002730:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002734:	b2db      	uxtb	r3, r3
  if((tmpstate == HAL_SPI_STATE_READY) || (tmpstate == HAL_SPI_STATE_BUSY_RX))
 8002736:	2b01      	cmp	r3, #1
 8002738:	d002      	beq.n	8002740 <HAL_SPI_TransmitReceive+0x20>
 800273a:	2b22      	cmp	r3, #34	; 0x22
 800273c:	f040 818f 	bne.w	8002a5e <HAL_SPI_TransmitReceive+0x33e>
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 8002740:	2f00      	cmp	r7, #0
 8002742:	f000 8190 	beq.w	8002a66 <HAL_SPI_TransmitReceive+0x346>
 8002746:	f1b8 0f00 	cmp.w	r8, #0
 800274a:	f000 8191 	beq.w	8002a70 <HAL_SPI_TransmitReceive+0x350>
 800274e:	2d00      	cmp	r5, #0
 8002750:	f000 8190 	beq.w	8002a74 <HAL_SPI_TransmitReceive+0x354>
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8002754:	68a3      	ldr	r3, [r4, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d145      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0xc6>
    __HAL_LOCK(hspi);
 800275a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800275e:	2b01      	cmp	r3, #1
 8002760:	f000 818a 	beq.w	8002a78 <HAL_SPI_TransmitReceive+0x358>
 8002764:	2301      	movs	r3, #1
 8002766:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if(hspi->State == HAL_SPI_STATE_READY)
 800276a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b01      	cmp	r3, #1
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002772:	bf04      	itt	eq
 8002774:	2332      	moveq	r3, #50	; 0x32
 8002776:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800277a:	2300      	movs	r3, #0
 800277c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->pRxBuffPtr  = pRxData;
 800277e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    hspi->RxXferSize  = Size;
 8002782:	87a5      	strh	r5, [r4, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 8002784:	87e5      	strh	r5, [r4, #62]	; 0x3e
    hspi->pTxBuffPtr  = pTxData;
 8002786:	6327      	str	r7, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8002788:	86a5      	strh	r5, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 800278a:	86e5      	strh	r5, [r4, #54]	; 0x36
    hspi->RxISR = 0;
 800278c:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->TxISR = 0;
 800278e:	64e3      	str	r3, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002790:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002796:	d02c      	beq.n	80027f2 <HAL_SPI_TransmitReceive+0xd2>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80027a0:	d103      	bne.n	80027aa <HAL_SPI_TransmitReceive+0x8a>
      __HAL_SPI_ENABLE(hspi);
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027a8:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027aa:	68e3      	ldr	r3, [r4, #12]
 80027ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027b0:	d02a      	beq.n	8002808 <HAL_SPI_TransmitReceive+0xe8>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 80027b2:	6863      	ldr	r3, [r4, #4]
 80027b4:	b12b      	cbz	r3, 80027c2 <HAL_SPI_TransmitReceive+0xa2>
 80027b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ba:	d10b      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0xb4>
 80027bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d108      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0xb4>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80027c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	6322      	str	r2, [r4, #48]	; 0x30
 80027c8:	6822      	ldr	r2, [r4, #0]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80027ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027d0:	3b01      	subs	r3, #1
 80027d2:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 80027d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8098 	beq.w	800290c <HAL_SPI_TransmitReceive+0x1ec>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80027dc:	2500      	movs	r5, #0
 80027de:	2702      	movs	r7, #2
            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80027e0:	f04f 0801 	mov.w	r8, #1
 80027e4:	e0e9      	b.n	80029ba <HAL_SPI_TransmitReceive+0x29a>
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80027e6:	f44f 7126 	mov.w	r1, #664	; 0x298
 80027ea:	48a0      	ldr	r0, [pc, #640]	; (8002a6c <HAL_SPI_TransmitReceive+0x34c>)
 80027ec:	f001 fb9a 	bl	8003f24 <assert_failed>
 80027f0:	e7b3      	b.n	800275a <HAL_SPI_TransmitReceive+0x3a>
      SPI_RESET_CRC(hspi);
 80027f2:	6822      	ldr	r2, [r4, #0]
 80027f4:	6813      	ldr	r3, [r2, #0]
 80027f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	6822      	ldr	r2, [r4, #0]
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e7c7      	b.n	8002798 <HAL_SPI_TransmitReceive+0x78>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8002808:	6863      	ldr	r3, [r4, #4]
 800280a:	b12b      	cbz	r3, 8002818 <HAL_SPI_TransmitReceive+0xf8>
 800280c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002810:	d10c      	bne.n	800282c <HAL_SPI_TransmitReceive+0x10c>
 8002812:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002814:	2b01      	cmp	r3, #1
 8002816:	d109      	bne.n	800282c <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800281c:	8812      	ldrh	r2, [r2, #0]
 800281e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 8002820:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002822:	3302      	adds	r3, #2
 8002824:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002826:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002828:	3b01      	subs	r3, #1
 800282a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 800282c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800282e:	b123      	cbz	r3, 800283a <HAL_SPI_TransmitReceive+0x11a>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002830:	2500      	movs	r5, #0
 8002832:	2702      	movs	r7, #2
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002834:	f04f 0801 	mov.w	r8, #1
 8002838:	e032      	b.n	80028a0 <HAL_SPI_TransmitReceive+0x180>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800283a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800283c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002840:	d013      	beq.n	800286a <HAL_SPI_TransmitReceive+0x14a>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002842:	4633      	mov	r3, r6
 8002844:	2200      	movs	r2, #0
 8002846:	2101      	movs	r1, #1
 8002848:	4620      	mov	r0, r4
 800284a:	f7ff fe47 	bl	80024dc <SPI_WaitOnFlagUntilTimeout>
 800284e:	2800      	cmp	r0, #0
 8002850:	f040 8114 	bne.w	8002a7c <HAL_SPI_TransmitReceive+0x35c>
        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800285a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr+=2;
 800285c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800285e:	3302      	adds	r3, #2
 8002860:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002862:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002864:	3b01      	subs	r3, #1
 8002866:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002868:	e064      	b.n	8002934 <HAL_SPI_TransmitReceive+0x214>
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 800286a:	6822      	ldr	r2, [r4, #0]
 800286c:	6813      	ldr	r3, [r2, #0]
 800286e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e7e5      	b.n	8002842 <HAL_SPI_TransmitReceive+0x122>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002876:	4633      	mov	r3, r6
 8002878:	462a      	mov	r2, r5
 800287a:	4641      	mov	r1, r8
 800287c:	4620      	mov	r0, r4
 800287e:	f7ff fe2d 	bl	80024dc <SPI_WaitOnFlagUntilTimeout>
 8002882:	2800      	cmp	r0, #0
 8002884:	f040 80fe 	bne.w	8002a84 <HAL_SPI_TransmitReceive+0x364>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800288e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 8002890:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002892:	3302      	adds	r3, #2
 8002894:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8002896:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002898:	3b01      	subs	r3, #1
 800289a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 800289c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800289e:	b1fb      	cbz	r3, 80028e0 <HAL_SPI_TransmitReceive+0x1c0>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80028a0:	4633      	mov	r3, r6
 80028a2:	462a      	mov	r2, r5
 80028a4:	4639      	mov	r1, r7
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7ff fe18 	bl	80024dc <SPI_WaitOnFlagUntilTimeout>
 80028ac:	2800      	cmp	r0, #0
 80028ae:	f040 80e7 	bne.w	8002a80 <HAL_SPI_TransmitReceive+0x360>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80028b6:	8812      	ldrh	r2, [r2, #0]
 80028b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2;
 80028ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028bc:	3302      	adds	r3, #2
 80028be:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 80028c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1d4      	bne.n	8002876 <HAL_SPI_TransmitReceive+0x156>
 80028cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d2:	d1d0      	bne.n	8002876 <HAL_SPI_TransmitReceive+0x156>
            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 80028d4:	6822      	ldr	r2, [r4, #0]
 80028d6:	6813      	ldr	r3, [r2, #0]
 80028d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e7ca      	b.n	8002876 <HAL_SPI_TransmitReceive+0x156>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 80028e0:	6863      	ldr	r3, [r4, #4]
 80028e2:	bb3b      	cbnz	r3, 8002934 <HAL_SPI_TransmitReceive+0x214>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80028e4:	4633      	mov	r3, r6
 80028e6:	2200      	movs	r2, #0
 80028e8:	2101      	movs	r1, #1
 80028ea:	4620      	mov	r0, r4
 80028ec:	f7ff fdf6 	bl	80024dc <SPI_WaitOnFlagUntilTimeout>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	f040 80c9 	bne.w	8002a88 <HAL_SPI_TransmitReceive+0x368>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028fc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 80028fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002900:	3302      	adds	r3, #2
 8002902:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8002904:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002906:	3b01      	subs	r3, #1
 8002908:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800290a:	e013      	b.n	8002934 <HAL_SPI_TransmitReceive+0x214>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800290c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800290e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002912:	d039      	beq.n	8002988 <HAL_SPI_TransmitReceive+0x268>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002914:	4633      	mov	r3, r6
 8002916:	2200      	movs	r2, #0
 8002918:	2101      	movs	r1, #1
 800291a:	4620      	mov	r0, r4
 800291c:	f7ff fdde 	bl	80024dc <SPI_WaitOnFlagUntilTimeout>
 8002920:	2800      	cmp	r0, #0
 8002922:	f040 80b3 	bne.w	8002a8c <HAL_SPI_TransmitReceive+0x36c>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800292c:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800292e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002930:	3b01      	subs	r3, #1
 8002932:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002934:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800293a:	d071      	beq.n	8002a20 <HAL_SPI_TransmitReceive+0x300>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 800293c:	4633      	mov	r3, r6
 800293e:	2201      	movs	r2, #1
 8002940:	2180      	movs	r1, #128	; 0x80
 8002942:	4620      	mov	r0, r4
 8002944:	f7ff fdca 	bl	80024dc <SPI_WaitOnFlagUntilTimeout>
 8002948:	2800      	cmp	r0, #0
 800294a:	d17e      	bne.n	8002a4a <HAL_SPI_TransmitReceive+0x32a>
    hspi->State = HAL_SPI_STATE_READY;
 800294c:	2301      	movs	r3, #1
 800294e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	6899      	ldr	r1, [r3, #8]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (tmp != RESET))
 8002956:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002958:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800295c:	d17b      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x336>
 800295e:	f011 0f10 	tst.w	r1, #16
 8002962:	d078      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x336>
      hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 8002964:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002966:	f042 0202 	orr.w	r2, r2, #2
 800296a:	6562      	str	r2, [r4, #84]	; 0x54
        SPI_RESET_CRC(hspi);
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	6822      	ldr	r2, [r4, #0]
 8002976:	6813      	ldr	r3, [r2, #0]
 8002978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800297c:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hspi);
 800297e:	2300      	movs	r3, #0
 8002980:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      return HAL_ERROR; 
 8002984:	2001      	movs	r0, #1
 8002986:	e06b      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8002988:	6822      	ldr	r2, [r4, #0]
 800298a:	6813      	ldr	r3, [r2, #0]
 800298c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e7bf      	b.n	8002914 <HAL_SPI_TransmitReceive+0x1f4>
            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002994:	4633      	mov	r3, r6
 8002996:	462a      	mov	r2, r5
 8002998:	4641      	mov	r1, r8
 800299a:	4620      	mov	r0, r4
 800299c:	f7ff fd9e 	bl	80024dc <SPI_WaitOnFlagUntilTimeout>
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d177      	bne.n	8002a94 <HAL_SPI_TransmitReceive+0x374>
            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029aa:	1c59      	adds	r1, r3, #1
 80029ac:	63a1      	str	r1, [r4, #56]	; 0x38
 80029ae:	701a      	strb	r2, [r3, #0]
            hspi->RxXferCount--;
 80029b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029b2:	3b01      	subs	r3, #1
 80029b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 80029b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029b8:	b1eb      	cbz	r3, 80029f6 <HAL_SPI_TransmitReceive+0x2d6>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80029ba:	4633      	mov	r3, r6
 80029bc:	462a      	mov	r2, r5
 80029be:	4639      	mov	r1, r7
 80029c0:	4620      	mov	r0, r4
 80029c2:	f7ff fd8b 	bl	80024dc <SPI_WaitOnFlagUntilTimeout>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d162      	bne.n	8002a90 <HAL_SPI_TransmitReceive+0x370>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80029ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	6322      	str	r2, [r4, #48]	; 0x30
 80029d0:	6822      	ldr	r2, [r4, #0]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 80029d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29b      	uxth	r3, r3
 80029dc:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1d8      	bne.n	8002994 <HAL_SPI_TransmitReceive+0x274>
 80029e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e8:	d1d4      	bne.n	8002994 <HAL_SPI_TransmitReceive+0x274>
            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 80029ea:	6822      	ldr	r2, [r4, #0]
 80029ec:	6813      	ldr	r3, [r2, #0]
 80029ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e7ce      	b.n	8002994 <HAL_SPI_TransmitReceive+0x274>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 80029f6:	6863      	ldr	r3, [r4, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d19b      	bne.n	8002934 <HAL_SPI_TransmitReceive+0x214>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80029fc:	4633      	mov	r3, r6
 80029fe:	2200      	movs	r2, #0
 8002a00:	2101      	movs	r1, #1
 8002a02:	4620      	mov	r0, r4
 8002a04:	f7ff fd6a 	bl	80024dc <SPI_WaitOnFlagUntilTimeout>
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d145      	bne.n	8002a98 <HAL_SPI_TransmitReceive+0x378>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a12:	1c59      	adds	r1, r3, #1
 8002a14:	63a1      	str	r1, [r4, #56]	; 0x38
 8002a16:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002a18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002a1e:	e789      	b.n	8002934 <HAL_SPI_TransmitReceive+0x214>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002a20:	4633      	mov	r3, r6
 8002a22:	2200      	movs	r2, #0
 8002a24:	2101      	movs	r1, #1
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7ff fd58 	bl	80024dc <SPI_WaitOnFlagUntilTimeout>
 8002a2c:	b938      	cbnz	r0, 8002a3e <HAL_SPI_TransmitReceive+0x31e>
      tmpreg = hspi->Instance->DR;
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg);
 8002a38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002a3c:	e77e      	b.n	800293c <HAL_SPI_TransmitReceive+0x21c>
        hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 8002a3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a46:	2003      	movs	r0, #3
 8002a48:	e00a      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
      hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 8002a4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a4c:	f043 0320 	orr.w	r3, r3, #32
 8002a50:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a52:	2003      	movs	r0, #3
 8002a54:	e004      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
    __HAL_UNLOCK(hspi);
 8002a56:	2300      	movs	r3, #0
 8002a58:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_OK;
 8002a5c:	e000      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
    return HAL_BUSY;
 8002a5e:	2002      	movs	r0, #2
}
 8002a60:	b002      	add	sp, #8
 8002a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002a66:	2001      	movs	r0, #1
 8002a68:	e7fa      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
 8002a6a:	bf00      	nop
 8002a6c:	08004604 	.word	0x08004604
 8002a70:	2001      	movs	r0, #1
 8002a72:	e7f5      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
 8002a74:	2001      	movs	r0, #1
 8002a76:	e7f3      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
    __HAL_LOCK(hspi);
 8002a78:	2002      	movs	r0, #2
 8002a7a:	e7f1      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
          return HAL_TIMEOUT;
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	e7ef      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002a80:	2003      	movs	r0, #3
 8002a82:	e7ed      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002a84:	2003      	movs	r0, #3
 8002a86:	e7eb      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002a88:	2003      	movs	r0, #3
 8002a8a:	e7e9      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
          return HAL_TIMEOUT;
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	e7e7      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002a90:	2003      	movs	r0, #3
 8002a92:	e7e5      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
              return HAL_TIMEOUT;
 8002a94:	2003      	movs	r0, #3
 8002a96:	e7e3      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002a98:	2003      	movs	r0, #3
 8002a9a:	e7e1      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x340>

08002a9c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	4604      	mov	r4, r0
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8002aa0:	6842      	ldr	r2, [r0, #4]
 8002aa2:	4b94      	ldr	r3, [pc, #592]	; (8002cf4 <UART_SetConfig+0x258>)
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d878      	bhi.n	8002b9a <UART_SetConfig+0xfe>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002aa8:	68e3      	ldr	r3, [r4, #12]
 8002aaa:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8002aae:	d004      	beq.n	8002aba <UART_SetConfig+0x1e>
 8002ab0:	f240 7137 	movw	r1, #1847	; 0x737
 8002ab4:	4890      	ldr	r0, [pc, #576]	; (8002cf8 <UART_SetConfig+0x25c>)
 8002ab6:	f001 fa35 	bl	8003f24 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002aba:	6923      	ldr	r3, [r4, #16]
 8002abc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8002ac0:	d002      	beq.n	8002ac8 <UART_SetConfig+0x2c>
 8002ac2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ac6:	d16e      	bne.n	8002ba6 <UART_SetConfig+0x10a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002ac8:	6963      	ldr	r3, [r4, #20]
 8002aca:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8002ace:	4213      	tst	r3, r2
 8002ad0:	d100      	bne.n	8002ad4 <UART_SetConfig+0x38>
 8002ad2:	b923      	cbnz	r3, 8002ade <UART_SetConfig+0x42>
 8002ad4:	f240 7139 	movw	r1, #1849	; 0x739
 8002ad8:	4887      	ldr	r0, [pc, #540]	; (8002cf8 <UART_SetConfig+0x25c>)
 8002ada:	f001 fa23 	bl	8003f24 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002ade:	6822      	ldr	r2, [r4, #0]
 8002ae0:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002ae2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002ae6:	68e1      	ldr	r1, [r4, #12]
 8002ae8:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 8002aea:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002aec:	6821      	ldr	r1, [r4, #0]
 8002aee:	68ca      	ldr	r2, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002af0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002af4:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002af8:	68a3      	ldr	r3, [r4, #8]
 8002afa:	6920      	ldr	r0, [r4, #16]
 8002afc:	4303      	orrs	r3, r0
 8002afe:	6960      	ldr	r0, [r4, #20]
 8002b00:	4303      	orrs	r3, r0
 8002b02:	69e0      	ldr	r0, [r4, #28]
 8002b04:	4303      	orrs	r3, r0
 8002b06:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 8002b08:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002b0a:	6822      	ldr	r2, [r4, #0]
 8002b0c:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002b12:	69a1      	ldr	r1, [r4, #24]
 8002b14:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8002b16:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b18:	69e3      	ldr	r3, [r4, #28]
 8002b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b1e:	d048      	beq.n	8002bb2 <UART_SetConfig+0x116>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	4a76      	ldr	r2, [pc, #472]	; (8002cfc <UART_SetConfig+0x260>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	f000 80b2 	beq.w	8002c8e <UART_SetConfig+0x1f2>
 8002b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	f000 80ad 	beq.w	8002c8e <UART_SetConfig+0x1f2>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b34:	f7ff fca6 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8002b38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b40:	6863      	ldr	r3, [r4, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b48:	4f6d      	ldr	r7, [pc, #436]	; (8002d00 <UART_SetConfig+0x264>)
 8002b4a:	fba7 2303 	umull	r2, r3, r7, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	011e      	lsls	r6, r3, #4
 8002b52:	f7ff fc97 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8002b56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b5e:	6865      	ldr	r5, [r4, #4]
 8002b60:	00ad      	lsls	r5, r5, #2
 8002b62:	fbb0 f5f5 	udiv	r5, r0, r5
 8002b66:	f7ff fc8d 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8002b6a:	6822      	ldr	r2, [r4, #0]
 8002b6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b74:	6863      	ldr	r3, [r4, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7c:	fba7 1303 	umull	r1, r3, r7, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	2164      	movs	r1, #100	; 0x64
 8002b84:	fb01 5313 	mls	r3, r1, r3, r5
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	3332      	adds	r3, #50	; 0x32
 8002b8c:	fba7 1303 	umull	r1, r3, r7, r3
 8002b90:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002b94:	4333      	orrs	r3, r6
 8002b96:	6093      	str	r3, [r2, #8]
    }
  }
}
 8002b98:	e0ab      	b.n	8002cf2 <UART_SetConfig+0x256>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8002b9a:	f240 7136 	movw	r1, #1846	; 0x736
 8002b9e:	4856      	ldr	r0, [pc, #344]	; (8002cf8 <UART_SetConfig+0x25c>)
 8002ba0:	f001 f9c0 	bl	8003f24 <assert_failed>
 8002ba4:	e780      	b.n	8002aa8 <UART_SetConfig+0xc>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002ba6:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 8002baa:	4853      	ldr	r0, [pc, #332]	; (8002cf8 <UART_SetConfig+0x25c>)
 8002bac:	f001 f9ba 	bl	8003f24 <assert_failed>
 8002bb0:	e78a      	b.n	8002ac8 <UART_SetConfig+0x2c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	4a51      	ldr	r2, [pc, #324]	; (8002cfc <UART_SetConfig+0x260>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d036      	beq.n	8002c28 <UART_SetConfig+0x18c>
 8002bba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d032      	beq.n	8002c28 <UART_SetConfig+0x18c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bc2:	f7ff fc5f 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8002bc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bce:	6863      	ldr	r3, [r4, #4]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd6:	4f4a      	ldr	r7, [pc, #296]	; (8002d00 <UART_SetConfig+0x264>)
 8002bd8:	fba7 2303 	umull	r2, r3, r7, r3
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	011e      	lsls	r6, r3, #4
 8002be0:	f7ff fc50 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8002be4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002be8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bec:	6865      	ldr	r5, [r4, #4]
 8002bee:	006d      	lsls	r5, r5, #1
 8002bf0:	fbb0 f5f5 	udiv	r5, r0, r5
 8002bf4:	f7ff fc46 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8002bf8:	6822      	ldr	r2, [r4, #0]
 8002bfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c02:	6863      	ldr	r3, [r4, #4]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0a:	fba7 1303 	umull	r1, r3, r7, r3
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	2164      	movs	r1, #100	; 0x64
 8002c12:	fb01 5313 	mls	r3, r1, r3, r5
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	3332      	adds	r3, #50	; 0x32
 8002c1a:	fba7 1303 	umull	r1, r3, r7, r3
 8002c1e:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002c22:	4333      	orrs	r3, r6
 8002c24:	6093      	str	r3, [r2, #8]
 8002c26:	e064      	b.n	8002cf2 <UART_SetConfig+0x256>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c28:	f7ff fc42 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8002c2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c34:	6863      	ldr	r3, [r4, #4]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3c:	4f30      	ldr	r7, [pc, #192]	; (8002d00 <UART_SetConfig+0x264>)
 8002c3e:	fba7 2303 	umull	r2, r3, r7, r3
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	011e      	lsls	r6, r3, #4
 8002c46:	f7ff fc33 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8002c4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c52:	6865      	ldr	r5, [r4, #4]
 8002c54:	006d      	lsls	r5, r5, #1
 8002c56:	fbb0 f5f5 	udiv	r5, r0, r5
 8002c5a:	f7ff fc29 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c68:	6863      	ldr	r3, [r4, #4]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c70:	fba7 1303 	umull	r1, r3, r7, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	2164      	movs	r1, #100	; 0x64
 8002c78:	fb01 5313 	mls	r3, r1, r3, r5
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	3332      	adds	r3, #50	; 0x32
 8002c80:	fba7 1303 	umull	r1, r3, r7, r3
 8002c84:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002c88:	4333      	orrs	r3, r6
 8002c8a:	6093      	str	r3, [r2, #8]
 8002c8c:	e031      	b.n	8002cf2 <UART_SetConfig+0x256>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c8e:	f7ff fc0f 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8002c92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c9a:	6863      	ldr	r3, [r4, #4]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca2:	4f17      	ldr	r7, [pc, #92]	; (8002d00 <UART_SetConfig+0x264>)
 8002ca4:	fba7 2303 	umull	r2, r3, r7, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	011e      	lsls	r6, r3, #4
 8002cac:	f7ff fc00 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8002cb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cb8:	6865      	ldr	r5, [r4, #4]
 8002cba:	00ad      	lsls	r5, r5, #2
 8002cbc:	fbb0 f5f5 	udiv	r5, r0, r5
 8002cc0:	f7ff fbf6 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8002cc4:	6822      	ldr	r2, [r4, #0]
 8002cc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cce:	6863      	ldr	r3, [r4, #4]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd6:	fba7 1303 	umull	r1, r3, r7, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2164      	movs	r1, #100	; 0x64
 8002cde:	fb01 5313 	mls	r3, r1, r3, r5
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	3332      	adds	r3, #50	; 0x32
 8002ce6:	fba7 1303 	umull	r1, r3, r7, r3
 8002cea:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002cee:	4333      	orrs	r3, r6
 8002cf0:	6093      	str	r3, [r2, #8]
}
 8002cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cf4:	00a037a0 	.word	0x00a037a0
 8002cf8:	0800467c 	.word	0x0800467c
 8002cfc:	40011000 	.word	0x40011000
 8002d00:	51eb851f 	.word	0x51eb851f

08002d04 <UART_WaitOnFlagUntilTimeout>:
{
 8002d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d08:	4606      	mov	r6, r0
 8002d0a:	460d      	mov	r5, r1
 8002d0c:	4690      	mov	r8, r2
 8002d0e:	461c      	mov	r4, r3
  tickstart = HAL_GetTick();
 8002d10:	f7fe fd60 	bl	80017d4 <HAL_GetTick>
 8002d14:	4607      	mov	r7, r0
  if(Status == RESET)
 8002d16:	f1b8 0f00 	cmp.w	r8, #0
 8002d1a:	d029      	beq.n	8002d70 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8002d1c:	6832      	ldr	r2, [r6, #0]
 8002d1e:	6813      	ldr	r3, [r2, #0]
 8002d20:	ea35 0303 	bics.w	r3, r5, r3
 8002d24:	d151      	bne.n	8002dca <UART_WaitOnFlagUntilTimeout+0xc6>
      if(Timeout != HAL_MAX_DELAY)
 8002d26:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002d2a:	d0f8      	beq.n	8002d1e <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002d2c:	b124      	cbz	r4, 8002d38 <UART_WaitOnFlagUntilTimeout+0x34>
 8002d2e:	f7fe fd51 	bl	80017d4 <HAL_GetTick>
 8002d32:	1bc0      	subs	r0, r0, r7
 8002d34:	42a0      	cmp	r0, r4
 8002d36:	d9f1      	bls.n	8002d1c <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d38:	6832      	ldr	r2, [r6, #0]
 8002d3a:	68d3      	ldr	r3, [r2, #12]
 8002d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d40:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d42:	6832      	ldr	r2, [r6, #0]
 8002d44:	68d3      	ldr	r3, [r2, #12]
 8002d46:	f023 0320 	bic.w	r3, r3, #32
 8002d4a:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d4c:	6832      	ldr	r2, [r6, #0]
 8002d4e:	68d3      	ldr	r3, [r2, #12]
 8002d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d54:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d56:	6832      	ldr	r2, [r6, #0]
 8002d58:	6953      	ldr	r3, [r2, #20]
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8002d66:	2300      	movs	r3, #0
 8002d68:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
          return HAL_TIMEOUT;
 8002d6c:	2003      	movs	r0, #3
 8002d6e:	e02a      	b.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002d70:	6831      	ldr	r1, [r6, #0]
 8002d72:	680b      	ldr	r3, [r1, #0]
 8002d74:	ea35 0303 	bics.w	r3, r5, r3
 8002d78:	d024      	beq.n	8002dc4 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8002d7a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002d7e:	d0f8      	beq.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002d80:	b124      	cbz	r4, 8002d8c <UART_WaitOnFlagUntilTimeout+0x88>
 8002d82:	f7fe fd27 	bl	80017d4 <HAL_GetTick>
 8002d86:	1bc0      	subs	r0, r0, r7
 8002d88:	42a0      	cmp	r0, r4
 8002d8a:	d9f1      	bls.n	8002d70 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d8c:	6832      	ldr	r2, [r6, #0]
 8002d8e:	68d3      	ldr	r3, [r2, #12]
 8002d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d94:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d96:	6832      	ldr	r2, [r6, #0]
 8002d98:	68d3      	ldr	r3, [r2, #12]
 8002d9a:	f023 0320 	bic.w	r3, r3, #32
 8002d9e:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002da0:	6832      	ldr	r2, [r6, #0]
 8002da2:	68d3      	ldr	r3, [r2, #12]
 8002da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da8:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002daa:	6832      	ldr	r2, [r6, #0]
 8002dac:	6953      	ldr	r3, [r2, #20]
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 8002db4:	2301      	movs	r3, #1
 8002db6:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
          return HAL_TIMEOUT;
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	e000      	b.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8002dc4:	4640      	mov	r0, r8
}
 8002dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002dca:	2000      	movs	r0, #0
 8002dcc:	e7fb      	b.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0xc2>
	...

08002dd0 <HAL_UART_Init>:
  if(huart == NULL)
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	d072      	beq.n	8002eba <HAL_UART_Init+0xea>
{
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	4604      	mov	r4, r0
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002dd8:	6983      	ldr	r3, [r0, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d055      	beq.n	8002e8a <HAL_UART_Init+0xba>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002dde:	6802      	ldr	r2, [r0, #0]
 8002de0:	4937      	ldr	r1, [pc, #220]	; (8002ec0 <HAL_UART_Init+0xf0>)
 8002de2:	428a      	cmp	r2, r1
 8002de4:	d044      	beq.n	8002e70 <HAL_UART_Init+0xa0>
 8002de6:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 8002dea:	428a      	cmp	r2, r1
 8002dec:	d040      	beq.n	8002e70 <HAL_UART_Init+0xa0>
 8002dee:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 8002df2:	428a      	cmp	r2, r1
 8002df4:	d03c      	beq.n	8002e70 <HAL_UART_Init+0xa0>
 8002df6:	21fc      	movs	r1, #252	; 0xfc
 8002df8:	4832      	ldr	r0, [pc, #200]	; (8002ec4 <HAL_UART_Init+0xf4>)
 8002dfa:	f001 f893 	bl	8003f24 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002dfe:	69a3      	ldr	r3, [r4, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d135      	bne.n	8002e70 <HAL_UART_Init+0xa0>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002e04:	68a3      	ldr	r3, [r4, #8]
 8002e06:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8002e0a:	d004      	beq.n	8002e16 <HAL_UART_Init+0x46>
 8002e0c:	f240 1103 	movw	r1, #259	; 0x103
 8002e10:	482c      	ldr	r0, [pc, #176]	; (8002ec4 <HAL_UART_Init+0xf4>)
 8002e12:	f001 f887 	bl	8003f24 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002e16:	69e3      	ldr	r3, [r4, #28]
 8002e18:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8002e1c:	d004      	beq.n	8002e28 <HAL_UART_Init+0x58>
 8002e1e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002e22:	4828      	ldr	r0, [pc, #160]	; (8002ec4 <HAL_UART_Init+0xf4>)
 8002e24:	f001 f87e 	bl	8003f24 <assert_failed>
  if(huart->State == HAL_UART_STATE_RESET)
 8002e28:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d03e      	beq.n	8002eae <HAL_UART_Init+0xde>
  huart->State = HAL_UART_STATE_BUSY;
 8002e30:	2302      	movs	r3, #2
 8002e32:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	68d3      	ldr	r3, [r2, #12]
 8002e3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e3e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002e40:	4620      	mov	r0, r4
 8002e42:	f7ff fe2b 	bl	8002a9c <UART_SetConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8002e46:	6822      	ldr	r2, [r4, #0]
 8002e48:	6913      	ldr	r3, [r2, #16]
 8002e4a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002e4e:	6113      	str	r3, [r2, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002e50:	6822      	ldr	r2, [r4, #0]
 8002e52:	6953      	ldr	r3, [r2, #20]
 8002e54:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002e58:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002e5a:	6822      	ldr	r2, [r4, #0]
 8002e5c:	68d3      	ldr	r3, [r2, #12]
 8002e5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e62:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e64:	2000      	movs	r0, #0
 8002e66:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002e6e:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002e70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e74:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002e78:	d0c4      	beq.n	8002e04 <HAL_UART_Init+0x34>
 8002e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7e:	d0c1      	beq.n	8002e04 <HAL_UART_Init+0x34>
 8002e80:	21fd      	movs	r1, #253	; 0xfd
 8002e82:	4810      	ldr	r0, [pc, #64]	; (8002ec4 <HAL_UART_Init+0xf4>)
 8002e84:	f001 f84e 	bl	8003f24 <assert_failed>
 8002e88:	e7bc      	b.n	8002e04 <HAL_UART_Init+0x34>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002e8a:	6803      	ldr	r3, [r0, #0]
 8002e8c:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <HAL_UART_Init+0xf0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d0b8      	beq.n	8002e04 <HAL_UART_Init+0x34>
 8002e92:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d0b4      	beq.n	8002e04 <HAL_UART_Init+0x34>
 8002e9a:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d0b0      	beq.n	8002e04 <HAL_UART_Init+0x34>
 8002ea2:	f240 1101 	movw	r1, #257	; 0x101
 8002ea6:	4807      	ldr	r0, [pc, #28]	; (8002ec4 <HAL_UART_Init+0xf4>)
 8002ea8:	f001 f83c 	bl	8003f24 <assert_failed>
 8002eac:	e7aa      	b.n	8002e04 <HAL_UART_Init+0x34>
    huart->Lock = HAL_UNLOCKED;
 8002eae:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f001 f8b0 	bl	8004018 <HAL_UART_MspInit>
 8002eb8:	e7ba      	b.n	8002e30 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 8002eba:	2001      	movs	r0, #1
}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40011000 	.word	0x40011000
 8002ec4:	0800467c 	.word	0x0800467c

08002ec8 <HAL_UART_Transmit>:
{
 8002ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ecc:	4604      	mov	r4, r0
 8002ece:	4688      	mov	r8, r1
 8002ed0:	461d      	mov	r5, r3
  tmp1 = huart->State;
 8002ed2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ed6:	b2db      	uxtb	r3, r3
  if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_RX))
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d001      	beq.n	8002ee0 <HAL_UART_Transmit+0x18>
 8002edc:	2b22      	cmp	r3, #34	; 0x22
 8002ede:	d15b      	bne.n	8002f98 <HAL_UART_Transmit+0xd0>
    if((pData == NULL ) || (Size == 0)) 
 8002ee0:	f1b8 0f00 	cmp.w	r8, #0
 8002ee4:	d05b      	beq.n	8002f9e <HAL_UART_Transmit+0xd6>
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	d05b      	beq.n	8002fa2 <HAL_UART_Transmit+0xda>
    __HAL_LOCK(huart);
 8002eea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d059      	beq.n	8002fa6 <HAL_UART_Transmit+0xde>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002efc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002f04:	bf0c      	ite	eq
 8002f06:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002f08:	2312      	movne	r3, #18
 8002f0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8002f0e:	84a2      	strh	r2, [r4, #36]	; 0x24
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002f10:	2700      	movs	r7, #0
 8002f12:	2680      	movs	r6, #128	; 0x80
 8002f14:	e01d      	b.n	8002f52 <HAL_UART_Transmit+0x8a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002f16:	462b      	mov	r3, r5
 8002f18:	463a      	mov	r2, r7
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f7ff fef1 	bl	8002d04 <UART_WaitOnFlagUntilTimeout>
 8002f22:	2800      	cmp	r0, #0
 8002f24:	d141      	bne.n	8002faa <HAL_UART_Transmit+0xe2>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002f26:	6822      	ldr	r2, [r4, #0]
 8002f28:	f8b8 3000 	ldrh.w	r3, [r8]
 8002f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f30:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002f32:	6923      	ldr	r3, [r4, #16]
 8002f34:	b913      	cbnz	r3, 8002f3c <HAL_UART_Transmit+0x74>
          pData +=2;
 8002f36:	f108 0802 	add.w	r8, r8, #2
 8002f3a:	e008      	b.n	8002f4e <HAL_UART_Transmit+0x86>
          pData +=1;
 8002f3c:	f108 0801 	add.w	r8, r8, #1
 8002f40:	e005      	b.n	8002f4e <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002f42:	4641      	mov	r1, r8
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	4688      	mov	r8, r1
    while(huart->TxXferCount > 0)
 8002f4e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002f50:	b17a      	cbz	r2, 8002f72 <HAL_UART_Transmit+0xaa>
      huart->TxXferCount--;
 8002f52:	3a01      	subs	r2, #1
 8002f54:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f56:	68a2      	ldr	r2, [r4, #8]
 8002f58:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002f5c:	d0db      	beq.n	8002f16 <HAL_UART_Transmit+0x4e>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002f5e:	462b      	mov	r3, r5
 8002f60:	463a      	mov	r2, r7
 8002f62:	4631      	mov	r1, r6
 8002f64:	4620      	mov	r0, r4
 8002f66:	f7ff fecd 	bl	8002d04 <UART_WaitOnFlagUntilTimeout>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d0e9      	beq.n	8002f42 <HAL_UART_Transmit+0x7a>
          return HAL_TIMEOUT;
 8002f6e:	2003      	movs	r0, #3
 8002f70:	e013      	b.n	8002f9a <HAL_UART_Transmit+0xd2>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8002f72:	462b      	mov	r3, r5
 8002f74:	2140      	movs	r1, #64	; 0x40
 8002f76:	4620      	mov	r0, r4
 8002f78:	f7ff fec4 	bl	8002d04 <UART_WaitOnFlagUntilTimeout>
 8002f7c:	b9b8      	cbnz	r0, 8002fae <HAL_UART_Transmit+0xe6>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002f7e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002f86:	bf0c      	ite	eq
 8002f88:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 8002f8a:	2301      	movne	r3, #1
 8002f8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002f90:	2300      	movs	r3, #0
 8002f92:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8002f96:	e000      	b.n	8002f9a <HAL_UART_Transmit+0xd2>
    return HAL_BUSY;   
 8002f98:	2002      	movs	r0, #2
}
 8002f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	e7fb      	b.n	8002f9a <HAL_UART_Transmit+0xd2>
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	e7f9      	b.n	8002f9a <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 8002fa6:	2002      	movs	r0, #2
 8002fa8:	e7f7      	b.n	8002f9a <HAL_UART_Transmit+0xd2>
          return HAL_TIMEOUT;
 8002faa:	2003      	movs	r0, #3
 8002fac:	e7f5      	b.n	8002f9a <HAL_UART_Transmit+0xd2>
      return HAL_TIMEOUT;
 8002fae:	2003      	movs	r0, #3
 8002fb0:	e7f3      	b.n	8002f9a <HAL_UART_Transmit+0xd2>

08002fb2 <HAL_UART_Receive_IT>:
  tmp = huart->State;  
 8002fb2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002fb6:	b2db      	uxtb	r3, r3
  if((tmp == HAL_UART_STATE_READY) || (tmp == HAL_UART_STATE_BUSY_TX))
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d001      	beq.n	8002fc0 <HAL_UART_Receive_IT+0xe>
 8002fbc:	2b12      	cmp	r3, #18
 8002fbe:	d12c      	bne.n	800301a <HAL_UART_Receive_IT+0x68>
    if((pData == NULL ) || (Size == 0)) 
 8002fc0:	2900      	cmp	r1, #0
 8002fc2:	d02c      	beq.n	800301e <HAL_UART_Receive_IT+0x6c>
 8002fc4:	2a00      	cmp	r2, #0
 8002fc6:	d02c      	beq.n	8003022 <HAL_UART_Receive_IT+0x70>
    __HAL_LOCK(huart);
 8002fc8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d02a      	beq.n	8003026 <HAL_UART_Receive_IT+0x74>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8002fd6:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002fd8:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002fda:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	63c3      	str	r3, [r0, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_TX) 
 8002fe0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002fe8:	bf0c      	ite	eq
 8002fea:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002fec:	2322      	movne	r3, #34	; 0x22
 8002fee:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ff2:	6802      	ldr	r2, [r0, #0]
 8002ff4:	68d3      	ldr	r3, [r2, #12]
 8002ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffa:	60d3      	str	r3, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ffc:	6802      	ldr	r2, [r0, #0]
 8002ffe:	6953      	ldr	r3, [r2, #20]
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(huart);
 8003006:	2300      	movs	r3, #0
 8003008:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800300c:	6801      	ldr	r1, [r0, #0]
 800300e:	68ca      	ldr	r2, [r1, #12]
 8003010:	f042 0220 	orr.w	r2, r2, #32
 8003014:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003016:	4618      	mov	r0, r3
 8003018:	4770      	bx	lr
    return HAL_BUSY; 
 800301a:	2002      	movs	r0, #2
 800301c:	4770      	bx	lr
      return HAL_ERROR;
 800301e:	2001      	movs	r0, #1
 8003020:	4770      	bx	lr
 8003022:	2001      	movs	r0, #1
 8003024:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003026:	2002      	movs	r0, #2
}
 8003028:	4770      	bx	lr

0800302a <HAL_UART_TxCpltCallback>:
}
 800302a:	4770      	bx	lr

0800302c <HAL_UART_RxCpltCallback>:
}
 800302c:	4770      	bx	lr

0800302e <HAL_UART_ErrorCallback>:
}
 800302e:	4770      	bx	lr

08003030 <HAL_UART_IRQHandler>:
{
 8003030:	b510      	push	{r4, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	4604      	mov	r4, r0
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8003036:	6803      	ldr	r3, [r0, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 800303a:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 800303c:	f012 0f01 	tst.w	r2, #1
 8003040:	d00b      	beq.n	800305a <HAL_UART_IRQHandler+0x2a>
 8003042:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003046:	d008      	beq.n	800305a <HAL_UART_IRQHandler+0x2a>
    __HAL_UART_CLEAR_PEFLAG(huart);
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	9200      	str	r2, [sp, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	9200      	str	r2, [sp, #0]
 8003050:	9a00      	ldr	r2, [sp, #0]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003052:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	63c2      	str	r2, [r0, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 800305a:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800305c:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 800305e:	f012 0f02 	tst.w	r2, #2
 8003062:	d00b      	beq.n	800307c <HAL_UART_IRQHandler+0x4c>
 8003064:	f011 0f01 	tst.w	r1, #1
 8003068:	d008      	beq.n	800307c <HAL_UART_IRQHandler+0x4c>
    __HAL_UART_CLEAR_FEFLAG(huart);
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	9201      	str	r2, [sp, #4]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	9201      	str	r2, [sp, #4]
 8003072:	9a01      	ldr	r2, [sp, #4]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003074:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003076:	f042 0204 	orr.w	r2, r2, #4
 800307a:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 800307c:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800307e:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 8003080:	f012 0f04 	tst.w	r2, #4
 8003084:	d00b      	beq.n	800309e <HAL_UART_IRQHandler+0x6e>
 8003086:	f011 0f01 	tst.w	r1, #1
 800308a:	d008      	beq.n	800309e <HAL_UART_IRQHandler+0x6e>
    __HAL_UART_CLEAR_NEFLAG(huart);
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	9202      	str	r2, [sp, #8]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	9202      	str	r2, [sp, #8]
 8003094:	9a02      	ldr	r2, [sp, #8]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003096:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003098:	f042 0202 	orr.w	r2, r2, #2
 800309c:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 800309e:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80030a0:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80030a2:	f012 0f08 	tst.w	r2, #8
 80030a6:	d00b      	beq.n	80030c0 <HAL_UART_IRQHandler+0x90>
 80030a8:	f011 0f01 	tst.w	r1, #1
 80030ac:	d008      	beq.n	80030c0 <HAL_UART_IRQHandler+0x90>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	9203      	str	r2, [sp, #12]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	9203      	str	r2, [sp, #12]
 80030b6:	9a03      	ldr	r2, [sp, #12]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030ba:	f042 0208 	orr.w	r2, r2, #8
 80030be:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80030c0:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80030c2:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80030c4:	f012 0f20 	tst.w	r2, #32
 80030c8:	d002      	beq.n	80030d0 <HAL_UART_IRQHandler+0xa0>
 80030ca:	f011 0f20 	tst.w	r1, #32
 80030ce:	d118      	bne.n	8003102 <HAL_UART_IRQHandler+0xd2>
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 80030d4:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80030d6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80030da:	d002      	beq.n	80030e2 <HAL_UART_IRQHandler+0xb2>
 80030dc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80030e0:	d160      	bne.n	80031a4 <HAL_UART_IRQHandler+0x174>
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80030e6:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80030e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80030ec:	d003      	beq.n	80030f6 <HAL_UART_IRQHandler+0xc6>
 80030ee:	f011 0f40 	tst.w	r1, #64	; 0x40
 80030f2:	f040 8086 	bne.w	8003202 <HAL_UART_IRQHandler+0x1d2>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f040 80a0 	bne.w	800323e <HAL_UART_IRQHandler+0x20e>
}
 80030fe:	b004      	add	sp, #16
 8003100:	bd10      	pop	{r4, pc}
  tmp1 = huart->State; 
 8003102:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_RX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 8003106:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800310a:	2a22      	cmp	r2, #34	; 0x22
 800310c:	d1e0      	bne.n	80030d0 <HAL_UART_IRQHandler+0xa0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800310e:	68a2      	ldr	r2, [r4, #8]
 8003110:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003114:	d028      	beq.n	8003168 <HAL_UART_IRQHandler+0x138>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003116:	6922      	ldr	r2, [r4, #16]
 8003118:	2a00      	cmp	r2, #0
 800311a:	d137      	bne.n	800318c <HAL_UART_IRQHandler+0x15c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003120:	1c59      	adds	r1, r3, #1
 8003122:	62a1      	str	r1, [r4, #40]	; 0x28
 8003124:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0)
 8003126:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003128:	3b01      	subs	r3, #1
 800312a:	b29b      	uxth	r3, r3
 800312c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1ce      	bne.n	80030d0 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003132:	6822      	ldr	r2, [r4, #0]
 8003134:	68d3      	ldr	r3, [r2, #12]
 8003136:	f023 0320 	bic.w	r3, r3, #32
 800313a:	60d3      	str	r3, [r2, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800313c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b32      	cmp	r3, #50	; 0x32
 8003144:	d02a      	beq.n	800319c <HAL_UART_IRQHandler+0x16c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003146:	6822      	ldr	r2, [r4, #0]
 8003148:	68d3      	ldr	r3, [r2, #12]
 800314a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800314e:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003150:	6822      	ldr	r2, [r4, #0]
 8003152:	6953      	ldr	r3, [r2, #20]
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6153      	str	r3, [r2, #20]
        huart->State = HAL_UART_STATE_READY;
 800315a:	2301      	movs	r3, #1
 800315c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 8003160:	4620      	mov	r0, r4
 8003162:	f7ff ff63 	bl	800302c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003166:	e7b3      	b.n	80030d0 <HAL_UART_IRQHandler+0xa0>
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003168:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 800316a:	6922      	ldr	r2, [r4, #16]
 800316c:	b93a      	cbnz	r2, 800317e <HAL_UART_IRQHandler+0x14e>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	800b      	strh	r3, [r1, #0]
        huart->pRxBuffPtr += 2;
 8003176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003178:	3302      	adds	r3, #2
 800317a:	62a3      	str	r3, [r4, #40]	; 0x28
 800317c:	e7d3      	b.n	8003126 <HAL_UART_IRQHandler+0xf6>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	800b      	strh	r3, [r1, #0]
        huart->pRxBuffPtr += 1;
 8003184:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003186:	3301      	adds	r3, #1
 8003188:	62a3      	str	r3, [r4, #40]	; 0x28
 800318a:	e7cc      	b.n	8003126 <HAL_UART_IRQHandler+0xf6>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003190:	1c51      	adds	r1, r2, #1
 8003192:	62a1      	str	r1, [r4, #40]	; 0x28
 8003194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003198:	7013      	strb	r3, [r2, #0]
 800319a:	e7c4      	b.n	8003126 <HAL_UART_IRQHandler+0xf6>
        huart->State = HAL_UART_STATE_BUSY_TX;
 800319c:	2312      	movs	r3, #18
 800319e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80031a2:	e7dd      	b.n	8003160 <HAL_UART_IRQHandler+0x130>
  tmp1 = huart->State;
 80031a4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_TX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 80031a8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80031ac:	2a12      	cmp	r2, #18
 80031ae:	d198      	bne.n	80030e2 <HAL_UART_IRQHandler+0xb2>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031b0:	68a2      	ldr	r2, [r4, #8]
 80031b2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80031b6:	d015      	beq.n	80031e4 <HAL_UART_IRQHandler+0x1b4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031b8:	6a22      	ldr	r2, [r4, #32]
 80031ba:	1c51      	adds	r1, r2, #1
 80031bc:	6221      	str	r1, [r4, #32]
 80031be:	7812      	ldrb	r2, [r2, #0]
 80031c0:	605a      	str	r2, [r3, #4]
    if(--huart->TxXferCount == 0)
 80031c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	84e3      	strh	r3, [r4, #38]	; 0x26
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d189      	bne.n	80030e2 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031ce:	6822      	ldr	r2, [r4, #0]
 80031d0:	68d3      	ldr	r3, [r2, #12]
 80031d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031d8:	6822      	ldr	r2, [r4, #0]
 80031da:	68d3      	ldr	r3, [r2, #12]
 80031dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031e0:	60d3      	str	r3, [r2, #12]
 80031e2:	e77e      	b.n	80030e2 <HAL_UART_IRQHandler+0xb2>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031e4:	6a22      	ldr	r2, [r4, #32]
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ec:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80031ee:	6923      	ldr	r3, [r4, #16]
 80031f0:	b91b      	cbnz	r3, 80031fa <HAL_UART_IRQHandler+0x1ca>
        huart->pTxBuffPtr += 2;
 80031f2:	6a23      	ldr	r3, [r4, #32]
 80031f4:	3302      	adds	r3, #2
 80031f6:	6223      	str	r3, [r4, #32]
 80031f8:	e7e3      	b.n	80031c2 <HAL_UART_IRQHandler+0x192>
        huart->pTxBuffPtr += 1;
 80031fa:	6a23      	ldr	r3, [r4, #32]
 80031fc:	3301      	adds	r3, #1
 80031fe:	6223      	str	r3, [r4, #32]
 8003200:	e7df      	b.n	80031c2 <HAL_UART_IRQHandler+0x192>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003208:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800320a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b32      	cmp	r3, #50	; 0x32
 8003212:	d010      	beq.n	8003236 <HAL_UART_IRQHandler+0x206>
    __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	68d3      	ldr	r3, [r2, #12]
 8003218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800321c:	60d3      	str	r3, [r2, #12]
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	6953      	ldr	r3, [r2, #20]
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	6153      	str	r3, [r2, #20]
    huart->State = HAL_UART_STATE_READY;
 8003228:	2301      	movs	r3, #1
 800322a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800322e:	4620      	mov	r0, r4
 8003230:	f7ff fefb 	bl	800302a <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003234:	e75f      	b.n	80030f6 <HAL_UART_IRQHandler+0xc6>
    huart->State = HAL_UART_STATE_BUSY_RX;
 8003236:	2322      	movs	r3, #34	; 0x22
 8003238:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800323c:	e7f7      	b.n	800322e <HAL_UART_IRQHandler+0x1fe>
    huart->State = HAL_UART_STATE_READY;
 800323e:	2301      	movs	r3, #1
 8003240:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 8003244:	4620      	mov	r0, r4
 8003246:	f7ff fef2 	bl	800302e <HAL_UART_ErrorCallback>
}
 800324a:	e758      	b.n	80030fe <HAL_UART_IRQHandler+0xce>

0800324c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800324c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003284 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003250:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003252:	e003      	b.n	800325c <LoopCopyDataInit>

08003254 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003256:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003258:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800325a:	3104      	adds	r1, #4

0800325c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800325c:	480b      	ldr	r0, [pc, #44]	; (800328c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003260:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003262:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003264:	d3f6      	bcc.n	8003254 <CopyDataInit>
  ldr  r2, =_sbss
 8003266:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003268:	e002      	b.n	8003270 <LoopFillZerobss>

0800326a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800326a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800326c:	f842 3b04 	str.w	r3, [r2], #4

08003270 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003272:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003274:	d3f9      	bcc.n	800326a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003276:	f7fe fa51 	bl	800171c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800327a:	f000 ff43 	bl	8004104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800327e:	f000 fdbd 	bl	8003dfc <main>
  bx  lr    
 8003282:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003284:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003288:	08004b38 	.word	0x08004b38
  ldr  r0, =_sdata
 800328c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003290:	20000368 	.word	0x20000368
  ldr  r2, =_sbss
 8003294:	20000368 	.word	0x20000368
  ldr  r3, = _ebss
 8003298:	200005d8 	.word	0x200005d8

0800329c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800329c:	e7fe      	b.n	800329c <ADC_IRQHandler>
	...

080032a0 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80032a0:	b508      	push	{r3, lr}
	switch (GPIO_Pin)
 80032a2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80032a6:	d01f      	beq.n	80032e8 <HAL_GPIO_EXTI_Callback+0x48>
 80032a8:	d810      	bhi.n	80032cc <HAL_GPIO_EXTI_Callback+0x2c>
 80032aa:	2802      	cmp	r0, #2
 80032ac:	d02c      	beq.n	8003308 <HAL_GPIO_EXTI_Callback+0x68>
 80032ae:	2880      	cmp	r0, #128	; 0x80
 80032b0:	d107      	bne.n	80032c2 <HAL_GPIO_EXTI_Callback+0x22>
			//break;
		case GPIO_PIN_7:
			// If the interrupt came from pin 5 then turn the output pin 1 on GPIO A on to turn
			// on the LED
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
			USART_Transmit(&huart2, (uint8_t* )"Pin 7");
 80032b2:	4917      	ldr	r1, [pc, #92]	; (8003310 <HAL_GPIO_EXTI_Callback+0x70>)
 80032b4:	4817      	ldr	r0, [pc, #92]	; (8003314 <HAL_GPIO_EXTI_Callback+0x74>)
 80032b6:	f000 f870 	bl	800339a <USART_Transmit>
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
			L6470_HardStop(0);
 80032ba:	2000      	movs	r0, #0
 80032bc:	f7fd fc8c 	bl	8000bd8 <L6470_HardStop>
			break;
		case L6470_nFLAG_GPIO_PIN:
			BSP_L6470_FlagEventManager();
			break;
	}
}
 80032c0:	bd08      	pop	{r3, pc}
	switch (GPIO_Pin)
 80032c2:	2801      	cmp	r0, #1
 80032c4:	d1fc      	bne.n	80032c0 <HAL_GPIO_EXTI_Callback+0x20>
			BSP_L6470_BusySynchEventManager();
 80032c6:	f7fe f926 	bl	8001516 <BSP_L6470_BusySynchEventManager>
			break;
 80032ca:	e7f9      	b.n	80032c0 <HAL_GPIO_EXTI_Callback+0x20>
	switch (GPIO_Pin)
 80032cc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80032d0:	d012      	beq.n	80032f8 <HAL_GPIO_EXTI_Callback+0x58>
 80032d2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80032d6:	d1f3      	bne.n	80032c0 <HAL_GPIO_EXTI_Callback+0x20>
			USART_Transmit(&huart2, (uint8_t* )"Pin 10");
 80032d8:	490f      	ldr	r1, [pc, #60]	; (8003318 <HAL_GPIO_EXTI_Callback+0x78>)
 80032da:	480e      	ldr	r0, [pc, #56]	; (8003314 <HAL_GPIO_EXTI_Callback+0x74>)
 80032dc:	f000 f85d 	bl	800339a <USART_Transmit>
			L6470_HardStop(1);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f7fd fc79 	bl	8000bd8 <L6470_HardStop>
			break;
 80032e6:	e7eb      	b.n	80032c0 <HAL_GPIO_EXTI_Callback+0x20>
			USART_Transmit(&huart2, (uint8_t* )"Pin 8");
 80032e8:	490c      	ldr	r1, [pc, #48]	; (800331c <HAL_GPIO_EXTI_Callback+0x7c>)
 80032ea:	480a      	ldr	r0, [pc, #40]	; (8003314 <HAL_GPIO_EXTI_Callback+0x74>)
 80032ec:	f000 f855 	bl	800339a <USART_Transmit>
			L6470_HardStop(0);
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7fd fc71 	bl	8000bd8 <L6470_HardStop>
			break;
 80032f6:	e7e3      	b.n	80032c0 <HAL_GPIO_EXTI_Callback+0x20>
			USART_Transmit(&huart2, (uint8_t* )"Pin 9");
 80032f8:	4909      	ldr	r1, [pc, #36]	; (8003320 <HAL_GPIO_EXTI_Callback+0x80>)
 80032fa:	4806      	ldr	r0, [pc, #24]	; (8003314 <HAL_GPIO_EXTI_Callback+0x74>)
 80032fc:	f000 f84d 	bl	800339a <USART_Transmit>
			L6470_HardStop(1);
 8003300:	2001      	movs	r0, #1
 8003302:	f7fd fc69 	bl	8000bd8 <L6470_HardStop>
			break;
 8003306:	e7db      	b.n	80032c0 <HAL_GPIO_EXTI_Callback+0x20>
			BSP_L6470_FlagEventManager();
 8003308:	f7fe f907 	bl	800151a <BSP_L6470_FlagEventManager>
}
 800330c:	e7d8      	b.n	80032c0 <HAL_GPIO_EXTI_Callback+0x20>
 800330e:	bf00      	nop
 8003310:	08004738 	.word	0x08004738
 8003314:	200004c8 	.word	0x200004c8
 8003318:	08004750 	.word	0x08004750
 800331c:	08004740 	.word	0x08004740
 8003320:	08004748 	.word	0x08004748

08003324 <CompareTwoTextString>:
 * @brief  This function compares two text strings.
 * @param  TextString1 The pointer to the 1st text string to compare.
 * @param  TextString2 The pointer to the 2nd text string to compare.
 * @retval FlagStatus    SET or RESET related the comparison.
 */
FlagStatus CompareTwoTextString(uint8_t* TextString1, uint8_t* TextString2) {
 8003324:	f04f 0c00 	mov.w	ip, #0
	uint8_t c1, c2; /* to store the two characters to be compared */

	i = 0;

	do {
		c1 = *(TextString1 + i);
 8003328:	fa5f f38c 	uxtb.w	r3, ip
 800332c:	5cc2      	ldrb	r2, [r0, r3]
		c2 = *(TextString2 + i);
 800332e:	5ccb      	ldrb	r3, [r1, r3]

		if (c1 != c2) {
 8003330:	429a      	cmp	r2, r3
 8003332:	d106      	bne.n	8003342 <CompareTwoTextString+0x1e>
			return RESET;
		}
		i++;
	} while ((c1 != '\0') && (c2 != '\0'));
 8003334:	b13a      	cbz	r2, 8003346 <CompareTwoTextString+0x22>
 8003336:	f10c 0c01 	add.w	ip, ip, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f4      	bne.n	8003328 <CompareTwoTextString+0x4>

	return SET;
 800333e:	2001      	movs	r0, #1
 8003340:	4770      	bx	lr
			return RESET;
 8003342:	2000      	movs	r0, #0
 8003344:	4770      	bx	lr
	return SET;
 8003346:	2001      	movs	r0, #1
}
 8003348:	4770      	bx	lr

0800334a <str2num>:
	uint32_t tenpwr;
	uint32_t number;

	digit = 0;

	while (*(str + digit) != '\0') {
 800334a:	7803      	ldrb	r3, [r0, #0]
 800334c:	b31b      	cbz	r3, 8003396 <str2num+0x4c>
	digit = 0;
 800334e:	2200      	movs	r2, #0
		if (((*(str + digit) >= '0') && (*(str + digit) <= '9'))) {
 8003350:	3b30      	subs	r3, #48	; 0x30
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b09      	cmp	r3, #9
 8003356:	d81b      	bhi.n	8003390 <str2num+0x46>
			digit++;
 8003358:	3201      	adds	r2, #1
 800335a:	b2d2      	uxtb	r2, r2
	while (*(str + digit) != '\0') {
 800335c:	5c83      	ldrb	r3, [r0, r2]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f6      	bne.n	8003350 <str2num+0x6>
FlagStatus str2num(uint8_t* str, uint32_t* pnum) {
 8003362:	b410      	push	{r4}
 8003364:	1e53      	subs	r3, r2, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	4403      	add	r3, r0
			return RESET;
		}
	}

	tenpwr = 1;
	number = 0;
 800336c:	2400      	movs	r4, #0
	tenpwr = 1;
 800336e:	2201      	movs	r2, #1

	do {
		TxtStr_digit = (*(str + (--digit)));
		number += ((TxtStr_digit - '0') * tenpwr);
 8003370:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8003374:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003378:	fb02 440c 	mla	r4, r2, ip, r4
		tenpwr *= 10;
 800337c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003380:	0052      	lsls	r2, r2, #1
	} while (digit);
 8003382:	4283      	cmp	r3, r0
 8003384:	d1f4      	bne.n	8003370 <str2num+0x26>

	*pnum = number;
 8003386:	600c      	str	r4, [r1, #0]
	return SET;
 8003388:	2001      	movs	r0, #1
}
 800338a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800338e:	4770      	bx	lr
			*pnum = 0;
 8003390:	2000      	movs	r0, #0
 8003392:	6008      	str	r0, [r1, #0]
}
 8003394:	4770      	bx	lr
	digit = 0;
 8003396:	461a      	mov	r2, r3
 8003398:	e7e3      	b.n	8003362 <str2num+0x18>

0800339a <USART_Transmit>:
 * @param  huart       pointer to a UART_HandleTypeDef structure that contains
 *                     the configuration information for the specified UART module.
 * @param  TextString  The text string to be sent.
 * @note It use the HAL_UART_Transmit function.
 */
void USART_Transmit(UART_HandleTypeDef* huart, uint8_t* TextString) {
 800339a:	b510      	push	{r4, lr}
	uint8_t TextStringLength;

	/* Calculate the length of the text string to be sent */
	TextStringLength = 0;
	while (TextString[TextStringLength++] != '\0')
 800339c:	2300      	movs	r3, #0
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	5c8c      	ldrb	r4, [r1, r2]
 80033a2:	3301      	adds	r3, #1
 80033a4:	2c00      	cmp	r4, #0
 80033a6:	d1fa      	bne.n	800339e <USART_Transmit+0x4>
		;
	TextStringLength--;

	/* Use the HAL function to send the text string via USART */
	HAL_UART_Transmit(huart, TextString, TextStringLength, 10);
 80033a8:	230a      	movs	r3, #10
 80033aa:	f7ff fd8d 	bl	8002ec8 <HAL_UART_Transmit>
}
 80033ae:	bd10      	pop	{r4, pc}

080033b0 <USART_SplitTextString>:
		sL6470_TextCommandBundle *pL6470_TextCommandBundle) {
 80033b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		*((pL6470_TextCommandBundle + CmdTxt_id)->MotorName) = '\0';
 80033b4:	2300      	movs	r3, #0
 80033b6:	700b      	strb	r3, [r1, #0]
		*((pL6470_TextCommandBundle + CmdTxt_id)->CommandName) = '\0';
 80033b8:	70cb      	strb	r3, [r1, #3]
		*((pL6470_TextCommandBundle + CmdTxt_id)->Param[0]) = '\0';
 80033ba:	73cb      	strb	r3, [r1, #15]
		*((pL6470_TextCommandBundle + CmdTxt_id)->Param[1]) = '\0';
 80033bc:	768b      	strb	r3, [r1, #26]
		*((pL6470_TextCommandBundle + CmdTxt_id)->Param[2]) = '\0';
 80033be:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
		*((pL6470_TextCommandBundle + CmdTxt_id)->MotorName) = '\0';
 80033c2:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
		*((pL6470_TextCommandBundle + CmdTxt_id)->CommandName) = '\0';
 80033c6:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
		*((pL6470_TextCommandBundle + CmdTxt_id)->Param[0]) = '\0';
 80033ca:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
		*((pL6470_TextCommandBundle + CmdTxt_id)->Param[1]) = '\0';
 80033ce:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
		*((pL6470_TextCommandBundle + CmdTxt_id)->Param[2]) = '\0';
 80033d2:	f881 3055 	strb.w	r3, [r1, #85]	; 0x55
	ch = *(pTextString + c_id);
 80033d6:	7802      	ldrb	r2, [r0, #0]
	while (ch != '\0') {
 80033d8:	2a00      	cmp	r2, #0
 80033da:	d07c      	beq.n	80034d6 <USART_SplitTextString+0x126>
	UsartTextStringDecodingStatus = DECODE_MOTOR;
 80033dc:	469e      	mov	lr, r3
	k_idmax = 2;
 80033de:	2602      	movs	r6, #2
	k_id = 0;
 80033e0:	469c      	mov	ip, r3
	CmdTxt_id = 0;
 80033e2:	461c      	mov	r4, r3
				UsartTextStringDecodingStatus = DECODE_MOTOR;
 80033e4:	461d      	mov	r5, r3
					k_idmax = 7;
 80033e6:	2707      	movs	r7, #7
					k_idmax = 10;
 80033e8:	f04f 0a0a 	mov.w	sl, #10
					k_idmax = 11;
 80033ec:	f04f 090b 	mov.w	r9, #11
					k_idmax = 2;
 80033f0:	46b0      	mov	r8, r6
 80033f2:	e010      	b.n	8003416 <USART_SplitTextString+0x66>
				USART_Transmit(&huart2, (uint8_t* )"Too much entered parameters.\r\n\r\n");
 80033f4:	4939      	ldr	r1, [pc, #228]	; (80034dc <USART_SplitTextString+0x12c>)
 80033f6:	483a      	ldr	r0, [pc, #232]	; (80034e0 <USART_SplitTextString+0x130>)
 80033f8:	f7ff ffcf 	bl	800339a <USART_Transmit>
				return RESET;
 80033fc:	2000      	movs	r0, #0
 80033fe:	e068      	b.n	80034d2 <USART_SplitTextString+0x122>
			CmdTxt_id++;
 8003400:	3401      	adds	r4, #1
 8003402:	b2e4      	uxtb	r4, r4
			if (CmdTxt_id != L6470DAISYCHAINSIZE) {
 8003404:	2c02      	cmp	r4, #2
 8003406:	d013      	beq.n	8003430 <USART_SplitTextString+0x80>
				UsartTextStringDecodingStatus = DECODE_MOTOR;
 8003408:	46ae      	mov	lr, r5
				k_id = 0;
 800340a:	46ac      	mov	ip, r5
		c_id++;
 800340c:	3301      	adds	r3, #1
 800340e:	b2db      	uxtb	r3, r3
		ch = *(pTextString + c_id);
 8003410:	5cc2      	ldrb	r2, [r0, r3]
	while (ch != '\0') {
 8003412:	2a00      	cmp	r2, #0
 8003414:	d05c      	beq.n	80034d0 <USART_SplitTextString+0x120>
		switch (ch) {
 8003416:	2a2c      	cmp	r2, #44	; 0x2c
 8003418:	d0f2      	beq.n	8003400 <USART_SplitTextString+0x50>
 800341a:	2a2e      	cmp	r2, #46	; 0x2e
 800341c:	d10e      	bne.n	800343c <USART_SplitTextString+0x8c>
			if (UsartTextStringDecodingStatus != DECODE_3rd_PARAM) {
 800341e:	f1be 0f04 	cmp.w	lr, #4
 8003422:	d0e7      	beq.n	80033f4 <USART_SplitTextString+0x44>
				UsartTextStringDecodingStatus++;
 8003424:	f10e 0e01 	add.w	lr, lr, #1
 8003428:	fa5f fe8e 	uxtb.w	lr, lr
				k_id = 0;
 800342c:	46ac      	mov	ip, r5
			break;
 800342e:	e7ed      	b.n	800340c <USART_SplitTextString+0x5c>
				USART_Transmit(&huart2, (uint8_t* )"Too much addressed L6470.\r\n\r\n");
 8003430:	492c      	ldr	r1, [pc, #176]	; (80034e4 <USART_SplitTextString+0x134>)
 8003432:	482b      	ldr	r0, [pc, #172]	; (80034e0 <USART_SplitTextString+0x130>)
 8003434:	f7ff ffb1 	bl	800339a <USART_Transmit>
				return RESET;
 8003438:	2000      	movs	r0, #0
 800343a:	e04a      	b.n	80034d2 <USART_SplitTextString+0x122>
			if (k_id != k_idmax) {
 800343c:	45b4      	cmp	ip, r6
 800343e:	d041      	beq.n	80034c4 <USART_SplitTextString+0x114>
				switch (UsartTextStringDecodingStatus) {
 8003440:	f1be 0f04 	cmp.w	lr, #4
 8003444:	d80d      	bhi.n	8003462 <USART_SplitTextString+0xb2>
 8003446:	e8df f00e 	tbb	[pc, lr]
 800344a:	1103      	.short	0x1103
 800344c:	271c      	.short	0x271c
 800344e:	32          	.byte	0x32
 800344f:	00          	.byte	0x00
					*(((pL6470_TextCommandBundle + CmdTxt_id)->MotorName) + k_id) =
 8003450:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8003454:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 8003458:	f806 200c 	strb.w	r2, [r6, ip]
							+ (k_id + 1)) = '\0';
 800345c:	4466      	add	r6, ip
 800345e:	7075      	strb	r5, [r6, #1]
					k_idmax = 2;
 8003460:	4646      	mov	r6, r8
				k_id++;
 8003462:	f10c 0c01 	add.w	ip, ip, #1
 8003466:	fa5f fc8c 	uxtb.w	ip, ip
			break;
 800346a:	e7cf      	b.n	800340c <USART_SplitTextString+0x5c>
					*(((pL6470_TextCommandBundle + CmdTxt_id)->CommandName)
 800346c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8003470:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 8003474:	3603      	adds	r6, #3
							+ k_id) = ch;
 8003476:	f806 200c 	strb.w	r2, [r6, ip]
							+ (k_id + 1)) = '\0';
 800347a:	4466      	add	r6, ip
 800347c:	7075      	strb	r5, [r6, #1]
					k_idmax = 11;
 800347e:	464e      	mov	r6, r9
					break;
 8003480:	e7ef      	b.n	8003462 <USART_SplitTextString+0xb2>
					*(((pL6470_TextCommandBundle + CmdTxt_id)->Param[0]) + k_id) =
 8003482:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8003486:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 800348a:	360f      	adds	r6, #15
 800348c:	f806 200c 	strb.w	r2, [r6, ip]
							+ (k_id + 1)) = '\0';
 8003490:	4466      	add	r6, ip
 8003492:	7075      	strb	r5, [r6, #1]
					k_idmax = 10;
 8003494:	4656      	mov	r6, sl
					break;
 8003496:	e7e4      	b.n	8003462 <USART_SplitTextString+0xb2>
					*(((pL6470_TextCommandBundle + CmdTxt_id)->Param[1]) + k_id) =
 8003498:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800349c:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 80034a0:	361a      	adds	r6, #26
 80034a2:	f806 200c 	strb.w	r2, [r6, ip]
							+ (k_id + 1)) = '\0';
 80034a6:	4466      	add	r6, ip
 80034a8:	7075      	strb	r5, [r6, #1]
					k_idmax = 7;
 80034aa:	463e      	mov	r6, r7
					break;
 80034ac:	e7d9      	b.n	8003462 <USART_SplitTextString+0xb2>
					*(((pL6470_TextCommandBundle + CmdTxt_id)->Param[2]) + k_id) =
 80034ae:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80034b2:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 80034b6:	3625      	adds	r6, #37	; 0x25
 80034b8:	f806 200c 	strb.w	r2, [r6, ip]
							+ (k_id + 1)) = '\0';
 80034bc:	4466      	add	r6, ip
 80034be:	7075      	strb	r5, [r6, #1]
					k_idmax = 7;
 80034c0:	463e      	mov	r6, r7
					break;
 80034c2:	e7ce      	b.n	8003462 <USART_SplitTextString+0xb2>
				USART_Transmit(&huart2, (uint8_t* )"Too much entered character.\r\n\r\n");
 80034c4:	4908      	ldr	r1, [pc, #32]	; (80034e8 <USART_SplitTextString+0x138>)
 80034c6:	4806      	ldr	r0, [pc, #24]	; (80034e0 <USART_SplitTextString+0x130>)
 80034c8:	f7ff ff67 	bl	800339a <USART_Transmit>
				return RESET;
 80034cc:	2000      	movs	r0, #0
 80034ce:	e000      	b.n	80034d2 <USART_SplitTextString+0x122>
	return SET;
 80034d0:	2001      	movs	r0, #1
}
 80034d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return SET;
 80034d6:	2001      	movs	r0, #1
 80034d8:	e7fb      	b.n	80034d2 <USART_SplitTextString+0x122>
 80034da:	bf00      	nop
 80034dc:	08004758 	.word	0x08004758
 80034e0:	200004c8 	.word	0x200004c8
 80034e4:	0800477c 	.word	0x0800477c
 80034e8:	0800479c 	.word	0x0800479c

080034ec <USART_CheckTextCommandBundle>:
		uint8_t* pL6470_DaisyChainSpiTxStruct) {
 80034ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f0:	b089      	sub	sp, #36	; 0x24
 80034f2:	460f      	mov	r7, r1
	uint8_t MotorMnemonic[4] = "";
 80034f4:	2300      	movs	r3, #0
 80034f6:	9307      	str	r3, [sp, #28]
			*(pL6470_DaisyChainSpiTxStruct + (i++)) = 0x00;
 80034f8:	700b      	strb	r3, [r1, #0]
 80034fa:	704b      	strb	r3, [r1, #1]
 80034fc:	708b      	strb	r3, [r1, #2]
 80034fe:	70cb      	strb	r3, [r1, #3]
 8003500:	710b      	strb	r3, [r1, #4]
 8003502:	714b      	strb	r3, [r1, #5]
 8003504:	718b      	strb	r3, [r1, #6]
 8003506:	71cb      	strb	r3, [r1, #7]
	for (spibyte = 0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8003508:	f100 080f 	add.w	r8, r0, #15
 800350c:	f100 033f 	add.w	r3, r0, #63	; 0x3f
 8003510:	9302      	str	r3, [sp, #8]
	uint8_t* pMotorMnemonic = MotorMnemonic;
 8003512:	ad07      	add	r5, sp, #28
		while (!CompareTwoTextString(
 8003514:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 80037c8 <USART_CheckTextCommandBundle+0x2dc>
 8003518:	f10a 0b49 	add.w	fp, sl, #73	; 0x49
 800351c:	f1a8 040f 	sub.w	r4, r8, #15
 8003520:	9401      	str	r4, [sp, #4]
 8003522:	4659      	mov	r1, fp
 8003524:	4620      	mov	r0, r4
 8003526:	f7ff fefd 	bl	8003324 <CompareTwoTextString>
 800352a:	b978      	cbnz	r0, 800354c <USART_CheckTextCommandBundle+0x60>
 800352c:	f10a 0156 	add.w	r1, sl, #86	; 0x56
 8003530:	4620      	mov	r0, r4
 8003532:	f7ff fef7 	bl	8003324 <CompareTwoTextString>
 8003536:	4603      	mov	r3, r0
 8003538:	bb78      	cbnz	r0, 800359a <USART_CheckTextCommandBundle+0xae>
				USART_Transmit(&huart2, (uint8_t* )"It is not possible to identify the L6470.\r\n\r\n");
 800353a:	4699      	mov	r9, r3
 800353c:	49a1      	ldr	r1, [pc, #644]	; (80037c4 <USART_CheckTextCommandBundle+0x2d8>)
 800353e:	48a2      	ldr	r0, [pc, #648]	; (80037c8 <USART_CheckTextCommandBundle+0x2dc>)
 8003540:	f7ff ff2b 	bl	800339a <USART_Transmit>
}
 8003544:	4648      	mov	r0, r9
 8003546:	b009      	add	sp, #36	; 0x24
 8003548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		i = 0;
 800354c:	2000      	movs	r0, #0
				(uint8_t*) L6470_DaisyChainMnemonic[i].MotorIdMnemonic)) {
 800354e:	f8cd b010 	str.w	fp, [sp, #16]
		L6470_Id = L6470_ID(i);
 8003552:	f7fd f99f 	bl	8000894 <L6470_ID>
 8003556:	9003      	str	r0, [sp, #12]
		if (!CompareTwoTextString(
 8003558:	4629      	mov	r1, r5
 800355a:	9804      	ldr	r0, [sp, #16]
 800355c:	f7ff fee2 	bl	8003324 <CompareTwoTextString>
 8003560:	9005      	str	r0, [sp, #20]
 8003562:	2800      	cmp	r0, #0
 8003564:	f040 825d 	bne.w	8003a22 <USART_CheckTextCommandBundle+0x536>
 8003568:	2600      	movs	r6, #0
			while (!CompareTwoTextString(
 800356a:	f1a8 090c 	sub.w	r9, r8, #12
 800356e:	b2f5      	uxtb	r5, r6
					(uint8_t*) L6470_ApplicationCommand[L6470_AppCmdId].Mnemonic)) {
 8003570:	9500      	str	r5, [sp, #0]
 8003572:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
			while (!CompareTwoTextString(
 8003576:	4b95      	ldr	r3, [pc, #596]	; (80037cc <USART_CheckTextCommandBundle+0x2e0>)
 8003578:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800357c:	4648      	mov	r0, r9
 800357e:	f7ff fed1 	bl	8003324 <CompareTwoTextString>
 8003582:	4603      	mov	r3, r0
 8003584:	b970      	cbnz	r0, 80035a4 <USART_CheckTextCommandBundle+0xb8>
				if (L6470_AppCmdId == L6470APPCMDIDSIZE) {
 8003586:	3601      	adds	r6, #1
 8003588:	b2f2      	uxtb	r2, r6
 800358a:	2a13      	cmp	r2, #19
 800358c:	d1ef      	bne.n	800356e <USART_CheckTextCommandBundle+0x82>
					USART_Transmit(&huart2, (uint8_t* )"It is not possible to recognize any L6470 application command.\r\n\r\n");
 800358e:	4699      	mov	r9, r3
 8003590:	498f      	ldr	r1, [pc, #572]	; (80037d0 <USART_CheckTextCommandBundle+0x2e4>)
 8003592:	488d      	ldr	r0, [pc, #564]	; (80037c8 <USART_CheckTextCommandBundle+0x2dc>)
 8003594:	f7ff ff01 	bl	800339a <USART_Transmit>
					return RESET;
 8003598:	e7d4      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
			i++;
 800359a:	2001      	movs	r0, #1
				(uint8_t*) L6470_DaisyChainMnemonic[i].MotorIdMnemonic)) {
 800359c:	f10a 0356 	add.w	r3, sl, #86	; 0x56
 80035a0:	9304      	str	r3, [sp, #16]
 80035a2:	e7d6      	b.n	8003552 <USART_CheckTextCommandBundle+0x66>
			nr_parameters =
 80035a4:	9b00      	ldr	r3, [sp, #0]
 80035a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80035aa:	4a88      	ldr	r2, [pc, #544]	; (80037cc <USART_CheckTextCommandBundle+0x2e0>)
 80035ac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80035b0:	7b59      	ldrb	r1, [r3, #13]
			while (i < nr_parameters) {
 80035b2:	b331      	cbz	r1, 8003602 <USART_CheckTextCommandBundle+0x116>
			i = 0;
 80035b4:	9a05      	ldr	r2, [sp, #20]
				if ((*((pL6470_TextCommandBundle + CmdTxt_id)->Param[i]))
 80035b6:	7be3      	ldrb	r3, [r4, #15]
 80035b8:	b1eb      	cbz	r3, 80035f6 <USART_CheckTextCommandBundle+0x10a>
					i++;
 80035ba:	3201      	adds	r2, #1
 80035bc:	b2d2      	uxtb	r2, r2
			while (i < nr_parameters) {
 80035be:	340b      	adds	r4, #11
 80035c0:	4291      	cmp	r1, r2
 80035c2:	d1f8      	bne.n	80035b6 <USART_CheckTextCommandBundle+0xca>
			if (i < 3) /* Max possible parameters */
 80035c4:	2902      	cmp	r1, #2
 80035c6:	d91c      	bls.n	8003602 <USART_CheckTextCommandBundle+0x116>
			switch (L6470_AppCmdId) {
 80035c8:	2d12      	cmp	r5, #18
 80035ca:	d82d      	bhi.n	8003628 <USART_CheckTextCommandBundle+0x13c>
 80035cc:	e8df f015 	tbh	[pc, r5, lsl #1]
 80035d0:	00450029 	.word	0x00450029
 80035d4:	00b10082 	.word	0x00b10082
 80035d8:	010e00df 	.word	0x010e00df
 80035dc:	0153013c 	.word	0x0153013c
 80035e0:	01cb0181 	.word	0x01cb0181
 80035e4:	02050201 	.word	0x02050201
 80035e8:	020d0209 	.word	0x020d0209
 80035ec:	02150211 	.word	0x02150211
 80035f0:	021d0219 	.word	0x021d0219
 80035f4:	0221      	.short	0x0221
					USART_Transmit(&huart2, (uint8_t* )"The number of parameters related to the application command is not right.\r\n\r\n");
 80035f6:	4699      	mov	r9, r3
 80035f8:	4976      	ldr	r1, [pc, #472]	; (80037d4 <USART_CheckTextCommandBundle+0x2e8>)
 80035fa:	4873      	ldr	r0, [pc, #460]	; (80037c8 <USART_CheckTextCommandBundle+0x2dc>)
 80035fc:	f7ff fecd 	bl	800339a <USART_Transmit>
					return RESET;
 8003600:	e7a0      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
				if ((*((pL6470_TextCommandBundle + CmdTxt_id)->Param[i]))
 8003602:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003606:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800360a:	9a01      	ldr	r2, [sp, #4]
 800360c:	441a      	add	r2, r3
 800360e:	7bd3      	ldrb	r3, [r2, #15]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0d9      	beq.n	80035c8 <USART_CheckTextCommandBundle+0xdc>
					USART_Transmit(&huart2, (uint8_t* )"The number of parameters related to the application command is not right.\r\n\r\n");
 8003614:	496f      	ldr	r1, [pc, #444]	; (80037d4 <USART_CheckTextCommandBundle+0x2e8>)
 8003616:	486c      	ldr	r0, [pc, #432]	; (80037c8 <USART_CheckTextCommandBundle+0x2dc>)
 8003618:	f7ff febf 	bl	800339a <USART_Transmit>
					return RESET;
 800361c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003620:	e790      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x00;
 8003622:	2300      	movs	r3, #0
 8003624:	9a03      	ldr	r2, [sp, #12]
 8003626:	54bb      	strb	r3, [r7, r2]
							!= '\0')));
 8003628:	9b02      	ldr	r3, [sp, #8]
 800362a:	4543      	cmp	r3, r8
 800362c:	f000 8203 	beq.w	8003a36 <USART_CheckTextCommandBundle+0x54a>
			&& (((*((pL6470_TextCommandBundle + CmdTxt_id)->MotorName)) != '\0')
 8003630:	f898 2021 	ldrb.w	r2, [r8, #33]	; 0x21
 8003634:	b96a      	cbnz	r2, 8003652 <USART_CheckTextCommandBundle+0x166>
					|| ((*((pL6470_TextCommandBundle + CmdTxt_id)->CommandName))
 8003636:	f898 2024 	ldrb.w	r2, [r8, #36]	; 0x24
 800363a:	b952      	cbnz	r2, 8003652 <USART_CheckTextCommandBundle+0x166>
					|| ((*((pL6470_TextCommandBundle + CmdTxt_id)->Param[0]))
 800363c:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
 8003640:	b93a      	cbnz	r2, 8003652 <USART_CheckTextCommandBundle+0x166>
					|| ((*((pL6470_TextCommandBundle + CmdTxt_id)->Param[1]))
 8003642:	f898 203b 	ldrb.w	r2, [r8, #59]	; 0x3b
 8003646:	b922      	cbnz	r2, 8003652 <USART_CheckTextCommandBundle+0x166>
					|| ((*((pL6470_TextCommandBundle + CmdTxt_id)->Param[2]))
 8003648:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 81ef 	beq.w	8003a30 <USART_CheckTextCommandBundle+0x544>
 8003652:	f108 0830 	add.w	r8, r8, #48	; 0x30
		uint8_t* pL6470_DaisyChainSpiTxStruct) {
 8003656:	9d04      	ldr	r5, [sp, #16]
 8003658:	e760      	b.n	800351c <USART_CheckTextCommandBundle+0x30>
			switch (L6470_AppCmdId) {
 800365a:	2600      	movs	r6, #0
						(uint8_t*) L6470_Register[L6470_RegId].Name)) {
 800365c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80037dc <USART_CheckTextCommandBundle+0x2f0>
				while (!CompareTwoTextString(
 8003660:	b2f4      	uxtb	r4, r6
						(uint8_t*) L6470_Register[L6470_RegId].Name)) {
 8003662:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003666:	eb09 0181 	add.w	r1, r9, r1, lsl #2
				while (!CompareTwoTextString(
 800366a:	3101      	adds	r1, #1
 800366c:	4640      	mov	r0, r8
 800366e:	f7ff fe59 	bl	8003324 <CompareTwoTextString>
 8003672:	4603      	mov	r3, r0
 8003674:	b948      	cbnz	r0, 800368a <USART_CheckTextCommandBundle+0x19e>
					if (L6470_RegId == L6470REGIDSIZE) {
 8003676:	3601      	adds	r6, #1
 8003678:	b2f2      	uxtb	r2, r6
 800367a:	2a19      	cmp	r2, #25
 800367c:	d1f0      	bne.n	8003660 <USART_CheckTextCommandBundle+0x174>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any L6470 register name.\r\n\r\n");
 800367e:	4699      	mov	r9, r3
 8003680:	4955      	ldr	r1, [pc, #340]	; (80037d8 <USART_CheckTextCommandBundle+0x2ec>)
 8003682:	4851      	ldr	r0, [pc, #324]	; (80037c8 <USART_CheckTextCommandBundle+0x2dc>)
 8003684:	f7ff fe89 	bl	800339a <USART_Transmit>
						return RESET;
 8003688:	e75c      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
						| L6470_Register[L6470_RegId].Address;
 800368a:	4b54      	ldr	r3, [pc, #336]	; (80037dc <USART_CheckTextCommandBundle+0x2f0>)
 800368c:	2214      	movs	r2, #20
 800368e:	fb02 f404 	mul.w	r4, r2, r4
 8003692:	191a      	adds	r2, r3, r4
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x00
 8003694:	5d1b      	ldrb	r3, [r3, r4]
 8003696:	9903      	ldr	r1, [sp, #12]
 8003698:	547b      	strb	r3, [r7, r1]
				PARAMLengthBytes = L6470_Register[L6470_RegId].LengthByte;
 800369a:	7b94      	ldrb	r4, [r2, #14]
				if (!str2num(
 800369c:	a906      	add	r1, sp, #24
 800369e:	f108 000b 	add.w	r0, r8, #11
 80036a2:	f7ff fe52 	bl	800334a <str2num>
 80036a6:	b178      	cbz	r0, 80036c8 <USART_CheckTextCommandBundle+0x1dc>
									>> (8 * (PARAMLengthBytes - spibyte)));
 80036a8:	9a06      	ldr	r2, [sp, #24]
				for (spibyte = 1; spibyte < (PARAMLengthBytes + 1); spibyte++) {
 80036aa:	2c00      	cmp	r4, #0
 80036ac:	d0bc      	beq.n	8003628 <USART_CheckTextCommandBundle+0x13c>
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 80036ae:	eb07 0145 	add.w	r1, r7, r5, lsl #1
									>> (8 * (PARAMLengthBytes - spibyte)));
 80036b2:	1b63      	subs	r3, r4, r5
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	fa22 f303 	lsr.w	r3, r2, r3
							(uint8_t) (NumericValue
 80036ba:	9803      	ldr	r0, [sp, #12]
 80036bc:	540b      	strb	r3, [r1, r0]
				for (spibyte = 1; spibyte < (PARAMLengthBytes + 1); spibyte++) {
 80036be:	3501      	adds	r5, #1
 80036c0:	b2ed      	uxtb	r5, r5
 80036c2:	42ac      	cmp	r4, r5
 80036c4:	d2f3      	bcs.n	80036ae <USART_CheckTextCommandBundle+0x1c2>
 80036c6:	e7af      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
					USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any numeric value.\r\n\r\n");
 80036c8:	4681      	mov	r9, r0
 80036ca:	4945      	ldr	r1, [pc, #276]	; (80037e0 <USART_CheckTextCommandBundle+0x2f4>)
 80036cc:	483e      	ldr	r0, [pc, #248]	; (80037c8 <USART_CheckTextCommandBundle+0x2dc>)
 80036ce:	f7ff fe64 	bl	800339a <USART_Transmit>
					return RESET;
 80036d2:	e737      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
			switch (L6470_AppCmdId) {
 80036d4:	2500      	movs	r5, #0
						(uint8_t*) L6470_Register[L6470_RegId].Name)) {
 80036d6:	4e41      	ldr	r6, [pc, #260]	; (80037dc <USART_CheckTextCommandBundle+0x2f0>)
				while (!CompareTwoTextString(
 80036d8:	b2ec      	uxtb	r4, r5
						(uint8_t*) L6470_Register[L6470_RegId].Name)) {
 80036da:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80036de:	eb06 0181 	add.w	r1, r6, r1, lsl #2
				while (!CompareTwoTextString(
 80036e2:	3101      	adds	r1, #1
 80036e4:	4640      	mov	r0, r8
 80036e6:	f7ff fe1d 	bl	8003324 <CompareTwoTextString>
 80036ea:	4603      	mov	r3, r0
 80036ec:	b948      	cbnz	r0, 8003702 <USART_CheckTextCommandBundle+0x216>
					if (L6470_RegId == L6470REGIDSIZE) {
 80036ee:	3501      	adds	r5, #1
 80036f0:	b2ea      	uxtb	r2, r5
 80036f2:	2a19      	cmp	r2, #25
 80036f4:	d1f0      	bne.n	80036d8 <USART_CheckTextCommandBundle+0x1ec>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any L6470 register name.\r\n\r\n");
 80036f6:	4699      	mov	r9, r3
 80036f8:	4937      	ldr	r1, [pc, #220]	; (80037d8 <USART_CheckTextCommandBundle+0x2ec>)
 80036fa:	4833      	ldr	r0, [pc, #204]	; (80037c8 <USART_CheckTextCommandBundle+0x2dc>)
 80036fc:	f7ff fe4d 	bl	800339a <USART_Transmit>
						return RESET;
 8003700:	e720      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
						| L6470_Register[L6470_RegId].Address;
 8003702:	4b36      	ldr	r3, [pc, #216]	; (80037dc <USART_CheckTextCommandBundle+0x2f0>)
 8003704:	2214      	movs	r2, #20
 8003706:	fb02 f404 	mul.w	r4, r2, r4
 800370a:	191a      	adds	r2, r3, r4
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x20
 800370c:	5d1b      	ldrb	r3, [r3, r4]
 800370e:	f043 0320 	orr.w	r3, r3, #32
 8003712:	9903      	ldr	r1, [sp, #12]
 8003714:	547b      	strb	r3, [r7, r1]
				PARAMLengthBytes = L6470_Register[L6470_RegId].LengthByte;
 8003716:	7b92      	ldrb	r2, [r2, #14]
				for (spibyte = 1; spibyte < (PARAMLengthBytes + 1); spibyte++) {
 8003718:	2a00      	cmp	r2, #0
 800371a:	d085      	beq.n	8003628 <USART_CheckTextCommandBundle+0x13c>
 800371c:	2301      	movs	r3, #1
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 800371e:	2100      	movs	r1, #0
 8003720:	eb07 0043 	add.w	r0, r7, r3, lsl #1
 8003724:	9c03      	ldr	r4, [sp, #12]
 8003726:	5501      	strb	r1, [r0, r4]
				for (spibyte = 1; spibyte < (PARAMLengthBytes + 1); spibyte++) {
 8003728:	3301      	adds	r3, #1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	429a      	cmp	r2, r3
 800372e:	d2f7      	bcs.n	8003720 <USART_CheckTextCommandBundle+0x234>
 8003730:	e77a      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
			switch (L6470_AppCmdId) {
 8003732:	2500      	movs	r5, #0
						(uint8_t*) L6470_Direction[L6470_DirId].Mnemonic)) {
 8003734:	4e2b      	ldr	r6, [pc, #172]	; (80037e4 <USART_CheckTextCommandBundle+0x2f8>)
 8003736:	b2ec      	uxtb	r4, r5
 8003738:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
				while (!CompareTwoTextString(
 800373c:	4431      	add	r1, r6
 800373e:	4640      	mov	r0, r8
 8003740:	f7ff fdf0 	bl	8003324 <CompareTwoTextString>
 8003744:	4603      	mov	r3, r0
 8003746:	b948      	cbnz	r0, 800375c <USART_CheckTextCommandBundle+0x270>
					if (L6470_DirId == L6470DIRIDSIZE) {
 8003748:	3501      	adds	r5, #1
 800374a:	b2ea      	uxtb	r2, r5
 800374c:	2a02      	cmp	r2, #2
 800374e:	d1f2      	bne.n	8003736 <USART_CheckTextCommandBundle+0x24a>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any direction.\r\n\r\n");
 8003750:	4699      	mov	r9, r3
 8003752:	4925      	ldr	r1, [pc, #148]	; (80037e8 <USART_CheckTextCommandBundle+0x2fc>)
 8003754:	481c      	ldr	r0, [pc, #112]	; (80037c8 <USART_CheckTextCommandBundle+0x2dc>)
 8003756:	f7ff fe20 	bl	800339a <USART_Transmit>
						return RESET;
 800375a:	e6f3      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x50
 800375c:	f044 0450 	orr.w	r4, r4, #80	; 0x50
 8003760:	9b03      	ldr	r3, [sp, #12]
 8003762:	54fc      	strb	r4, [r7, r3]
				if (!str2num(
 8003764:	a906      	add	r1, sp, #24
 8003766:	f108 000b 	add.w	r0, r8, #11
 800376a:	f7ff fdee 	bl	800334a <str2num>
 800376e:	b140      	cbz	r0, 8003782 <USART_CheckTextCommandBundle+0x296>
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 8003770:	9a06      	ldr	r2, [sp, #24]
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 8003772:	9b03      	ldr	r3, [sp, #12]
 8003774:	443b      	add	r3, r7
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 8003776:	0c11      	lsrs	r1, r2, #16
 8003778:	7099      	strb	r1, [r3, #2]
 800377a:	0a11      	lsrs	r1, r2, #8
 800377c:	7119      	strb	r1, [r3, #4]
 800377e:	719a      	strb	r2, [r3, #6]
				for (spibyte = 1; spibyte < (3 + 1); spibyte++) {
 8003780:	e752      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
					USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any numeric value.\r\n\r\n");
 8003782:	4681      	mov	r9, r0
 8003784:	4916      	ldr	r1, [pc, #88]	; (80037e0 <USART_CheckTextCommandBundle+0x2f4>)
 8003786:	4810      	ldr	r0, [pc, #64]	; (80037c8 <USART_CheckTextCommandBundle+0x2dc>)
 8003788:	f7ff fe07 	bl	800339a <USART_Transmit>
					return RESET;
 800378c:	e6da      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
			switch (L6470_AppCmdId) {
 800378e:	2500      	movs	r5, #0
						(uint8_t*) L6470_Direction[L6470_DirId].Mnemonic)) {
 8003790:	4e14      	ldr	r6, [pc, #80]	; (80037e4 <USART_CheckTextCommandBundle+0x2f8>)
 8003792:	b2ec      	uxtb	r4, r5
 8003794:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
				while (!CompareTwoTextString(
 8003798:	4431      	add	r1, r6
 800379a:	4640      	mov	r0, r8
 800379c:	f7ff fdc2 	bl	8003324 <CompareTwoTextString>
 80037a0:	4603      	mov	r3, r0
 80037a2:	b948      	cbnz	r0, 80037b8 <USART_CheckTextCommandBundle+0x2cc>
					if (L6470_DirId == L6470DIRIDSIZE) {
 80037a4:	3501      	adds	r5, #1
 80037a6:	b2ea      	uxtb	r2, r5
 80037a8:	2a02      	cmp	r2, #2
 80037aa:	d1f2      	bne.n	8003792 <USART_CheckTextCommandBundle+0x2a6>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any direction.\r\n\r\n");
 80037ac:	4699      	mov	r9, r3
 80037ae:	490e      	ldr	r1, [pc, #56]	; (80037e8 <USART_CheckTextCommandBundle+0x2fc>)
 80037b0:	4805      	ldr	r0, [pc, #20]	; (80037c8 <USART_CheckTextCommandBundle+0x2dc>)
 80037b2:	f7ff fdf2 	bl	800339a <USART_Transmit>
						return RESET;
 80037b6:	e6c5      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x58
 80037b8:	f044 0458 	orr.w	r4, r4, #88	; 0x58
 80037bc:	9b03      	ldr	r3, [sp, #12]
 80037be:	54fc      	strb	r4, [r7, r3]
				break;
 80037c0:	e732      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
 80037c2:	bf00      	nop
 80037c4:	080047bc 	.word	0x080047bc
 80037c8:	200004c8 	.word	0x200004c8
 80037cc:	08004164 	.word	0x08004164
 80037d0:	080047ec 	.word	0x080047ec
 80037d4:	08004830 	.word	0x08004830
 80037d8:	08004880 	.word	0x08004880
 80037dc:	08004270 	.word	0x08004270
 80037e0:	080048c0 	.word	0x080048c0
 80037e4:	08004464 	.word	0x08004464
 80037e8:	080048f8 	.word	0x080048f8
			switch (L6470_AppCmdId) {
 80037ec:	2500      	movs	r5, #0
						(uint8_t*) L6470_Direction[L6470_DirId].Mnemonic)) {
 80037ee:	4e93      	ldr	r6, [pc, #588]	; (8003a3c <USART_CheckTextCommandBundle+0x550>)
 80037f0:	b2ec      	uxtb	r4, r5
 80037f2:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
				while (!CompareTwoTextString(
 80037f6:	4431      	add	r1, r6
 80037f8:	4640      	mov	r0, r8
 80037fa:	f7ff fd93 	bl	8003324 <CompareTwoTextString>
 80037fe:	4603      	mov	r3, r0
 8003800:	b948      	cbnz	r0, 8003816 <USART_CheckTextCommandBundle+0x32a>
					if (L6470_DirId == L6470DIRIDSIZE) {
 8003802:	3501      	adds	r5, #1
 8003804:	b2ea      	uxtb	r2, r5
 8003806:	2a02      	cmp	r2, #2
 8003808:	d1f2      	bne.n	80037f0 <USART_CheckTextCommandBundle+0x304>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any direction.\r\n\r\n");
 800380a:	4699      	mov	r9, r3
 800380c:	498c      	ldr	r1, [pc, #560]	; (8003a40 <USART_CheckTextCommandBundle+0x554>)
 800380e:	488d      	ldr	r0, [pc, #564]	; (8003a44 <USART_CheckTextCommandBundle+0x558>)
 8003810:	f7ff fdc3 	bl	800339a <USART_Transmit>
						return RESET;
 8003814:	e696      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x40
 8003816:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 800381a:	9b03      	ldr	r3, [sp, #12]
 800381c:	54fc      	strb	r4, [r7, r3]
				if (!str2num(
 800381e:	a906      	add	r1, sp, #24
 8003820:	f108 000b 	add.w	r0, r8, #11
 8003824:	f7ff fd91 	bl	800334a <str2num>
 8003828:	b140      	cbz	r0, 800383c <USART_CheckTextCommandBundle+0x350>
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 800382a:	9a06      	ldr	r2, [sp, #24]
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 800382c:	9b03      	ldr	r3, [sp, #12]
 800382e:	443b      	add	r3, r7
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 8003830:	0c11      	lsrs	r1, r2, #16
 8003832:	7099      	strb	r1, [r3, #2]
 8003834:	0a11      	lsrs	r1, r2, #8
 8003836:	7119      	strb	r1, [r3, #4]
 8003838:	719a      	strb	r2, [r3, #6]
				for (spibyte = 1; spibyte < (3 + 1); spibyte++) {
 800383a:	e6f5      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
					USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any numeric value.\r\n\r\n");
 800383c:	4681      	mov	r9, r0
 800383e:	4982      	ldr	r1, [pc, #520]	; (8003a48 <USART_CheckTextCommandBundle+0x55c>)
 8003840:	4880      	ldr	r0, [pc, #512]	; (8003a44 <USART_CheckTextCommandBundle+0x558>)
 8003842:	f7ff fdaa 	bl	800339a <USART_Transmit>
					return RESET;
 8003846:	e67d      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x60;
 8003848:	2360      	movs	r3, #96	; 0x60
 800384a:	9a03      	ldr	r2, [sp, #12]
 800384c:	54bb      	strb	r3, [r7, r2]
				if (!str2num(
 800384e:	a906      	add	r1, sp, #24
 8003850:	4640      	mov	r0, r8
 8003852:	f7ff fd7a 	bl	800334a <str2num>
 8003856:	b140      	cbz	r0, 800386a <USART_CheckTextCommandBundle+0x37e>
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 8003858:	9a06      	ldr	r2, [sp, #24]
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 800385a:	9b03      	ldr	r3, [sp, #12]
 800385c:	443b      	add	r3, r7
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 800385e:	0c11      	lsrs	r1, r2, #16
 8003860:	7099      	strb	r1, [r3, #2]
 8003862:	0a11      	lsrs	r1, r2, #8
 8003864:	7119      	strb	r1, [r3, #4]
 8003866:	719a      	strb	r2, [r3, #6]
				for (spibyte = 1; spibyte < (3 + 1); spibyte++) {
 8003868:	e6de      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
					USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any numeric value.\r\n\r\n");
 800386a:	4681      	mov	r9, r0
 800386c:	4976      	ldr	r1, [pc, #472]	; (8003a48 <USART_CheckTextCommandBundle+0x55c>)
 800386e:	4875      	ldr	r0, [pc, #468]	; (8003a44 <USART_CheckTextCommandBundle+0x558>)
 8003870:	f7ff fd93 	bl	800339a <USART_Transmit>
					return RESET;
 8003874:	e666      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
			switch (L6470_AppCmdId) {
 8003876:	2500      	movs	r5, #0
						(uint8_t*) L6470_Direction[L6470_DirId].Mnemonic)) {
 8003878:	4e70      	ldr	r6, [pc, #448]	; (8003a3c <USART_CheckTextCommandBundle+0x550>)
 800387a:	b2ec      	uxtb	r4, r5
 800387c:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
				while (!CompareTwoTextString(
 8003880:	4431      	add	r1, r6
 8003882:	4640      	mov	r0, r8
 8003884:	f7ff fd4e 	bl	8003324 <CompareTwoTextString>
 8003888:	4603      	mov	r3, r0
 800388a:	b948      	cbnz	r0, 80038a0 <USART_CheckTextCommandBundle+0x3b4>
					if (L6470_DirId == L6470DIRIDSIZE) {
 800388c:	3501      	adds	r5, #1
 800388e:	b2ea      	uxtb	r2, r5
 8003890:	2a02      	cmp	r2, #2
 8003892:	d1f2      	bne.n	800387a <USART_CheckTextCommandBundle+0x38e>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any direction.\r\n\r\n");
 8003894:	4699      	mov	r9, r3
 8003896:	496a      	ldr	r1, [pc, #424]	; (8003a40 <USART_CheckTextCommandBundle+0x554>)
 8003898:	486a      	ldr	r0, [pc, #424]	; (8003a44 <USART_CheckTextCommandBundle+0x558>)
 800389a:	f7ff fd7e 	bl	800339a <USART_Transmit>
						return RESET;
 800389e:	e651      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x68
 80038a0:	f044 0468 	orr.w	r4, r4, #104	; 0x68
 80038a4:	9b03      	ldr	r3, [sp, #12]
 80038a6:	54fc      	strb	r4, [r7, r3]
				if (!str2num(
 80038a8:	a906      	add	r1, sp, #24
 80038aa:	f108 000b 	add.w	r0, r8, #11
 80038ae:	f7ff fd4c 	bl	800334a <str2num>
 80038b2:	b140      	cbz	r0, 80038c6 <USART_CheckTextCommandBundle+0x3da>
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 80038b4:	9a06      	ldr	r2, [sp, #24]
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 80038b6:	9b03      	ldr	r3, [sp, #12]
 80038b8:	443b      	add	r3, r7
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 80038ba:	0c11      	lsrs	r1, r2, #16
 80038bc:	7099      	strb	r1, [r3, #2]
 80038be:	0a11      	lsrs	r1, r2, #8
 80038c0:	7119      	strb	r1, [r3, #4]
 80038c2:	719a      	strb	r2, [r3, #6]
				for (spibyte = 1; spibyte < (3 + 1); spibyte++) {
 80038c4:	e6b0      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
					USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any numeric value.\r\n\r\n");
 80038c6:	4681      	mov	r9, r0
 80038c8:	495f      	ldr	r1, [pc, #380]	; (8003a48 <USART_CheckTextCommandBundle+0x55c>)
 80038ca:	485e      	ldr	r0, [pc, #376]	; (8003a44 <USART_CheckTextCommandBundle+0x558>)
 80038cc:	f7ff fd65 	bl	800339a <USART_Transmit>
					return RESET;
 80038d0:	e638      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
			switch (L6470_AppCmdId) {
 80038d2:	2500      	movs	r5, #0
				while (!CompareTwoTextString(
 80038d4:	b2ec      	uxtb	r4, r5
						(uint8_t*) L6470_ACT[L6470_ActId].Mnemonic)) {
 80038d6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
				while (!CompareTwoTextString(
 80038da:	4b5c      	ldr	r3, [pc, #368]	; (8003a4c <USART_CheckTextCommandBundle+0x560>)
 80038dc:	4419      	add	r1, r3
 80038de:	4640      	mov	r0, r8
 80038e0:	f7ff fd20 	bl	8003324 <CompareTwoTextString>
 80038e4:	4603      	mov	r3, r0
 80038e6:	b948      	cbnz	r0, 80038fc <USART_CheckTextCommandBundle+0x410>
					if (L6470_ActId == L6470ACTIDSIZE) {
 80038e8:	3501      	adds	r5, #1
 80038ea:	b2ea      	uxtb	r2, r5
 80038ec:	2a02      	cmp	r2, #2
 80038ee:	d1f1      	bne.n	80038d4 <USART_CheckTextCommandBundle+0x3e8>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any action.\r\n\r\n");
 80038f0:	4699      	mov	r9, r3
 80038f2:	4957      	ldr	r1, [pc, #348]	; (8003a50 <USART_CheckTextCommandBundle+0x564>)
 80038f4:	4853      	ldr	r0, [pc, #332]	; (8003a44 <USART_CheckTextCommandBundle+0x558>)
 80038f6:	f7ff fd50 	bl	800339a <USART_Transmit>
						return RESET;
 80038fa:	e623      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
						| (L6470_ActId << 3);
 80038fc:	00e4      	lsls	r4, r4, #3
 80038fe:	f064 047d 	orn	r4, r4, #125	; 0x7d
 8003902:	b2e4      	uxtb	r4, r4
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x82
 8003904:	9b03      	ldr	r3, [sp, #12]
 8003906:	54fc      	strb	r4, [r7, r3]
				while (!CompareTwoTextString(
 8003908:	2600      	movs	r6, #0
 800390a:	f108 090b 	add.w	r9, r8, #11
 800390e:	b2f5      	uxtb	r5, r6
						(uint8_t*) L6470_Direction[L6470_DirId].Mnemonic)) {
 8003910:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
				while (!CompareTwoTextString(
 8003914:	4b49      	ldr	r3, [pc, #292]	; (8003a3c <USART_CheckTextCommandBundle+0x550>)
 8003916:	4419      	add	r1, r3
 8003918:	4648      	mov	r0, r9
 800391a:	f7ff fd03 	bl	8003324 <CompareTwoTextString>
 800391e:	4603      	mov	r3, r0
 8003920:	b948      	cbnz	r0, 8003936 <USART_CheckTextCommandBundle+0x44a>
					if (L6470_DirId == L6470DIRIDSIZE) {
 8003922:	3601      	adds	r6, #1
 8003924:	b2f2      	uxtb	r2, r6
 8003926:	2a02      	cmp	r2, #2
 8003928:	d1f1      	bne.n	800390e <USART_CheckTextCommandBundle+0x422>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any direction.\r\n\r\n");
 800392a:	4699      	mov	r9, r3
 800392c:	4944      	ldr	r1, [pc, #272]	; (8003a40 <USART_CheckTextCommandBundle+0x554>)
 800392e:	4845      	ldr	r0, [pc, #276]	; (8003a44 <USART_CheckTextCommandBundle+0x558>)
 8003930:	f7ff fd33 	bl	800339a <USART_Transmit>
						return RESET;
 8003934:	e606      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) |=
 8003936:	432c      	orrs	r4, r5
 8003938:	9b03      	ldr	r3, [sp, #12]
 800393a:	54fc      	strb	r4, [r7, r3]
				if (!str2num(
 800393c:	a906      	add	r1, sp, #24
 800393e:	f108 0016 	add.w	r0, r8, #22
 8003942:	f7ff fd02 	bl	800334a <str2num>
 8003946:	b140      	cbz	r0, 800395a <USART_CheckTextCommandBundle+0x46e>
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 8003948:	9a06      	ldr	r2, [sp, #24]
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 800394a:	9b03      	ldr	r3, [sp, #12]
 800394c:	443b      	add	r3, r7
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 800394e:	0c11      	lsrs	r1, r2, #16
 8003950:	7099      	strb	r1, [r3, #2]
 8003952:	0a11      	lsrs	r1, r2, #8
 8003954:	7119      	strb	r1, [r3, #4]
 8003956:	719a      	strb	r2, [r3, #6]
				for (spibyte = 1; spibyte < (3 + 1); spibyte++) {
 8003958:	e666      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
					USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any numeric value.\r\n\r\n");
 800395a:	4681      	mov	r9, r0
 800395c:	493a      	ldr	r1, [pc, #232]	; (8003a48 <USART_CheckTextCommandBundle+0x55c>)
 800395e:	4839      	ldr	r0, [pc, #228]	; (8003a44 <USART_CheckTextCommandBundle+0x558>)
 8003960:	f7ff fd1b 	bl	800339a <USART_Transmit>
					return RESET;
 8003964:	e5ee      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
			switch (L6470_AppCmdId) {
 8003966:	2500      	movs	r5, #0
				while (!CompareTwoTextString(
 8003968:	b2ec      	uxtb	r4, r5
						(uint8_t*) L6470_ACT[L6470_ActId].Mnemonic)) {
 800396a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
				while (!CompareTwoTextString(
 800396e:	4b37      	ldr	r3, [pc, #220]	; (8003a4c <USART_CheckTextCommandBundle+0x560>)
 8003970:	4419      	add	r1, r3
 8003972:	4640      	mov	r0, r8
 8003974:	f7ff fcd6 	bl	8003324 <CompareTwoTextString>
 8003978:	4603      	mov	r3, r0
 800397a:	b948      	cbnz	r0, 8003990 <USART_CheckTextCommandBundle+0x4a4>
					if (L6470_ActId == L6470ACTIDSIZE) {
 800397c:	3501      	adds	r5, #1
 800397e:	b2ea      	uxtb	r2, r5
 8003980:	2a02      	cmp	r2, #2
 8003982:	d1f1      	bne.n	8003968 <USART_CheckTextCommandBundle+0x47c>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any action.\r\n\r\n");
 8003984:	4699      	mov	r9, r3
 8003986:	4932      	ldr	r1, [pc, #200]	; (8003a50 <USART_CheckTextCommandBundle+0x564>)
 8003988:	482e      	ldr	r0, [pc, #184]	; (8003a44 <USART_CheckTextCommandBundle+0x558>)
 800398a:	f7ff fd06 	bl	800339a <USART_Transmit>
						return RESET;
 800398e:	e5d9      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
						| (L6470_ActId << 3);
 8003990:	00e4      	lsls	r4, r4, #3
 8003992:	f064 046d 	orn	r4, r4, #109	; 0x6d
 8003996:	b2e4      	uxtb	r4, r4
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x92
 8003998:	9b03      	ldr	r3, [sp, #12]
 800399a:	54fc      	strb	r4, [r7, r3]
				while (!CompareTwoTextString(
 800399c:	2600      	movs	r6, #0
 800399e:	f108 090b 	add.w	r9, r8, #11
 80039a2:	b2f5      	uxtb	r5, r6
						(uint8_t*) L6470_Direction[L6470_DirId].Mnemonic)) {
 80039a4:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
				while (!CompareTwoTextString(
 80039a8:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <USART_CheckTextCommandBundle+0x550>)
 80039aa:	4419      	add	r1, r3
 80039ac:	4648      	mov	r0, r9
 80039ae:	f7ff fcb9 	bl	8003324 <CompareTwoTextString>
 80039b2:	4603      	mov	r3, r0
 80039b4:	b948      	cbnz	r0, 80039ca <USART_CheckTextCommandBundle+0x4de>
					if (L6470_DirId == L6470DIRIDSIZE) {
 80039b6:	3601      	adds	r6, #1
 80039b8:	b2f2      	uxtb	r2, r6
 80039ba:	2a02      	cmp	r2, #2
 80039bc:	d1f1      	bne.n	80039a2 <USART_CheckTextCommandBundle+0x4b6>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any direction.\r\n\r\n");
 80039be:	4699      	mov	r9, r3
 80039c0:	491f      	ldr	r1, [pc, #124]	; (8003a40 <USART_CheckTextCommandBundle+0x554>)
 80039c2:	4820      	ldr	r0, [pc, #128]	; (8003a44 <USART_CheckTextCommandBundle+0x558>)
 80039c4:	f7ff fce9 	bl	800339a <USART_Transmit>
						return RESET;
 80039c8:	e5bc      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) |=
 80039ca:	432c      	orrs	r4, r5
 80039cc:	9b03      	ldr	r3, [sp, #12]
 80039ce:	54fc      	strb	r4, [r7, r3]
				break;
 80039d0:	e62a      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x70;
 80039d2:	2370      	movs	r3, #112	; 0x70
 80039d4:	9a03      	ldr	r2, [sp, #12]
 80039d6:	54bb      	strb	r3, [r7, r2]
				break;
 80039d8:	e626      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x78;
 80039da:	2378      	movs	r3, #120	; 0x78
 80039dc:	9a03      	ldr	r2, [sp, #12]
 80039de:	54bb      	strb	r3, [r7, r2]
				break;
 80039e0:	e622      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xD8;
 80039e2:	23d8      	movs	r3, #216	; 0xd8
 80039e4:	9a03      	ldr	r2, [sp, #12]
 80039e6:	54bb      	strb	r3, [r7, r2]
				break;
 80039e8:	e61e      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xC0;
 80039ea:	23c0      	movs	r3, #192	; 0xc0
 80039ec:	9a03      	ldr	r2, [sp, #12]
 80039ee:	54bb      	strb	r3, [r7, r2]
				break;
 80039f0:	e61a      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xB0;
 80039f2:	23b0      	movs	r3, #176	; 0xb0
 80039f4:	9a03      	ldr	r2, [sp, #12]
 80039f6:	54bb      	strb	r3, [r7, r2]
				break;
 80039f8:	e616      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xB8;
 80039fa:	23b8      	movs	r3, #184	; 0xb8
 80039fc:	9a03      	ldr	r2, [sp, #12]
 80039fe:	54bb      	strb	r3, [r7, r2]
				break;
 8003a00:	e612      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xA0;
 8003a02:	23a0      	movs	r3, #160	; 0xa0
 8003a04:	9a03      	ldr	r2, [sp, #12]
 8003a06:	54bb      	strb	r3, [r7, r2]
				break;
 8003a08:	e60e      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xA8;
 8003a0a:	23a8      	movs	r3, #168	; 0xa8
 8003a0c:	9a03      	ldr	r2, [sp, #12]
 8003a0e:	54bb      	strb	r3, [r7, r2]
				break;
 8003a10:	e60a      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xD0;
 8003a12:	23d0      	movs	r3, #208	; 0xd0
 8003a14:	9a03      	ldr	r2, [sp, #12]
 8003a16:	54bb      	strb	r3, [r7, r2]
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 8003a18:	18bb      	adds	r3, r7, r2
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	709a      	strb	r2, [r3, #2]
 8003a1e:	711a      	strb	r2, [r3, #4]
				for (spibyte = 1; spibyte < 2 + 1; spibyte++) {
 8003a20:	e602      	b.n	8003628 <USART_CheckTextCommandBundle+0x13c>
			USART_Transmit(&huart2, (uint8_t *)"Both entered commands are addressing the same L6470.\r\n\r\n");
 8003a22:	490c      	ldr	r1, [pc, #48]	; (8003a54 <USART_CheckTextCommandBundle+0x568>)
 8003a24:	4807      	ldr	r0, [pc, #28]	; (8003a44 <USART_CheckTextCommandBundle+0x558>)
 8003a26:	f7ff fcb8 	bl	800339a <USART_Transmit>
			return RESET;
 8003a2a:	f04f 0900 	mov.w	r9, #0
 8003a2e:	e589      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
	return SET;
 8003a30:	f04f 0901 	mov.w	r9, #1
 8003a34:	e586      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
 8003a36:	f04f 0901 	mov.w	r9, #1
 8003a3a:	e583      	b.n	8003544 <USART_CheckTextCommandBundle+0x58>
 8003a3c:	08004464 	.word	0x08004464
 8003a40:	080048f8 	.word	0x080048f8
 8003a44:	200004c8 	.word	0x200004c8
 8003a48:	080048c0 	.word	0x080048c0
 8003a4c:	08004478 	.word	0x08004478
 8003a50:	0800492c 	.word	0x0800492c
 8003a54:	0800495c 	.word	0x0800495c

08003a58 <USART_TxWelcomeMessage>:
void USART_TxWelcomeMessage(void) {
 8003a58:	b510      	push	{r4, lr}
	USART_Transmit(&huart2, (uint8_t* )"\r\n");
 8003a5a:	4c13      	ldr	r4, [pc, #76]	; (8003aa8 <USART_TxWelcomeMessage+0x50>)
 8003a5c:	4913      	ldr	r1, [pc, #76]	; (8003aac <USART_TxWelcomeMessage+0x54>)
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f7ff fc9b 	bl	800339a <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" X-NUCLEO-IHM02A1\r\n");
 8003a64:	4912      	ldr	r1, [pc, #72]	; (8003ab0 <USART_TxWelcomeMessage+0x58>)
 8003a66:	4620      	mov	r0, r4
 8003a68:	f7ff fc97 	bl	800339a <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" -------------------------------------------\r\n");
 8003a6c:	4911      	ldr	r1, [pc, #68]	; (8003ab4 <USART_TxWelcomeMessage+0x5c>)
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f7ff fc93 	bl	800339a <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" Dual L6470 Expansion Board for STM32 NUCLEO\r\n");
 8003a74:	4910      	ldr	r1, [pc, #64]	; (8003ab8 <USART_TxWelcomeMessage+0x60>)
 8003a76:	4620      	mov	r0, r4
 8003a78:	f7ff fc8f 	bl	800339a <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" Stacked on ");
 8003a7c:	490f      	ldr	r1, [pc, #60]	; (8003abc <USART_TxWelcomeMessage+0x64>)
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f7ff fc8b 	bl	800339a <USART_Transmit>
	USART_Transmit(&huart2, NUCLEO_BOARD_NAME);
 8003a84:	490e      	ldr	r1, [pc, #56]	; (8003ac0 <USART_TxWelcomeMessage+0x68>)
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7ff fc87 	bl	800339a <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" \r\n");
 8003a8c:	490d      	ldr	r1, [pc, #52]	; (8003ac4 <USART_TxWelcomeMessage+0x6c>)
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f7ff fc83 	bl	800339a <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" X-CUBE-SPN2 v1.1.1\r\n");
 8003a94:	490c      	ldr	r1, [pc, #48]	; (8003ac8 <USART_TxWelcomeMessage+0x70>)
 8003a96:	4620      	mov	r0, r4
 8003a98:	f7ff fc7f 	bl	800339a <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" STMicroelectronics, 2015\r\n\r\n");
 8003a9c:	490b      	ldr	r1, [pc, #44]	; (8003acc <USART_TxWelcomeMessage+0x74>)
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f7ff fc7b 	bl	800339a <USART_Transmit>
}
 8003aa4:	bd10      	pop	{r4, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200004c8 	.word	0x200004c8
 8003aac:	0800482c 	.word	0x0800482c
 8003ab0:	08004998 	.word	0x08004998
 8003ab4:	080049ac 	.word	0x080049ac
 8003ab8:	080049dc 	.word	0x080049dc
 8003abc:	08004a0c 	.word	0x08004a0c
 8003ac0:	08004a1c 	.word	0x08004a1c
 8003ac4:	08004a2c 	.word	0x08004a2c
 8003ac8:	08004a30 	.word	0x08004a30
 8003acc:	08004a48 	.word	0x08004a48

08003ad0 <USART_ITCharManager>:
 * @brief  Handle text character just received.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *               the configuration information for the specified UART module.
 * @note To use inside USART2_IRQHandler function.
 */
void USART_ITCharManager(UART_HandleTypeDef* huart) {
 8003ad0:	b510      	push	{r4, lr}
 8003ad2:	4604      	mov	r4, r0
	uint8_t UART_Receive_IT_Char;

	UART_Receive_IT_Char = (uint8_t) (huart->Instance->USART_DATA_REGISTER);
 8003ad4:	6803      	ldr	r3, [r0, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
	/* Checks the buffer full or retur carriage  */
	if ((huart->RxXferCount == 1) || (UART_Receive_IT_Char == '\r')) {
 8003ad8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 8003ada:	2a01      	cmp	r2, #1
 8003adc:	d003      	beq.n	8003ae6 <USART_ITCharManager+0x16>
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b0d      	cmp	r3, #13
 8003ae2:	d000      	beq.n	8003ae6 <USART_ITCharManager+0x16>
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

			huart->State = HAL_UART_STATE_READY;
		}
	}
}
 8003ae4:	bd10      	pop	{r4, pc}
		huart->RxXferCount += 1;
 8003ae6:	3201      	adds	r2, #1
 8003ae8:	85e2      	strh	r2, [r4, #46]	; 0x2e
		huart->pRxBuffPtr -= 1;
 8003aea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003aec:	1e5a      	subs	r2, r3, #1
 8003aee:	62a2      	str	r2, [r4, #40]	; 0x28
		*(huart->pRxBuffPtr) = '\0';
 8003af0:	2200      	movs	r2, #0
 8003af2:	f803 2c01 	strb.w	r2, [r3, #-1]
		USART_Transmit(huart, (uint8_t *)"\r\n");
 8003af6:	4912      	ldr	r1, [pc, #72]	; (8003b40 <USART_ITCharManager+0x70>)
 8003af8:	4620      	mov	r0, r4
 8003afa:	f7ff fc4e 	bl	800339a <USART_Transmit>
		while (HAL_IS_BIT_SET(huart->Instance->USART_STATUS_REGISTER,
 8003afe:	6822      	ldr	r2, [r4, #0]
 8003b00:	6813      	ldr	r3, [r2, #0]
 8003b02:	f013 0f20 	tst.w	r3, #32
 8003b06:	d1fb      	bne.n	8003b00 <USART_ITCharManager+0x30>
		__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b08:	68d3      	ldr	r3, [r2, #12]
 8003b0a:	f023 0320 	bic.w	r3, r3, #32
 8003b0e:	60d3      	str	r3, [r2, #12]
		if (huart->State == HAL_UART_STATE_BUSY_TX_RX) {
 8003b10:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b32      	cmp	r3, #50	; 0x32
 8003b18:	d00d      	beq.n	8003b36 <USART_ITCharManager+0x66>
			__HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b1a:	6822      	ldr	r2, [r4, #0]
 8003b1c:	68d3      	ldr	r3, [r2, #12]
 8003b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b22:	60d3      	str	r3, [r2, #12]
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b24:	6822      	ldr	r2, [r4, #0]
 8003b26:	6953      	ldr	r3, [r2, #20]
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6153      	str	r3, [r2, #20]
			huart->State = HAL_UART_STATE_READY;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003b34:	e7d6      	b.n	8003ae4 <USART_ITCharManager+0x14>
			huart->State = HAL_UART_STATE_BUSY_TX;
 8003b36:	2312      	movs	r3, #18
 8003b38:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8003b3c:	e7d2      	b.n	8003ae4 <USART_ITCharManager+0x14>
 8003b3e:	bf00      	nop
 8003b40:	0800482c 	.word	0x0800482c

08003b44 <Fill_L6470_DaisyChainMnemonic>:
 *
 * @note   This structure will contain the assigned names about the L6470
 *         devices inside the daisy chain and theirs related motors.
 * @note   Its size and contents is updated at boot in relation to the L6470DAISYCHAINSIZE.
 */
void Fill_L6470_DaisyChainMnemonic(void) {
 8003b44:	b570      	push	{r4, r5, r6, lr}
		} else {
			c10 = '0' + (i / 10);
			c1 = '0' + (i - ((i / 10) * 10));
		}

		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[0] = 'L';
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <Fill_L6470_DaisyChainMnemonic+0x84>)
 8003b48:	264c      	movs	r6, #76	; 0x4c
 8003b4a:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[1] = '6';
 8003b4e:	2536      	movs	r5, #54	; 0x36
 8003b50:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[2] = '4';
 8003b54:	2434      	movs	r4, #52	; 0x34
 8003b56:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[3] = '7';
 8003b5a:	f04f 0e37 	mov.w	lr, #55	; 0x37
 8003b5e:	f883 e043 	strb.w	lr, [r3, #67]	; 0x43
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[4] = '0';
 8003b62:	2130      	movs	r1, #48	; 0x30
 8003b64:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[5] = '#';
 8003b68:	f04f 0c23 	mov.w	ip, #35	; 0x23
 8003b6c:	f883 c045 	strb.w	ip, [r3, #69]	; 0x45
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[6] = c10;
 8003b70:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[7] = c1;
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[8] = '\0';
 8003b7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[0] = 'M';
 8003b7e:	204d      	movs	r0, #77	; 0x4d
 8003b80:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[1] = c10;
 8003b84:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[2] = c1;
 8003b88:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[3] = '\0';
 8003b8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[0] = 'L';
 8003b90:	f883 604d 	strb.w	r6, [r3, #77]	; 0x4d
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[1] = '6';
 8003b94:	f883 504e 	strb.w	r5, [r3, #78]	; 0x4e
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[2] = '4';
 8003b98:	f883 404f 	strb.w	r4, [r3, #79]	; 0x4f
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[3] = '7';
 8003b9c:	f883 e050 	strb.w	lr, [r3, #80]	; 0x50
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[4] = '0';
 8003ba0:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[5] = '#';
 8003ba4:	f883 c052 	strb.w	ip, [r3, #82]	; 0x52
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[6] = c10;
 8003ba8:	2131      	movs	r1, #49	; 0x31
 8003baa:	f883 1053 	strb.w	r1, [r3, #83]	; 0x53
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[7] = c1;
 8003bae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[8] = '\0';
 8003bb2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[0] = 'M';
 8003bb6:	f883 0056 	strb.w	r0, [r3, #86]	; 0x56
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[1] = c10;
 8003bba:	f883 1057 	strb.w	r1, [r3, #87]	; 0x57
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[2] = c1;
 8003bbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[3] = '\0';
 8003bc2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	}
}
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	200004c8 	.word	0x200004c8

08003bcc <num2hex>:
 * @param  num         The integer number to convert.
 * @param  HexFormat   The output format about hexadecimal number.
 *
 * @retval uint8_t*    The address of the string text for the converted hexadecimal number.
 */
uint8_t* num2hex(uint32_t num, eHexFormat HexFormat) {
 8003bcc:	b510      	push	{r4, lr}
	static uint8_t HexValue[8 + 1];
	uint8_t i;
	uint8_t dummy;
	uint8_t HexDigits = 0;

	switch (HexFormat) {
 8003bce:	2903      	cmp	r1, #3
 8003bd0:	d82c      	bhi.n	8003c2c <num2hex+0x60>
 8003bd2:	e8df f001 	tbb	[pc, r1]
 8003bd6:	022e      	.short	0x022e
 8003bd8:	2831      	.short	0x2831
 8003bda:	f04f 0c02 	mov.w	ip, #2
	case DOUBLEWORD_F:
		HexDigits = 8;
		break;
	}

	for (i = 0; i < HexDigits; i++) {
 8003bde:	f10c 32ff 	add.w	r2, ip, #4294967295
 8003be2:	0092      	lsls	r2, r2, #2
 8003be4:	4c16      	ldr	r4, [pc, #88]	; (8003c40 <num2hex+0x74>)
uint8_t* num2hex(uint32_t num, eHexFormat HexFormat) {
 8003be6:	2100      	movs	r1, #0
		HexValue[i] = '\0';
		dummy = (num & (0x0F << (((HexDigits - 1) - i) * 4)))
 8003be8:	f04f 0e0f 	mov.w	lr, #15
 8003bec:	fa0e f302 	lsl.w	r3, lr, r2
 8003bf0:	4003      	ands	r3, r0
				>> (((HexDigits - 1) - i) * 4);
 8003bf2:	40d3      	lsrs	r3, r2
		dummy = (num & (0x0F << (((HexDigits - 1) - i) * 4)))
 8003bf4:	b2db      	uxtb	r3, r3
		if (dummy < 0x0A) {
 8003bf6:	2b09      	cmp	r3, #9
			HexValue[i] = dummy + '0';
 8003bf8:	bf94      	ite	ls
 8003bfa:	3330      	addls	r3, #48	; 0x30
		} else {
			HexValue[i] = (dummy - 0x0A) + 'A';
 8003bfc:	3337      	addhi	r3, #55	; 0x37
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f804 3f01 	strb.w	r3, [r4, #1]!
	for (i = 0; i < HexDigits; i++) {
 8003c04:	3101      	adds	r1, #1
 8003c06:	3a04      	subs	r2, #4
 8003c08:	b2cb      	uxtb	r3, r1
 8003c0a:	459c      	cmp	ip, r3
 8003c0c:	d8ee      	bhi.n	8003bec <num2hex+0x20>
 8003c0e:	f1bc 0f00 	cmp.w	ip, #0
 8003c12:	bf08      	it	eq
 8003c14:	f04f 0c01 	moveq.w	ip, #1
		}
	}
	HexValue[i] = '\0';
 8003c18:	480a      	ldr	r0, [pc, #40]	; (8003c44 <num2hex+0x78>)
 8003c1a:	4484      	add	ip, r0
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f88c 305c 	strb.w	r3, [ip, #92]	; 0x5c

	return HexValue;
 8003c22:	305c      	adds	r0, #92	; 0x5c
}
 8003c24:	bd10      	pop	{r4, pc}
		HexDigits = 8;
 8003c26:	f04f 0c08 	mov.w	ip, #8
		break;
 8003c2a:	e7d8      	b.n	8003bde <num2hex+0x12>
	switch (HexFormat) {
 8003c2c:	f04f 0c00 	mov.w	ip, #0
 8003c30:	e7f2      	b.n	8003c18 <num2hex+0x4c>
		HexDigits = 1;
 8003c32:	f04f 0c01 	mov.w	ip, #1
 8003c36:	e7d2      	b.n	8003bde <num2hex+0x12>
		HexDigits = 4;
 8003c38:	f04f 0c04 	mov.w	ip, #4
 8003c3c:	e7cf      	b.n	8003bde <num2hex+0x12>
 8003c3e:	bf00      	nop
 8003c40:	20000523 	.word	0x20000523
 8003c44:	200004c8 	.word	0x200004c8

08003c48 <USART_DecodeTextString>:
		uint8_t* pL6470_DaisyChainSpiRxStruct) {
 8003c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	460d      	mov	r5, r1
 8003c50:	4614      	mov	r4, r2
 8003c52:	9300      	str	r3, [sp, #0]
	if (USART_SplitTextString(pTextString, pL6470_TextCommandBundle)
 8003c54:	f7ff fbac 	bl	80033b0 <USART_SplitTextString>
 8003c58:	b120      	cbz	r0, 8003c64 <USART_DecodeTextString+0x1c>
			&& USART_CheckTextCommandBundle(pL6470_TextCommandBundle,
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f7ff fc45 	bl	80034ec <USART_CheckTextCommandBundle>
 8003c62:	b938      	cbnz	r0, 8003c74 <USART_DecodeTextString+0x2c>
		USART_Transmit(&huart2, (uint8_t* )"Please, enter a new command string!\r\n\r\n");
 8003c64:	494b      	ldr	r1, [pc, #300]	; (8003d94 <USART_DecodeTextString+0x14c>)
 8003c66:	484c      	ldr	r0, [pc, #304]	; (8003d98 <USART_DecodeTextString+0x150>)
 8003c68:	f7ff fb97 	bl	800339a <USART_Transmit>
}
 8003c6c:	484b      	ldr	r0, [pc, #300]	; (8003d9c <USART_DecodeTextString+0x154>)
 8003c6e:	b003      	add	sp, #12
 8003c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		USART_Transmit(&huart2, (uint8_t *)"Perform the entered L6470 Application Command...\r\n");
 8003c74:	4e48      	ldr	r6, [pc, #288]	; (8003d98 <USART_DecodeTextString+0x150>)
 8003c76:	494a      	ldr	r1, [pc, #296]	; (8003da0 <USART_DecodeTextString+0x158>)
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f7ff fb8e 	bl	800339a <USART_Transmit>
		L6470_DaisyChainCommand(pL6470_DaisyChainSpiTxStruct,
 8003c7e:	9900      	ldr	r1, [sp, #0]
 8003c80:	4620      	mov	r0, r4
 8003c82:	f7fc fe0b 	bl	800089c <L6470_DaisyChainCommand>
		for (L6470_Id = 0; L6470_Id < L6470DAISYCHAINSIZE; L6470_Id++) {
 8003c86:	f106 0768 	add.w	r7, r6, #104	; 0x68
 8003c8a:	3c01      	subs	r4, #1
 8003c8c:	3640      	adds	r6, #64	; 0x40
 8003c8e:	2500      	movs	r5, #0
						!= (L6470_Register[L6470_RegId].Address))
 8003c90:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8003db4 <USART_DecodeTextString+0x16c>
				USART_Transmit(&huart2,
 8003c94:	f1a6 0a40 	sub.w	sl, r6, #64	; 0x40
			ReceivedValue[L6470_Id] = 0x00;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f847 3b04 	str.w	r3, [r7], #4
			if ((*(pL6470_DaisyChainSpiTxStruct
 8003c9e:	3401      	adds	r4, #1
 8003ca0:	46a3      	mov	fp, r4
 8003ca2:	7823      	ldrb	r3, [r4, #0]
 8003ca4:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8003ca8:	2a20      	cmp	r2, #32
 8003caa:	d00d      	beq.n	8003cc8 <USART_DecodeTextString+0x80>
			if (*(pL6470_DaisyChainSpiTxStruct
 8003cac:	f89b 3000 	ldrb.w	r3, [fp]
 8003cb0:	2bd0      	cmp	r3, #208	; 0xd0
 8003cb2:	d052      	beq.n	8003d5a <USART_DecodeTextString+0x112>
		for (L6470_Id = 0; L6470_Id < L6470DAISYCHAINSIZE; L6470_Id++) {
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	b2ed      	uxtb	r5, r5
 8003cb8:	360d      	adds	r6, #13
 8003cba:	2d02      	cmp	r5, #2
 8003cbc:	d1ec      	bne.n	8003c98 <USART_DecodeTextString+0x50>
		USART_Transmit(&huart2, (uint8_t* )"\r\n");
 8003cbe:	4939      	ldr	r1, [pc, #228]	; (8003da4 <USART_DecodeTextString+0x15c>)
 8003cc0:	4835      	ldr	r0, [pc, #212]	; (8003d98 <USART_DecodeTextString+0x150>)
 8003cc2:	f7ff fb6a 	bl	800339a <USART_Transmit>
 8003cc6:	e7d1      	b.n	8003c6c <USART_DecodeTextString+0x24>
				while ((*(pL6470_DaisyChainSpiTxStruct
 8003cc8:	f003 021f 	and.w	r2, r3, #31
 8003ccc:	f899 3000 	ldrb.w	r3, [r9]
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d03d      	beq.n	8003d50 <USART_DecodeTextString+0x108>
				L6470_RegId = (eL6470_RegId_t) 0;
 8003cd4:	2300      	movs	r3, #0
					L6470_RegId++;
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	b2db      	uxtb	r3, r3
						!= (L6470_Register[L6470_RegId].Address))
 8003cda:	4698      	mov	r8, r3
 8003cdc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
				while ((*(pL6470_DaisyChainSpiTxStruct
 8003ce0:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 8003ce4:	4291      	cmp	r1, r2
 8003ce6:	d1f6      	bne.n	8003cd6 <USART_DecodeTextString+0x8e>
				PARAMLengthBytes = L6470_Register[L6470_RegId].LengthByte;
 8003ce8:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8003cec:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8003cf0:	7b9a      	ldrb	r2, [r3, #14]
				switch (PARAMLengthBytes) {
 8003cf2:	2a01      	cmp	r2, #1
 8003cf4:	d02f      	beq.n	8003d56 <USART_DecodeTextString+0x10e>
 8003cf6:	2a02      	cmp	r2, #2
 8003cf8:	bf0c      	ite	eq
 8003cfa:	4613      	moveq	r3, r2
 8003cfc:	2303      	movne	r3, #3
 8003cfe:	9301      	str	r3, [sp, #4]
				ReceivedValue[L6470_Id] = L6470_ExtractReturnedData(L6470_Id,
 8003d00:	9900      	ldr	r1, [sp, #0]
 8003d02:	4628      	mov	r0, r5
 8003d04:	f7fc ffc8 	bl	8000c98 <L6470_ExtractReturnedData>
 8003d08:	f847 0c04 	str.w	r0, [r7, #-4]
				USART_Transmit(&huart2,
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	4650      	mov	r0, sl
 8003d10:	f7ff fb43 	bl	800339a <USART_Transmit>
				USART_Transmit(&huart2, (uint8_t* )" ");
 8003d14:	4924      	ldr	r1, [pc, #144]	; (8003da8 <USART_DecodeTextString+0x160>)
 8003d16:	4650      	mov	r0, sl
 8003d18:	f7ff fb3f 	bl	800339a <USART_Transmit>
						(uint8_t*) (L6470_Register[L6470_RegId].Name));
 8003d1c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8003d20:	eb09 0188 	add.w	r1, r9, r8, lsl #2
				USART_Transmit(&huart2,
 8003d24:	3101      	adds	r1, #1
 8003d26:	4650      	mov	r0, sl
 8003d28:	f7ff fb37 	bl	800339a <USART_Transmit>
				USART_Transmit(&huart2, (uint8_t* )" value is 0x");
 8003d2c:	491f      	ldr	r1, [pc, #124]	; (8003dac <USART_DecodeTextString+0x164>)
 8003d2e:	4650      	mov	r0, sl
 8003d30:	f7ff fb33 	bl	800339a <USART_Transmit>
				USART_Transmit(&huart2,
 8003d34:	9901      	ldr	r1, [sp, #4]
 8003d36:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8003d3a:	f7ff ff47 	bl	8003bcc <num2hex>
 8003d3e:	4601      	mov	r1, r0
 8003d40:	4650      	mov	r0, sl
 8003d42:	f7ff fb2a 	bl	800339a <USART_Transmit>
				USART_Transmit(&huart2, (uint8_t* )"\r\n");
 8003d46:	4917      	ldr	r1, [pc, #92]	; (8003da4 <USART_DecodeTextString+0x15c>)
 8003d48:	4650      	mov	r0, sl
 8003d4a:	f7ff fb26 	bl	800339a <USART_Transmit>
 8003d4e:	e7ad      	b.n	8003cac <USART_DecodeTextString+0x64>
						!= (L6470_Register[L6470_RegId].Address))
 8003d50:	f04f 0800 	mov.w	r8, #0
 8003d54:	e7c8      	b.n	8003ce8 <USART_DecodeTextString+0xa0>
					HexFormat = BYTE_F;
 8003d56:	9201      	str	r2, [sp, #4]
 8003d58:	e7d2      	b.n	8003d00 <USART_DecodeTextString+0xb8>
				ReceivedValue[L6470_Id] = L6470_ExtractReturnedData(L6470_Id,
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	9900      	ldr	r1, [sp, #0]
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f7fc ff9a 	bl	8000c98 <L6470_ExtractReturnedData>
 8003d64:	f847 0c04 	str.w	r0, [r7, #-4]
				USART_Transmit(&huart2,
 8003d68:	4631      	mov	r1, r6
 8003d6a:	4650      	mov	r0, sl
 8003d6c:	f7ff fb15 	bl	800339a <USART_Transmit>
				USART_Transmit(&huart2, (uint8_t* )" STATUS value is 0x");
 8003d70:	490f      	ldr	r1, [pc, #60]	; (8003db0 <USART_DecodeTextString+0x168>)
 8003d72:	4650      	mov	r0, sl
 8003d74:	f7ff fb11 	bl	800339a <USART_Transmit>
				USART_Transmit(&huart2,
 8003d78:	2102      	movs	r1, #2
 8003d7a:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8003d7e:	f7ff ff25 	bl	8003bcc <num2hex>
 8003d82:	4601      	mov	r1, r0
 8003d84:	4650      	mov	r0, sl
 8003d86:	f7ff fb08 	bl	800339a <USART_Transmit>
				USART_Transmit(&huart2, (uint8_t* )"\r\n");
 8003d8a:	4906      	ldr	r1, [pc, #24]	; (8003da4 <USART_DecodeTextString+0x15c>)
 8003d8c:	4650      	mov	r0, sl
 8003d8e:	f7ff fb04 	bl	800339a <USART_Transmit>
 8003d92:	e78f      	b.n	8003cb4 <USART_DecodeTextString+0x6c>
 8003d94:	08004ac4 	.word	0x08004ac4
 8003d98:	200004c8 	.word	0x200004c8
 8003d9c:	20000530 	.word	0x20000530
 8003da0:	08004a68 	.word	0x08004a68
 8003da4:	0800482c 	.word	0x0800482c
 8003da8:	08004a9c 	.word	0x08004a9c
 8003dac:	08004aa0 	.word	0x08004aa0
 8003db0:	08004ab0 	.word	0x08004ab0
 8003db4:	08004270 	.word	0x08004270

08003db8 <USART_CheckAppCmd>:
void USART_CheckAppCmd(void) {
 8003db8:	b508      	push	{r3, lr}
	if (huart2.State == HAL_UART_STATE_READY) {
 8003dba:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <USART_CheckAppCmd+0x38>)
 8003dbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d000      	beq.n	8003dc8 <USART_CheckAppCmd+0x10>
}
 8003dc6:	bd08      	pop	{r3, pc}
		if (UsartTextString[0] != '\0') {
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <USART_CheckAppCmd+0x38>)
 8003dca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003dce:	b933      	cbnz	r3, 8003dde <USART_CheckAppCmd+0x26>
		NucleoUsartReceiveIT(&huart2, UsartTextString, USARTTEXTSTRINGSIZE);
 8003dd0:	4807      	ldr	r0, [pc, #28]	; (8003df0 <USART_CheckAppCmd+0x38>)
 8003dd2:	2240      	movs	r2, #64	; 0x40
 8003dd4:	f100 0170 	add.w	r1, r0, #112	; 0x70
 8003dd8:	f7ff f8eb 	bl	8002fb2 <HAL_UART_Receive_IT>
}
 8003ddc:	e7f3      	b.n	8003dc6 <USART_CheckAppCmd+0xe>
			USART_DecodeTextString(UsartTextString, L6470_TextCommandBundle,
 8003dde:	4804      	ldr	r0, [pc, #16]	; (8003df0 <USART_CheckAppCmd+0x38>)
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <USART_CheckAppCmd+0x3c>)
 8003de2:	4a05      	ldr	r2, [pc, #20]	; (8003df8 <USART_CheckAppCmd+0x40>)
 8003de4:	f100 01b0 	add.w	r1, r0, #176	; 0xb0
 8003de8:	3070      	adds	r0, #112	; 0x70
 8003dea:	f7ff ff2d 	bl	8003c48 <USART_DecodeTextString>
 8003dee:	e7ef      	b.n	8003dd0 <USART_CheckAppCmd+0x18>
 8003df0:	200004c8 	.word	0x200004c8
 8003df4:	200003b4 	.word	0x200003b4
 8003df8:	200003ac 	.word	0x200003ac

08003dfc <main>:

/**
  * @brief The FW main module
  */

int main(void) {
 8003dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfe:	b09f      	sub	sp, #124	; 0x7c
	/* NUCLEO board initialization */
	NUCLEO_Board_Init();
 8003e00:	f7fd fc7a 	bl	80016f8 <NUCLEO_Board_Init>

	/* X-NUCLEO-IHM02A1 initialization */
	BSP_Init();
 8003e04:	f7fd fb7b 	bl	80014fe <BSP_Init>

#ifdef NUCLEO_USE_USART
  /* Transmit the initial message to the PC via UART */
  USART_TxWelcomeMessage();
 8003e08:	f7ff fe26 	bl	8003a58 <USART_TxWelcomeMessage>
#endif

  	HAL_Init();
 8003e0c:	f7fd fcc0 	bl	8001790 <HAL_Init>

  	USART_Transmit(&huart2, (uint8_t* )"Hello Tyler");
 8003e10:	493e      	ldr	r1, [pc, #248]	; (8003f0c <main+0x110>)
 8003e12:	483f      	ldr	r0, [pc, #252]	; (8003f10 <main+0x114>)
 8003e14:	f7ff fac1 	bl	800339a <USART_Transmit>

	// Enable GPIO clocks (needed for interrupts)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003e18:	4b3e      	ldr	r3, [pc, #248]	; (8003f14 <main+0x118>)
 8003e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e1c:	f042 0204 	orr.w	r2, r2, #4
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
 8003e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e24:	f002 0204 	and.w	r2, r2, #4
 8003e28:	9201      	str	r2, [sp, #4]
 8003e2a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
 8003e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e36:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003e3a:	9202      	str	r2, [sp, #8]
 8003e3c:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e40:	f042 0201 	orr.w	r2, r2, #1
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
 8003e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e48:	f002 0201 	and.w	r2, r2, #1
 8003e4c:	9203      	str	r2, [sp, #12]
 8003e4e:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e52:	f042 0202 	orr.w	r2, r2, #2
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	9304      	str	r3, [sp, #16]
 8003e60:	9b04      	ldr	r3, [sp, #16]
//	GPIO_InitStruct6.Pull = GPIO_PULLDOWN;
//	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct6);


	// Configure pin 7 on GPIO A as input from push button
	GPIO_InitStruct7.Pin = GPIO_PIN_7;
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	9314      	str	r3, [sp, #80]	; 0x50
	GPIO_InitStruct7.Mode = GPIO_MODE_IT_FALLING;
 8003e66:	4e2c      	ldr	r6, [pc, #176]	; (8003f18 <main+0x11c>)
 8003e68:	9615      	str	r6, [sp, #84]	; 0x54
	GPIO_InitStruct7.Pull = GPIO_PULLDOWN;
 8003e6a:	2402      	movs	r4, #2
 8003e6c:	9416      	str	r4, [sp, #88]	; 0x58
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct7);
 8003e6e:	a914      	add	r1, sp, #80	; 0x50
 8003e70:	482a      	ldr	r0, [pc, #168]	; (8003f1c <main+0x120>)
 8003e72:	f7fd fd6d 	bl	8001950 <HAL_GPIO_Init>


	// Configure pin 8 on GPIO A as input from push button
	GPIO_InitStruct8.Pin = GPIO_PIN_8;
 8003e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e7a:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct8.Mode = GPIO_MODE_IT_FALLING;
 8003e7c:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct8.Pull = GPIO_PULLDOWN;
 8003e7e:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct8);
 8003e80:	4d27      	ldr	r5, [pc, #156]	; (8003f20 <main+0x124>)
 8003e82:	a90f      	add	r1, sp, #60	; 0x3c
 8003e84:	4628      	mov	r0, r5
 8003e86:	f7fd fd63 	bl	8001950 <HAL_GPIO_Init>

	// Configure pin 9 on GPIO A as input from push button
	GPIO_InitStruct9.Pin = GPIO_PIN_9;
 8003e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e8e:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct9.Mode = GPIO_MODE_IT_FALLING;
 8003e90:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct9.Pull = GPIO_PULLDOWN;
 8003e92:	940c      	str	r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct9);
 8003e94:	a90a      	add	r1, sp, #40	; 0x28
 8003e96:	4628      	mov	r0, r5
 8003e98:	f7fd fd5a 	bl	8001950 <HAL_GPIO_Init>

	// Configure pin 10 on GPIO A as input from push button
	GPIO_InitStruct10.Pin = GPIO_PIN_10;
 8003e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea0:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct10.Mode = GPIO_MODE_IT_FALLING;
 8003ea2:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct10.Pull = GPIO_PULLDOWN;
 8003ea4:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct10);
 8003ea6:	a905      	add	r1, sp, #20
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	f7fd fd51 	bl	8001950 <HAL_GPIO_Init>

	//Enable the 5-9 IRQ and set the priority
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0x01, 0x00);
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	2017      	movs	r0, #23
 8003eb4:	f7fd fcc0 	bl	8001838 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003eb8:	2017      	movs	r0, #23
 8003eba:	f7fd fd01 	bl	80018c0 <HAL_NVIC_EnableIRQ>
//
//	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
//	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

	// Configure pin 1 on GPIO A as output
	GPIO_InitStruct1.Pin = GPIO_PIN_1;
 8003ebe:	9419      	str	r4, [sp, #100]	; 0x64
	GPIO_InitStruct1.Mode = GPIO_MODE_OUTPUT_PP;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	931a      	str	r3, [sp, #104]	; 0x68
	GPIO_InitStruct1.Pull = GPIO_PULLUP;
 8003ec4:	931b      	str	r3, [sp, #108]	; 0x6c
	GPIO_InitStruct1.Speed = GPIO_SPEED_FAST;
 8003ec6:	941c      	str	r4, [sp, #112]	; 0x70
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct1);
 8003ec8:	a919      	add	r1, sp, #100	; 0x64
 8003eca:	4628      	mov	r0, r5
 8003ecc:	f7fd fd40 	bl	8001950 <HAL_GPIO_Init>

  /* Infinite loop */
  while (1);
#elif defined (MICROSTEPPING_MOTOR_USART_EXAMPLE)
  /* Fill the L6470_DaisyChainMnemonic structure */
  Fill_L6470_DaisyChainMnemonic();
 8003ed0:	f7ff fe38 	bl	8003b44 <Fill_L6470_DaisyChainMnemonic>

  int counter = 0;
 8003ed4:	2400      	movs	r4, #0
    USART_CheckAppCmd();

    if(counter < 1)
    {
    	// Arguments are motor #, direction, speed
    	L6470_Run(1, L6470_DIR_FWD_ID, 25000);
 8003ed6:	f246 17a8 	movw	r7, #25000	; 0x61a8
 8003eda:	2501      	movs	r5, #1
    	HAL_Delay(1000);
 8003edc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    USART_CheckAppCmd();
 8003ee0:	f7ff ff6a 	bl	8003db8 <USART_CheckAppCmd>
    if(counter < 1)
 8003ee4:	2c00      	cmp	r4, #0
 8003ee6:	dcfb      	bgt.n	8003ee0 <main+0xe4>
    	L6470_Run(1, L6470_DIR_FWD_ID, 25000);
 8003ee8:	463a      	mov	r2, r7
 8003eea:	4629      	mov	r1, r5
 8003eec:	4628      	mov	r0, r5
 8003eee:	f7fc fd27 	bl	8000940 <L6470_Run>
    	HAL_Delay(1000);
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f7fd fc74 	bl	80017e0 <HAL_Delay>
    	L6470_HardStop(1);
 8003ef8:	4628      	mov	r0, r5
 8003efa:	f7fc fe6d 	bl	8000bd8 <L6470_HardStop>
    	HAL_Delay(5000);
 8003efe:	f241 3088 	movw	r0, #5000	; 0x1388
 8003f02:	f7fd fc6d 	bl	80017e0 <HAL_Delay>
    	counter++;
 8003f06:	3401      	adds	r4, #1
 8003f08:	e7ea      	b.n	8003ee0 <main+0xe4>
 8003f0a:	bf00      	nop
 8003f0c:	08004b24 	.word	0x08004b24
 8003f10:	200004c8 	.word	0x200004c8
 8003f14:	40023800 	.word	0x40023800
 8003f18:	10210000 	.word	0x10210000
 8003f1c:	40020800 	.word	0x40020800
 8003f20:	40020000 	.word	0x40020000

08003f24 <assert_failed>:
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}
 8003f24:	4770      	bx	lr

08003f26 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f26:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f28:	2007      	movs	r0, #7
 8003f2a:	f7fd fc67 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	4611      	mov	r1, r2
 8003f32:	f04f 30ff 	mov.w	r0, #4294967295
 8003f36:	f7fd fc7f 	bl	8001838 <HAL_NVIC_SetPriority>
}
 8003f3a:	bd08      	pop	{r3, pc}

08003f3c <HAL_SPI_MspInit>:
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0);
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003f40:	6803      	ldr	r3, [r0, #0]
 8003f42:	4a30      	ldr	r2, [pc, #192]	; (8004004 <HAL_SPI_MspInit+0xc8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_SPI_MspInit+0x16>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#elif defined (USE_PA5_AS_SCK)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
#endif
  }
  else if(hspi->Instance==SPI2)
 8003f48:	4a2f      	ldr	r2, [pc, #188]	; (8004008 <HAL_SPI_MspInit+0xcc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d036      	beq.n	8003fbc <HAL_SPI_MspInit+0x80>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }
}
 8003f4e:	b00b      	add	sp, #44	; 0x2c
 8003f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __GPIOA_CLK_ENABLE();
 8003f52:	4b2e      	ldr	r3, [pc, #184]	; (800400c <HAL_SPI_MspInit+0xd0>)
 8003f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5e:	f002 0201 	and.w	r2, r2, #1
 8003f62:	9200      	str	r2, [sp, #0]
 8003f64:	9a00      	ldr	r2, [sp, #0]
    __GPIOB_CLK_ENABLE();
 8003f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f68:	f042 0202 	orr.w	r2, r2, #2
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f70:	f002 0202 	and.w	r2, r2, #2
 8003f74:	9201      	str	r2, [sp, #4]
 8003f76:	9a01      	ldr	r2, [sp, #4]
    __SPI1_CLK_ENABLE();
 8003f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f7e:	645a      	str	r2, [r3, #68]	; 0x44
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f86:	9302      	str	r3, [sp, #8]
 8003f88:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f8a:	23c0      	movs	r3, #192	; 0xc0
 8003f8c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2702      	movs	r7, #2
 8003f90:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2600      	movs	r6, #0
 8003f94:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003f96:	2503      	movs	r5, #3
 8003f98:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f9a:	2405      	movs	r4, #5
 8003f9c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f9e:	a905      	add	r1, sp, #20
 8003fa0:	481b      	ldr	r0, [pc, #108]	; (8004010 <HAL_SPI_MspInit+0xd4>)
 8003fa2:	f7fd fcd5 	bl	8001950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003faa:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fac:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003fae:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fb0:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb2:	a905      	add	r1, sp, #20
 8003fb4:	4817      	ldr	r0, [pc, #92]	; (8004014 <HAL_SPI_MspInit+0xd8>)
 8003fb6:	f7fd fccb 	bl	8001950 <HAL_GPIO_Init>
 8003fba:	e7c8      	b.n	8003f4e <HAL_SPI_MspInit+0x12>
    __GPIOB_CLK_ENABLE();
 8003fbc:	4b13      	ldr	r3, [pc, #76]	; (800400c <HAL_SPI_MspInit+0xd0>)
 8003fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc0:	f042 0202 	orr.w	r2, r2, #2
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8003fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc8:	f002 0202 	and.w	r2, r2, #2
 8003fcc:	9203      	str	r2, [sp, #12]
 8003fce:	9a03      	ldr	r2, [sp, #12]
    __SPI2_CLK_ENABLE();
 8003fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fde:	9304      	str	r3, [sp, #16]
 8003fe0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003fe2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003fe6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ff4:	2305      	movs	r3, #5
 8003ff6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ff8:	a905      	add	r1, sp, #20
 8003ffa:	4806      	ldr	r0, [pc, #24]	; (8004014 <HAL_SPI_MspInit+0xd8>)
 8003ffc:	f7fd fca8 	bl	8001950 <HAL_GPIO_Init>
}
 8004000:	e7a5      	b.n	8003f4e <HAL_SPI_MspInit+0x12>
 8004002:	bf00      	nop
 8004004:	40013000 	.word	0x40013000
 8004008:	40003800 	.word	0x40003800
 800400c:	40023800 	.word	0x40023800
 8004010:	40020000 	.word	0x40020000
 8004014:	40020400 	.word	0x40020400

08004018 <HAL_UART_MspInit>:
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8004018:	6802      	ldr	r2, [r0, #0]
 800401a:	4b19      	ldr	r3, [pc, #100]	; (8004080 <HAL_UART_MspInit+0x68>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d000      	beq.n	8004022 <HAL_UART_MspInit+0xa>
 8004020:	4770      	bx	lr
{
 8004022:	b510      	push	{r4, lr}
 8004024:	b088      	sub	sp, #32
  {
    /* GPIO clocks enable */
    __GPIOA_CLK_ENABLE();
 8004026:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800402a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
 8004032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004034:	f002 0201 	and.w	r2, r2, #1
 8004038:	9201      	str	r2, [sp, #4]
 800403a:	9a01      	ldr	r2, [sp, #4]
    
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 800403c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	9302      	str	r3, [sp, #8]
 800404c:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800404e:	230c      	movs	r3, #12
 8004050:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004052:	2302      	movs	r3, #2
 8004054:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004056:	2400      	movs	r4, #0
 8004058:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800405a:	2303      	movs	r3, #3
 800405c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800405e:	2307      	movs	r3, #7
 8004060:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004062:	a903      	add	r1, sp, #12
 8004064:	4807      	ldr	r0, [pc, #28]	; (8004084 <HAL_UART_MspInit+0x6c>)
 8004066:	f7fd fc73 	bl	8001950 <HAL_GPIO_Init>

  /* System interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800406a:	4622      	mov	r2, r4
 800406c:	4621      	mov	r1, r4
 800406e:	2026      	movs	r0, #38	; 0x26
 8004070:	f7fd fbe2 	bl	8001838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004074:	2026      	movs	r0, #38	; 0x26
 8004076:	f7fd fc23 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  }
}
 800407a:	b008      	add	sp, #32
 800407c:	bd10      	pop	{r4, pc}
 800407e:	bf00      	nop
 8004080:	40004400 	.word	0x40004400
 8004084:	40020000 	.word	0x40020000

08004088 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004088:	b508      	push	{r3, lr}
  HAL_IncTick();
 800408a:	f7fd fb9b 	bl	80017c4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800408e:	f7fd fc5a 	bl	8001946 <HAL_SYSTICK_IRQHandler>
}
 8004092:	bd08      	pop	{r3, pc}

08004094 <EXTI1_IRQHandler>:

/**
* @brief This function handles EXTI Line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
 8004094:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004096:	2002      	movs	r0, #2
 8004098:	f7fd fda2 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
}
 800409c:	bd08      	pop	{r3, pc}

0800409e <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI Line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 800409e:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80040a0:	2001      	movs	r0, #1
 80040a2:	f7fd fd9d 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
}
 80040a6:	bd08      	pop	{r3, pc}

080040a8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80040a8:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80040aa:	2004      	movs	r0, #4
 80040ac:	f7fd fd98 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
}
 80040b0:	bd08      	pop	{r3, pc}

080040b2 <EXTI4_IRQHandler>:
//  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
//}

// Tyler wrote this
void EXTI4_IRQHandler(void)
{
 80040b2:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80040b4:	2010      	movs	r0, #16
 80040b6:	f7fd fd93 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
}
 80040ba:	bd08      	pop	{r3, pc}

080040bc <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 80040bc:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&huart2);
 80040be:	4c04      	ldr	r4, [pc, #16]	; (80040d0 <USART2_IRQHandler+0x14>)
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7fe ffb5 	bl	8003030 <HAL_UART_IRQHandler>
  USART_ITCharManager(&huart2);
 80040c6:	4620      	mov	r0, r4
 80040c8:	f7ff fd02 	bl	8003ad0 <USART_ITCharManager>
}
 80040cc:	bd10      	pop	{r4, pc}
 80040ce:	bf00      	nop
 80040d0:	200004c8 	.word	0x200004c8

080040d4 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI Line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80040d4:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80040d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80040da:	f7fd fd81 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80040de:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80040e2:	f7fd fd7d 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
}
 80040e6:	bd08      	pop	{r3, pc}

080040e8 <EXTI9_5_IRQHandler>:

// Tyler added this
void EXTI9_5_IRQHandler(void)
{
 80040e8:	b508      	push	{r3, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80040ea:	2080      	movs	r0, #128	; 0x80
 80040ec:	f7fd fd78 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80040f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80040f4:	f7fd fd74 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80040f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80040fc:	f7fd fd70 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
}
 8004100:	bd08      	pop	{r3, pc}
	...

08004104 <__libc_init_array>:
 8004104:	b570      	push	{r4, r5, r6, lr}
 8004106:	4d0d      	ldr	r5, [pc, #52]	; (800413c <__libc_init_array+0x38>)
 8004108:	4c0d      	ldr	r4, [pc, #52]	; (8004140 <__libc_init_array+0x3c>)
 800410a:	1b64      	subs	r4, r4, r5
 800410c:	10a4      	asrs	r4, r4, #2
 800410e:	2600      	movs	r6, #0
 8004110:	42a6      	cmp	r6, r4
 8004112:	d109      	bne.n	8004128 <__libc_init_array+0x24>
 8004114:	4d0b      	ldr	r5, [pc, #44]	; (8004144 <__libc_init_array+0x40>)
 8004116:	4c0c      	ldr	r4, [pc, #48]	; (8004148 <__libc_init_array+0x44>)
 8004118:	f000 f818 	bl	800414c <_init>
 800411c:	1b64      	subs	r4, r4, r5
 800411e:	10a4      	asrs	r4, r4, #2
 8004120:	2600      	movs	r6, #0
 8004122:	42a6      	cmp	r6, r4
 8004124:	d105      	bne.n	8004132 <__libc_init_array+0x2e>
 8004126:	bd70      	pop	{r4, r5, r6, pc}
 8004128:	f855 3b04 	ldr.w	r3, [r5], #4
 800412c:	4798      	blx	r3
 800412e:	3601      	adds	r6, #1
 8004130:	e7ee      	b.n	8004110 <__libc_init_array+0xc>
 8004132:	f855 3b04 	ldr.w	r3, [r5], #4
 8004136:	4798      	blx	r3
 8004138:	3601      	adds	r6, #1
 800413a:	e7f2      	b.n	8004122 <__libc_init_array+0x1e>
 800413c:	08004b30 	.word	0x08004b30
 8004140:	08004b30 	.word	0x08004b30
 8004144:	08004b30 	.word	0x08004b30
 8004148:	08004b34 	.word	0x08004b34

0800414c <_init>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	bf00      	nop
 8004150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004152:	bc08      	pop	{r3}
 8004154:	469e      	mov	lr, r3
 8004156:	4770      	bx	lr

08004158 <_fini>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	bf00      	nop
 800415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	469e      	mov	lr, r3
 8004162:	4770      	bx	lr
